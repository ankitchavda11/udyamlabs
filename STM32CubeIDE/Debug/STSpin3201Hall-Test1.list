
STSpin3201Hall-Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006384  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  08006444  08006444  00016444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006760  08006760  0002068c  2**0
                  CONTENTS
  4 .ARM          00000000  08006760  08006760  0002068c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006760  08006760  0002068c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006760  08006760  00016760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006764  08006764  00016764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000068c  20000000  08006768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  2000068c  08006df4  0002068c  2**2
                  ALLOC
 10 ._user_heap_stack 00000484  20000ac4  08006df4  00020ac4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002068c  2**0
                  CONTENTS, READONLY
 12 .debug_line   00030442  00000000  00000000  000206b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00045831  00000000  00000000  00050af6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006b55  00000000  00000000  00096327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a0  00000000  00000000  0009ce80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0008154d  00000000  00000000  0009e520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002d08  00000000  00000000  0011fa70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    00016d52  00000000  00000000  00122778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001a56d  00000000  00000000  001394ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000cf  00000000  00000000  00153a37  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004158  00000000  00000000  00153b08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000068c 	.word	0x2000068c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800642c 	.word	0x0800642c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000690 	.word	0x20000690
 8000104:	0800642c 	.word	0x0800642c

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__gnu_thumb1_case_shi>:
 8000130:	b403      	push	{r0, r1}
 8000132:	4671      	mov	r1, lr
 8000134:	0849      	lsrs	r1, r1, #1
 8000136:	0040      	lsls	r0, r0, #1
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	5e09      	ldrsh	r1, [r1, r0]
 800013c:	0049      	lsls	r1, r1, #1
 800013e:	448e      	add	lr, r1
 8000140:	bc03      	pop	{r0, r1}
 8000142:	4770      	bx	lr

08000144 <__gnu_thumb1_case_uhi>:
 8000144:	b403      	push	{r0, r1}
 8000146:	4671      	mov	r1, lr
 8000148:	0849      	lsrs	r1, r1, #1
 800014a:	0040      	lsls	r0, r0, #1
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	5a09      	ldrh	r1, [r1, r0]
 8000150:	0049      	lsls	r1, r1, #1
 8000152:	448e      	add	lr, r1
 8000154:	bc03      	pop	{r0, r1}
 8000156:	4770      	bx	lr

08000158 <__udivsi3>:
 8000158:	2200      	movs	r2, #0
 800015a:	0843      	lsrs	r3, r0, #1
 800015c:	428b      	cmp	r3, r1
 800015e:	d374      	bcc.n	800024a <__udivsi3+0xf2>
 8000160:	0903      	lsrs	r3, r0, #4
 8000162:	428b      	cmp	r3, r1
 8000164:	d35f      	bcc.n	8000226 <__udivsi3+0xce>
 8000166:	0a03      	lsrs	r3, r0, #8
 8000168:	428b      	cmp	r3, r1
 800016a:	d344      	bcc.n	80001f6 <__udivsi3+0x9e>
 800016c:	0b03      	lsrs	r3, r0, #12
 800016e:	428b      	cmp	r3, r1
 8000170:	d328      	bcc.n	80001c4 <__udivsi3+0x6c>
 8000172:	0c03      	lsrs	r3, r0, #16
 8000174:	428b      	cmp	r3, r1
 8000176:	d30d      	bcc.n	8000194 <__udivsi3+0x3c>
 8000178:	22ff      	movs	r2, #255	; 0xff
 800017a:	0209      	lsls	r1, r1, #8
 800017c:	ba12      	rev	r2, r2
 800017e:	0c03      	lsrs	r3, r0, #16
 8000180:	428b      	cmp	r3, r1
 8000182:	d302      	bcc.n	800018a <__udivsi3+0x32>
 8000184:	1212      	asrs	r2, r2, #8
 8000186:	0209      	lsls	r1, r1, #8
 8000188:	d065      	beq.n	8000256 <__udivsi3+0xfe>
 800018a:	0b03      	lsrs	r3, r0, #12
 800018c:	428b      	cmp	r3, r1
 800018e:	d319      	bcc.n	80001c4 <__udivsi3+0x6c>
 8000190:	e000      	b.n	8000194 <__udivsi3+0x3c>
 8000192:	0a09      	lsrs	r1, r1, #8
 8000194:	0bc3      	lsrs	r3, r0, #15
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x46>
 800019a:	03cb      	lsls	r3, r1, #15
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b83      	lsrs	r3, r0, #14
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x52>
 80001a6:	038b      	lsls	r3, r1, #14
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0b43      	lsrs	r3, r0, #13
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x5e>
 80001b2:	034b      	lsls	r3, r1, #13
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x6a>
 80001be:	030b      	lsls	r3, r1, #12
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0ac3      	lsrs	r3, r0, #11
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x76>
 80001ca:	02cb      	lsls	r3, r1, #11
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a83      	lsrs	r3, r0, #10
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x82>
 80001d6:	028b      	lsls	r3, r1, #10
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0a43      	lsrs	r3, r0, #9
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x8e>
 80001e2:	024b      	lsls	r3, r1, #9
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	0a03      	lsrs	r3, r0, #8
 80001ea:	428b      	cmp	r3, r1
 80001ec:	d301      	bcc.n	80001f2 <__udivsi3+0x9a>
 80001ee:	020b      	lsls	r3, r1, #8
 80001f0:	1ac0      	subs	r0, r0, r3
 80001f2:	4152      	adcs	r2, r2
 80001f4:	d2cd      	bcs.n	8000192 <__udivsi3+0x3a>
 80001f6:	09c3      	lsrs	r3, r0, #7
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xa8>
 80001fc:	01cb      	lsls	r3, r1, #7
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0983      	lsrs	r3, r0, #6
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xb4>
 8000208:	018b      	lsls	r3, r1, #6
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0943      	lsrs	r3, r0, #5
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xc0>
 8000214:	014b      	lsls	r3, r1, #5
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0903      	lsrs	r3, r0, #4
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xcc>
 8000220:	010b      	lsls	r3, r1, #4
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	08c3      	lsrs	r3, r0, #3
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xd8>
 800022c:	00cb      	lsls	r3, r1, #3
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	0883      	lsrs	r3, r0, #2
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xe4>
 8000238:	008b      	lsls	r3, r1, #2
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	0843      	lsrs	r3, r0, #1
 8000240:	428b      	cmp	r3, r1
 8000242:	d301      	bcc.n	8000248 <__udivsi3+0xf0>
 8000244:	004b      	lsls	r3, r1, #1
 8000246:	1ac0      	subs	r0, r0, r3
 8000248:	4152      	adcs	r2, r2
 800024a:	1a41      	subs	r1, r0, r1
 800024c:	d200      	bcs.n	8000250 <__udivsi3+0xf8>
 800024e:	4601      	mov	r1, r0
 8000250:	4152      	adcs	r2, r2
 8000252:	4610      	mov	r0, r2
 8000254:	4770      	bx	lr
 8000256:	e7ff      	b.n	8000258 <__udivsi3+0x100>
 8000258:	b501      	push	{r0, lr}
 800025a:	2000      	movs	r0, #0
 800025c:	f000 f8f0 	bl	8000440 <__aeabi_idiv0>
 8000260:	bd02      	pop	{r1, pc}
 8000262:	46c0      	nop			; (mov r8, r8)

08000264 <__aeabi_uidivmod>:
 8000264:	2900      	cmp	r1, #0
 8000266:	d0f7      	beq.n	8000258 <__udivsi3+0x100>
 8000268:	e776      	b.n	8000158 <__udivsi3>
 800026a:	4770      	bx	lr

0800026c <__divsi3>:
 800026c:	4603      	mov	r3, r0
 800026e:	430b      	orrs	r3, r1
 8000270:	d47f      	bmi.n	8000372 <__divsi3+0x106>
 8000272:	2200      	movs	r2, #0
 8000274:	0843      	lsrs	r3, r0, #1
 8000276:	428b      	cmp	r3, r1
 8000278:	d374      	bcc.n	8000364 <__divsi3+0xf8>
 800027a:	0903      	lsrs	r3, r0, #4
 800027c:	428b      	cmp	r3, r1
 800027e:	d35f      	bcc.n	8000340 <__divsi3+0xd4>
 8000280:	0a03      	lsrs	r3, r0, #8
 8000282:	428b      	cmp	r3, r1
 8000284:	d344      	bcc.n	8000310 <__divsi3+0xa4>
 8000286:	0b03      	lsrs	r3, r0, #12
 8000288:	428b      	cmp	r3, r1
 800028a:	d328      	bcc.n	80002de <__divsi3+0x72>
 800028c:	0c03      	lsrs	r3, r0, #16
 800028e:	428b      	cmp	r3, r1
 8000290:	d30d      	bcc.n	80002ae <__divsi3+0x42>
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	0209      	lsls	r1, r1, #8
 8000296:	ba12      	rev	r2, r2
 8000298:	0c03      	lsrs	r3, r0, #16
 800029a:	428b      	cmp	r3, r1
 800029c:	d302      	bcc.n	80002a4 <__divsi3+0x38>
 800029e:	1212      	asrs	r2, r2, #8
 80002a0:	0209      	lsls	r1, r1, #8
 80002a2:	d065      	beq.n	8000370 <__divsi3+0x104>
 80002a4:	0b03      	lsrs	r3, r0, #12
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d319      	bcc.n	80002de <__divsi3+0x72>
 80002aa:	e000      	b.n	80002ae <__divsi3+0x42>
 80002ac:	0a09      	lsrs	r1, r1, #8
 80002ae:	0bc3      	lsrs	r3, r0, #15
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x4c>
 80002b4:	03cb      	lsls	r3, r1, #15
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b83      	lsrs	r3, r0, #14
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x58>
 80002c0:	038b      	lsls	r3, r1, #14
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0b43      	lsrs	r3, r0, #13
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x64>
 80002cc:	034b      	lsls	r3, r1, #13
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x70>
 80002d8:	030b      	lsls	r3, r1, #12
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0ac3      	lsrs	r3, r0, #11
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x7c>
 80002e4:	02cb      	lsls	r3, r1, #11
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a83      	lsrs	r3, r0, #10
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0x88>
 80002f0:	028b      	lsls	r3, r1, #10
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	0a43      	lsrs	r3, r0, #9
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d301      	bcc.n	8000300 <__divsi3+0x94>
 80002fc:	024b      	lsls	r3, r1, #9
 80002fe:	1ac0      	subs	r0, r0, r3
 8000300:	4152      	adcs	r2, r2
 8000302:	0a03      	lsrs	r3, r0, #8
 8000304:	428b      	cmp	r3, r1
 8000306:	d301      	bcc.n	800030c <__divsi3+0xa0>
 8000308:	020b      	lsls	r3, r1, #8
 800030a:	1ac0      	subs	r0, r0, r3
 800030c:	4152      	adcs	r2, r2
 800030e:	d2cd      	bcs.n	80002ac <__divsi3+0x40>
 8000310:	09c3      	lsrs	r3, r0, #7
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xae>
 8000316:	01cb      	lsls	r3, r1, #7
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0983      	lsrs	r3, r0, #6
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xba>
 8000322:	018b      	lsls	r3, r1, #6
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0943      	lsrs	r3, r0, #5
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xc6>
 800032e:	014b      	lsls	r3, r1, #5
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xd2>
 800033a:	010b      	lsls	r3, r1, #4
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	08c3      	lsrs	r3, r0, #3
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xde>
 8000346:	00cb      	lsls	r3, r1, #3
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	0883      	lsrs	r3, r0, #2
 800034e:	428b      	cmp	r3, r1
 8000350:	d301      	bcc.n	8000356 <__divsi3+0xea>
 8000352:	008b      	lsls	r3, r1, #2
 8000354:	1ac0      	subs	r0, r0, r3
 8000356:	4152      	adcs	r2, r2
 8000358:	0843      	lsrs	r3, r0, #1
 800035a:	428b      	cmp	r3, r1
 800035c:	d301      	bcc.n	8000362 <__divsi3+0xf6>
 800035e:	004b      	lsls	r3, r1, #1
 8000360:	1ac0      	subs	r0, r0, r3
 8000362:	4152      	adcs	r2, r2
 8000364:	1a41      	subs	r1, r0, r1
 8000366:	d200      	bcs.n	800036a <__divsi3+0xfe>
 8000368:	4601      	mov	r1, r0
 800036a:	4152      	adcs	r2, r2
 800036c:	4610      	mov	r0, r2
 800036e:	4770      	bx	lr
 8000370:	e05d      	b.n	800042e <__divsi3+0x1c2>
 8000372:	0fca      	lsrs	r2, r1, #31
 8000374:	d000      	beq.n	8000378 <__divsi3+0x10c>
 8000376:	4249      	negs	r1, r1
 8000378:	1003      	asrs	r3, r0, #32
 800037a:	d300      	bcc.n	800037e <__divsi3+0x112>
 800037c:	4240      	negs	r0, r0
 800037e:	4053      	eors	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	469c      	mov	ip, r3
 8000384:	0903      	lsrs	r3, r0, #4
 8000386:	428b      	cmp	r3, r1
 8000388:	d32d      	bcc.n	80003e6 <__divsi3+0x17a>
 800038a:	0a03      	lsrs	r3, r0, #8
 800038c:	428b      	cmp	r3, r1
 800038e:	d312      	bcc.n	80003b6 <__divsi3+0x14a>
 8000390:	22fc      	movs	r2, #252	; 0xfc
 8000392:	0189      	lsls	r1, r1, #6
 8000394:	ba12      	rev	r2, r2
 8000396:	0a03      	lsrs	r3, r0, #8
 8000398:	428b      	cmp	r3, r1
 800039a:	d30c      	bcc.n	80003b6 <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d308      	bcc.n	80003b6 <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	1192      	asrs	r2, r2, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d304      	bcc.n	80003b6 <__divsi3+0x14a>
 80003ac:	0189      	lsls	r1, r1, #6
 80003ae:	d03a      	beq.n	8000426 <__divsi3+0x1ba>
 80003b0:	1192      	asrs	r2, r2, #6
 80003b2:	e000      	b.n	80003b6 <__divsi3+0x14a>
 80003b4:	0989      	lsrs	r1, r1, #6
 80003b6:	09c3      	lsrs	r3, r0, #7
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x154>
 80003bc:	01cb      	lsls	r3, r1, #7
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0983      	lsrs	r3, r0, #6
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x160>
 80003c8:	018b      	lsls	r3, r1, #6
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0943      	lsrs	r3, r0, #5
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x16c>
 80003d4:	014b      	lsls	r3, r1, #5
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0903      	lsrs	r3, r0, #4
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x178>
 80003e0:	010b      	lsls	r3, r1, #4
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	08c3      	lsrs	r3, r0, #3
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x184>
 80003ec:	00cb      	lsls	r3, r1, #3
 80003ee:	1ac0      	subs	r0, r0, r3
 80003f0:	4152      	adcs	r2, r2
 80003f2:	0883      	lsrs	r3, r0, #2
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d301      	bcc.n	80003fc <__divsi3+0x190>
 80003f8:	008b      	lsls	r3, r1, #2
 80003fa:	1ac0      	subs	r0, r0, r3
 80003fc:	4152      	adcs	r2, r2
 80003fe:	d2d9      	bcs.n	80003b4 <__divsi3+0x148>
 8000400:	0843      	lsrs	r3, r0, #1
 8000402:	428b      	cmp	r3, r1
 8000404:	d301      	bcc.n	800040a <__divsi3+0x19e>
 8000406:	004b      	lsls	r3, r1, #1
 8000408:	1ac0      	subs	r0, r0, r3
 800040a:	4152      	adcs	r2, r2
 800040c:	1a41      	subs	r1, r0, r1
 800040e:	d200      	bcs.n	8000412 <__divsi3+0x1a6>
 8000410:	4601      	mov	r1, r0
 8000412:	4663      	mov	r3, ip
 8000414:	4152      	adcs	r2, r2
 8000416:	105b      	asrs	r3, r3, #1
 8000418:	4610      	mov	r0, r2
 800041a:	d301      	bcc.n	8000420 <__divsi3+0x1b4>
 800041c:	4240      	negs	r0, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d500      	bpl.n	8000424 <__divsi3+0x1b8>
 8000422:	4249      	negs	r1, r1
 8000424:	4770      	bx	lr
 8000426:	4663      	mov	r3, ip
 8000428:	105b      	asrs	r3, r3, #1
 800042a:	d300      	bcc.n	800042e <__divsi3+0x1c2>
 800042c:	4240      	negs	r0, r0
 800042e:	b501      	push	{r0, lr}
 8000430:	2000      	movs	r0, #0
 8000432:	f000 f805 	bl	8000440 <__aeabi_idiv0>
 8000436:	bd02      	pop	{r1, pc}

08000438 <__aeabi_idivmod>:
 8000438:	2900      	cmp	r1, #0
 800043a:	d0f8      	beq.n	800042e <__divsi3+0x1c2>
 800043c:	e716      	b.n	800026c <__divsi3>
 800043e:	4770      	bx	lr

08000440 <__aeabi_idiv0>:
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000444:	480d      	ldr	r0, [pc, #52]	; (800047c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000446:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000448:	480d      	ldr	r0, [pc, #52]	; (8000480 <LoopForever+0x6>)
  ldr r1, =_edata
 800044a:	490e      	ldr	r1, [pc, #56]	; (8000484 <LoopForever+0xa>)
  ldr r2, =_sidata
 800044c:	4a0e      	ldr	r2, [pc, #56]	; (8000488 <LoopForever+0xe>)
  movs r3, #0
 800044e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000450:	e002      	b.n	8000458 <LoopCopyDataInit>

08000452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000456:	3304      	adds	r3, #4

08000458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800045a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800045c:	d3f9      	bcc.n	8000452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800045e:	4a0b      	ldr	r2, [pc, #44]	; (800048c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000460:	4c0b      	ldr	r4, [pc, #44]	; (8000490 <LoopForever+0x16>)
  movs r3, #0
 8000462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000464:	e001      	b.n	800046a <LoopFillZerobss>

08000466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000468:	3204      	adds	r2, #4

0800046a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800046a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800046c:	d3fb      	bcc.n	8000466 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800046e:	f002 fa1d 	bl	80028ac <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000472:	f005 fb45 	bl	8005b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000476:	f000 f871 	bl	800055c <main>

0800047a <LoopForever>:

LoopForever:
    b LoopForever
 800047a:	e7fe      	b.n	800047a <LoopForever>
  ldr   r0, =_estack
 800047c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000484:	2000068c 	.word	0x2000068c
  ldr r2, =_sidata
 8000488:	08006768 	.word	0x08006768
  ldr r2, =_sbss
 800048c:	2000068c 	.word	0x2000068c
  ldr r4, =_ebss
 8000490:	20000ac4 	.word	0x20000ac4

08000494 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000494:	e7fe      	b.n	8000494 <ADC1_IRQHandler>
	...

08000498 <DACT_Init>:
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  SET_BIT(TIMx->CCER, Channels);
 8000498:	2201      	movs	r2, #1
  */
__STATIC_INLINE void LL_TIM_OC_DisablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800049a:	2008      	movs	r0, #8
  SET_BIT(TIMx->CCER, Channels);
 800049c:	4b05      	ldr	r3, [pc, #20]	; (80004b4 <DACT_Init+0x1c>)
 800049e:	6a19      	ldr	r1, [r3, #32]
 80004a0:	4311      	orrs	r1, r2
 80004a2:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80004a4:	6999      	ldr	r1, [r3, #24]
 80004a6:	4381      	bics	r1, r0
 80004a8:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80004aa:	6819      	ldr	r1, [r3, #0]
 80004ac:	430a      	orrs	r2, r1
 80004ae:	601a      	str	r2, [r3, #0]
  /* CH1 configuration  */
  LL_TIM_CC_EnableChannel(TIM14, LL_TIM_CHANNEL_CH1);
  LL_TIM_OC_DisablePreload(TIM14, LL_TIM_CHANNEL_CH1);
  /* start Timer */
  LL_TIM_EnableCounter(TIM14);
}
 80004b0:	4770      	bx	lr
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	40002000 	.word	0x40002000

080004b8 <DACT_Exec>:
__weak void DACT_Exec(UI_Handle_t *pHandle)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  MC_Protocol_REG_t bCh1_var;

  bCh1_var = pDacHandle->bChannel_variable[DAC_CH0];
 80004b8:	0003      	movs	r3, r0
{
 80004ba:	b510      	push	{r4, lr}
  bCh1_var = pDacHandle->bChannel_variable[DAC_CH0];
 80004bc:	3330      	adds	r3, #48	; 0x30
  LL_TIM_OC_SetCompareCH1(TIM14, ((uint16_t)((int16_t)(((int16_t)UI_GetReg(pHandle,bCh1_var,MC_NULL)+32768)/32))));
 80004be:	7819      	ldrb	r1, [r3, #0]
 80004c0:	2200      	movs	r2, #0
 80004c2:	f002 f805 	bl	80024d0 <UI_GetReg>
 80004c6:	2380      	movs	r3, #128	; 0x80
 80004c8:	b200      	sxth	r0, r0
 80004ca:	021b      	lsls	r3, r3, #8
 80004cc:	18c0      	adds	r0, r0, r3
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  WRITE_REG(TIMx->CCR1, CompareValue);
 80004ce:	4b02      	ldr	r3, [pc, #8]	; (80004d8 <DACT_Exec+0x20>)
 80004d0:	1140      	asrs	r0, r0, #5
 80004d2:	6358      	str	r0, [r3, #52]	; 0x34
}
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	40002000 	.word	0x40002000

080004dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004dc:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004de:	2510      	movs	r5, #16
{
 80004e0:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e2:	222c      	movs	r2, #44	; 0x2c
 80004e4:	2100      	movs	r1, #0
 80004e6:	a809      	add	r0, sp, #36	; 0x24
 80004e8:	f005 fb37 	bl	8005b5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ec:	002a      	movs	r2, r5
 80004ee:	2100      	movs	r1, #0
 80004f0:	4668      	mov	r0, sp
 80004f2:	f005 fb32 	bl	8005b5a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004f6:	002a      	movs	r2, r5
 80004f8:	2100      	movs	r1, #0
 80004fa:	a804      	add	r0, sp, #16
 80004fc:	f005 fb2d 	bl	8005b5a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000500:	2312      	movs	r3, #18
 8000502:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000504:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000506:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000508:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800050a:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800050c:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800050e:	3d0e      	subs	r5, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000510:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000512:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000514:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000516:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000518:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051a:	f002 fc8d 	bl	8002e38 <HAL_RCC_OscConfig>
 800051e:	2800      	cmp	r0, #0
 8000520:	d001      	beq.n	8000526 <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000522:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000524:	e7fe      	b.n	8000524 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000526:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000528:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800052a:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800052c:	0021      	movs	r1, r4
 800052e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000530:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000532:	9501      	str	r5, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000534:	f002 febc 	bl	80032b0 <HAL_RCC_ClockConfig>
 8000538:	2800      	cmp	r0, #0
 800053a:	d001      	beq.n	8000540 <SystemClock_Config+0x64>
 800053c:	b672      	cpsid	i
  while (1)
 800053e:	e7fe      	b.n	800053e <SystemClock_Config+0x62>
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000540:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000542:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000544:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000546:	f002 ff4d 	bl	80033e4 <HAL_RCCEx_PeriphCLKConfig>
 800054a:	2800      	cmp	r0, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0x76>
 800054e:	b672      	cpsid	i
  while (1)
 8000550:	e7fe      	b.n	8000550 <SystemClock_Config+0x74>
  HAL_RCC_EnableCSS();
 8000552:	f002 fe71 	bl	8003238 <HAL_RCC_EnableCSS>
}
 8000556:	b015      	add	sp, #84	; 0x54
 8000558:	bd30      	pop	{r4, r5, pc}
	...

0800055c <main>:
{
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 8000560:	f002 f9ca 	bl	80028f8 <HAL_Init>
  SystemClock_Config();
 8000564:	f7ff ffba 	bl	80004dc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000568:	2214      	movs	r2, #20
 800056a:	2100      	movs	r1, #0
 800056c:	a80e      	add	r0, sp, #56	; 0x38
 800056e:	f005 faf4 	bl	8005b5a <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000572:	2180      	movs	r1, #128	; 0x80
 8000574:	4cd0      	ldr	r4, [pc, #832]	; (80008b8 <main+0x35c>)
 8000576:	03c9      	lsls	r1, r1, #15
 8000578:	6962      	ldr	r2, [r4, #20]
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 800057a:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800057c:	430a      	orrs	r2, r1
 800057e:	6162      	str	r2, [r4, #20]
 8000580:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 8000582:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000584:	400b      	ands	r3, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000588:	9302      	str	r3, [sp, #8]
 800058a:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058c:	6962      	ldr	r2, [r4, #20]
 800058e:	0289      	lsls	r1, r1, #10
 8000590:	430a      	orrs	r2, r1
 8000592:	6162      	str	r2, [r4, #20]
 8000594:	6963      	ldr	r3, [r4, #20]
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000596:	2501      	movs	r5, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000598:	400b      	ands	r3, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059a:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059c:	9303      	str	r3, [sp, #12]
 800059e:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a0:	6962      	ldr	r2, [r4, #20]
 80005a2:	02c9      	lsls	r1, r1, #11
 80005a4:	430a      	orrs	r2, r1
 80005a6:	6162      	str	r2, [r4, #20]
 80005a8:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 80005aa:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ac:	400b      	ands	r3, r1
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 80005ae:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b0:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 80005b2:	0109      	lsls	r1, r1, #4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b4:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 80005b6:	f002 fc39 	bl	8002e2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_3FG_HIZ_GPIO_Port, _3FG_HIZ_Pin, GPIO_PIN_RESET);
 80005ba:	2180      	movs	r1, #128	; 0x80
 80005bc:	2090      	movs	r0, #144	; 0x90
 80005be:	2200      	movs	r2, #0
 80005c0:	0149      	lsls	r1, r1, #5
 80005c2:	05c0      	lsls	r0, r0, #23
 80005c4:	f002 fc32 	bl	8002e2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OCTH_STBY2_GPIO_Port, OCTH_STBY2_Pin, GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2140      	movs	r1, #64	; 0x40
 80005cc:	48bb      	ldr	r0, [pc, #748]	; (80008bc <main+0x360>)
 80005ce:	f002 fc2d 	bl	8002e2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OCTH_STBY1_GPIO_Port, OCTH_STBY1_Pin, GPIO_PIN_SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	2180      	movs	r1, #128	; 0x80
 80005d6:	48b9      	ldr	r0, [pc, #740]	; (80008bc <main+0x360>)
 80005d8:	f002 fc28 	bl	8002e2c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005dc:	2384      	movs	r3, #132	; 0x84
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80005de:	48b7      	ldr	r0, [pc, #732]	; (80008bc <main+0x360>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005e0:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80005e2:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005e4:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 80005e6:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005e8:	9510      	str	r5, [sp, #64]	; 0x40
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80005ea:	f002 fb6f 	bl	8002ccc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OC_SEL_Pin|_3FG_HIZ_Pin;
 80005ee:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f0:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f2:	2600      	movs	r6, #0
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005f4:	2702      	movs	r7, #2
  GPIO_InitStruct.Pin = OC_SEL_Pin|_3FG_HIZ_Pin;
 80005f6:	015b      	lsls	r3, r3, #5
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f8:	a90e      	add	r1, sp, #56	; 0x38
 80005fa:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = OC_SEL_Pin|_3FG_HIZ_Pin;
 80005fc:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005fe:	9710      	str	r7, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000600:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000602:	9611      	str	r6, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000604:	f002 fb62 	bl	8002ccc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OCTH_STBY2_Pin|OCTH_STBY1_Pin;
 8000608:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800060a:	48ac      	ldr	r0, [pc, #688]	; (80008bc <main+0x360>)
 800060c:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = OCTH_STBY2_Pin|OCTH_STBY1_Pin;
 800060e:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000610:	9710      	str	r7, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000612:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000614:	9611      	str	r6, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000616:	f002 fb59 	bl	8002ccc <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800061a:	6963      	ldr	r3, [r4, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 800061c:	220c      	movs	r2, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 800061e:	432b      	orrs	r3, r5
 8000620:	6163      	str	r3, [r4, #20]
 8000622:	6963      	ldr	r3, [r4, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000624:	0031      	movs	r1, r6
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000626:	402b      	ands	r3, r5
 8000628:	9301      	str	r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 800062a:	a80e      	add	r0, sp, #56	; 0x38
  __HAL_RCC_DMA1_CLK_ENABLE();
 800062c:	9b01      	ldr	r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 800062e:	f005 fa94 	bl	8005b5a <memset>
  hadc.Instance = ADC1;
 8000632:	4ca3      	ldr	r4, [pc, #652]	; (80008c0 <main+0x364>)
 8000634:	4ba3      	ldr	r3, [pc, #652]	; (80008c4 <main+0x368>)
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000636:	19ff      	adds	r7, r7, r7
  hadc.Instance = ADC1;
 8000638:	6023      	str	r3, [r4, #0]
  hadc.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800063a:	2320      	movs	r3, #32
 800063c:	60e3      	str	r3, [r4, #12]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800063e:	2380      	movs	r3, #128	; 0x80
 8000640:	00db      	lsls	r3, r3, #3
 8000642:	6223      	str	r3, [r4, #32]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000644:	0020      	movs	r0, r4
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000646:	1d63      	adds	r3, r4, #5
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000648:	61a6      	str	r6, [r4, #24]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800064a:	6066      	str	r6, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800064c:	60a6      	str	r6, [r4, #8]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800064e:	6125      	str	r5, [r4, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000650:	6167      	str	r7, [r4, #20]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000652:	61e6      	str	r6, [r4, #28]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000654:	77dd      	strb	r5, [r3, #31]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000656:	62a5      	str	r5, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000658:	f002 f982 	bl	8002960 <HAL_ADC_Init>
 800065c:	42b0      	cmp	r0, r6
 800065e:	d001      	beq.n	8000664 <main+0x108>
 8000660:	b672      	cpsid	i
  while (1)
 8000662:	e7fe      	b.n	8000662 <main+0x106>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000664:	2380      	movs	r3, #128	; 0x80
  sConfig.Channel = ADC_CHANNEL_3;
 8000666:	2603      	movs	r6, #3
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000668:	015b      	lsls	r3, r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800066a:	0020      	movs	r0, r4
 800066c:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_3;
 800066e:	960e      	str	r6, [sp, #56]	; 0x38
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000670:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000672:	9510      	str	r5, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000674:	f002 fa1c 	bl	8002ab0 <HAL_ADC_ConfigChannel>
 8000678:	2800      	cmp	r0, #0
 800067a:	d001      	beq.n	8000680 <main+0x124>
 800067c:	b672      	cpsid	i
  while (1)
 800067e:	e7fe      	b.n	800067e <main+0x122>
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000680:	0020      	movs	r0, r4
 8000682:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_4;
 8000684:	970e      	str	r7, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000686:	f002 fa13 	bl	8002ab0 <HAL_ADC_ConfigChannel>
 800068a:	2800      	cmp	r0, #0
 800068c:	d001      	beq.n	8000692 <main+0x136>
 800068e:	b672      	cpsid	i
  while (1)
 8000690:	e7fe      	b.n	8000690 <main+0x134>
  sConfig.Channel = ADC_CHANNEL_5;
 8000692:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000694:	0020      	movs	r0, r4
 8000696:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_5;
 8000698:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800069a:	f002 fa09 	bl	8002ab0 <HAL_ADC_ConfigChannel>
 800069e:	2800      	cmp	r0, #0
 80006a0:	d001      	beq.n	80006a6 <main+0x14a>
 80006a2:	b672      	cpsid	i
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <main+0x148>
  sConfig.Channel = ADC_CHANNEL_9;
 80006a6:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006a8:	0020      	movs	r0, r4
 80006aa:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_9;
 80006ac:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006ae:	f002 f9ff 	bl	8002ab0 <HAL_ADC_ConfigChannel>
 80006b2:	1e05      	subs	r5, r0, #0
 80006b4:	d001      	beq.n	80006ba <main+0x15e>
 80006b6:	b672      	cpsid	i
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <main+0x15c>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ba:	0001      	movs	r1, r0
 80006bc:	2208      	movs	r2, #8
 80006be:	a805      	add	r0, sp, #20
 80006c0:	f005 fa4b 	bl	8005b5a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006c4:	221c      	movs	r2, #28
 80006c6:	0029      	movs	r1, r5
 80006c8:	a807      	add	r0, sp, #28
 80006ca:	f005 fa46 	bl	8005b5a <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006ce:	2220      	movs	r2, #32
 80006d0:	0029      	movs	r1, r5
 80006d2:	a80e      	add	r0, sp, #56	; 0x38
 80006d4:	f005 fa41 	bl	8005b5a <memset>
  htim1.Instance = TIM1;
 80006d8:	4c7b      	ldr	r4, [pc, #492]	; (80008c8 <main+0x36c>)
 80006da:	4b7c      	ldr	r3, [pc, #496]	; (80008cc <main+0x370>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006dc:	0020      	movs	r0, r4
  htim1.Instance = TIM1;
 80006de:	6023      	str	r3, [r4, #0]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80006e0:	2320      	movs	r3, #32
 80006e2:	60a3      	str	r3, [r4, #8]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 80006e4:	2396      	movs	r3, #150	; 0x96
 80006e6:	00db      	lsls	r3, r3, #3
 80006e8:	60e3      	str	r3, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80006ea:	2380      	movs	r3, #128	; 0x80
 80006ec:	005b      	lsls	r3, r3, #1
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 80006ee:	6065      	str	r5, [r4, #4]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80006f0:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 80006f2:	6166      	str	r6, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f4:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006f6:	f003 f81b 	bl	8003730 <HAL_TIM_PWM_Init>
 80006fa:	2800      	cmp	r0, #0
 80006fc:	d001      	beq.n	8000702 <main+0x1a6>
 80006fe:	b672      	cpsid	i
  while (1)
 8000700:	e7fe      	b.n	8000700 <main+0x1a4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000702:	2370      	movs	r3, #112	; 0x70
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000704:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000706:	a905      	add	r1, sp, #20
 8000708:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800070a:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800070c:	f003 fa7e 	bl	8003c0c <HAL_TIMEx_MasterConfigSynchronization>
 8000710:	1e02      	subs	r2, r0, #0
 8000712:	d001      	beq.n	8000718 <main+0x1bc>
 8000714:	b672      	cpsid	i
  while (1)
 8000716:	e7fe      	b.n	8000716 <main+0x1ba>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000718:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 800071a:	9008      	str	r0, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800071c:	9009      	str	r0, [sp, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800071e:	900a      	str	r0, [sp, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000720:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000722:	900c      	str	r0, [sp, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000724:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000726:	a907      	add	r1, sp, #28
 8000728:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800072a:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800072c:	f003 f864 	bl	80037f8 <HAL_TIM_PWM_ConfigChannel>
 8000730:	2800      	cmp	r0, #0
 8000732:	d001      	beq.n	8000738 <main+0x1dc>
 8000734:	b672      	cpsid	i
  while (1)
 8000736:	e7fe      	b.n	8000736 <main+0x1da>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000738:	003a      	movs	r2, r7
 800073a:	0020      	movs	r0, r4
 800073c:	a907      	add	r1, sp, #28
 800073e:	f003 f85b 	bl	80037f8 <HAL_TIM_PWM_ConfigChannel>
 8000742:	2800      	cmp	r0, #0
 8000744:	d001      	beq.n	800074a <main+0x1ee>
 8000746:	b672      	cpsid	i
  while (1)
 8000748:	e7fe      	b.n	8000748 <main+0x1ec>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800074a:	2208      	movs	r2, #8
 800074c:	0020      	movs	r0, r4
 800074e:	a907      	add	r1, sp, #28
 8000750:	f003 f852 	bl	80037f8 <HAL_TIM_PWM_ConfigChannel>
 8000754:	2800      	cmp	r0, #0
 8000756:	d001      	beq.n	800075c <main+0x200>
 8000758:	b672      	cpsid	i
  while (1)
 800075a:	e7fe      	b.n	800075a <main+0x1fe>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800075c:	2370      	movs	r3, #112	; 0x70
 800075e:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8000760:	4b5b      	ldr	r3, [pc, #364]	; (80008d0 <main+0x374>)
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000762:	220c      	movs	r2, #12
 8000764:	0020      	movs	r0, r4
 8000766:	a907      	add	r1, sp, #28
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8000768:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800076a:	f003 f845 	bl	80037f8 <HAL_TIM_PWM_ConfigChannel>
 800076e:	2800      	cmp	r0, #0
 8000770:	d001      	beq.n	8000776 <main+0x21a>
 8000772:	b672      	cpsid	i
  while (1)
 8000774:	e7fe      	b.n	8000774 <main+0x218>
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000776:	2380      	movs	r3, #128	; 0x80
 8000778:	00db      	lsls	r3, r3, #3
 800077a:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8000782:	3bed      	subs	r3, #237	; 0xed
 8000784:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000786:	2680      	movs	r6, #128	; 0x80
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000788:	2780      	movs	r7, #128	; 0x80
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800078a:	2380      	movs	r3, #128	; 0x80
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800078c:	9015      	str	r0, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800078e:	019b      	lsls	r3, r3, #6
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000790:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000792:	0136      	lsls	r6, r6, #4
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000794:	017f      	lsls	r7, r7, #5
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000796:	a90e      	add	r1, sp, #56	; 0x38
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000798:	960e      	str	r6, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 800079a:	9712      	str	r7, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800079c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800079e:	f003 fa61 	bl	8003c64 <HAL_TIMEx_ConfigBreakDeadTime>
 80007a2:	1e05      	subs	r5, r0, #0
 80007a4:	d001      	beq.n	80007aa <main+0x24e>
 80007a6:	b672      	cpsid	i
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <main+0x24c>
  HAL_TIM_MspPostInit(&htim1);
 80007aa:	0020      	movs	r0, r4
 80007ac:	f001 fb04 	bl	8001db8 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007b0:	2210      	movs	r2, #16
 80007b2:	0029      	movs	r1, r5
 80007b4:	a807      	add	r0, sp, #28
 80007b6:	f005 f9d0 	bl	8005b5a <memset>
  TIM_HallSensor_InitTypeDef sConfig = {0};
 80007ba:	2210      	movs	r2, #16
 80007bc:	0029      	movs	r1, r5
 80007be:	a80e      	add	r0, sp, #56	; 0x38
 80007c0:	f005 f9cb 	bl	8005b5a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c4:	2208      	movs	r2, #8
 80007c6:	0029      	movs	r1, r5
 80007c8:	a805      	add	r0, sp, #20
 80007ca:	f005 f9c6 	bl	8005b5a <memset>
  htim2.Instance = TIM2;
 80007ce:	2380      	movs	r3, #128	; 0x80
 80007d0:	4c40      	ldr	r4, [pc, #256]	; (80008d4 <main+0x378>)
 80007d2:	05db      	lsls	r3, r3, #23
 80007d4:	6023      	str	r3, [r4, #0]
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 80007d6:	4b40      	ldr	r3, [pc, #256]	; (80008d8 <main+0x37c>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007d8:	0020      	movs	r0, r4
  htim2.Init.Prescaler = 0;
 80007da:	6065      	str	r5, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007dc:	60a5      	str	r5, [r4, #8]
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 80007de:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e0:	6125      	str	r5, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e2:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007e4:	f002 ff7c 	bl	80036e0 <HAL_TIM_Base_Init>
 80007e8:	2800      	cmp	r0, #0
 80007ea:	d001      	beq.n	80007f0 <main+0x294>
 80007ec:	b672      	cpsid	i
  while (1)
 80007ee:	e7fe      	b.n	80007ee <main+0x292>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007f0:	0020      	movs	r0, r4
 80007f2:	a907      	add	r1, sp, #28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f4:	9707      	str	r7, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007f6:	f003 f891 	bl	800391c <HAL_TIM_ConfigClockSource>
 80007fa:	2800      	cmp	r0, #0
 80007fc:	d001      	beq.n	8000802 <main+0x2a6>
 80007fe:	b672      	cpsid	i
  while (1)
 8000800:	e7fe      	b.n	8000800 <main+0x2a4>
  sConfig.IC1Filter = M1_HALL_IC_FILTER;
 8000802:	2309      	movs	r3, #9
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000804:	900e      	str	r0, [sp, #56]	; 0x38
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000806:	900f      	str	r0, [sp, #60]	; 0x3c
  sConfig.Commutation_Delay = 0;
 8000808:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 800080a:	a90e      	add	r1, sp, #56	; 0x38
 800080c:	0020      	movs	r0, r4
  sConfig.IC1Filter = M1_HALL_IC_FILTER;
 800080e:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8000810:	f003 f999 	bl	8003b46 <HAL_TIMEx_HallSensor_Init>
 8000814:	2800      	cmp	r0, #0
 8000816:	d001      	beq.n	800081c <main+0x2c0>
 8000818:	b672      	cpsid	i
  while (1)
 800081a:	e7fe      	b.n	800081a <main+0x2be>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800081c:	2350      	movs	r3, #80	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081e:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000820:	a905      	add	r1, sp, #20
 8000822:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000824:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000826:	f003 f9f1 	bl	8003c0c <HAL_TIMEx_MasterConfigSynchronization>
 800082a:	1e05      	subs	r5, r0, #0
 800082c:	d001      	beq.n	8000832 <main+0x2d6>
 800082e:	b672      	cpsid	i
  while (1)
 8000830:	e7fe      	b.n	8000830 <main+0x2d4>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000832:	0001      	movs	r1, r0
 8000834:	221c      	movs	r2, #28
 8000836:	a80e      	add	r0, sp, #56	; 0x38
 8000838:	f005 f98f 	bl	8005b5a <memset>
  htim14.Instance = TIM14;
 800083c:	4c27      	ldr	r4, [pc, #156]	; (80008dc <main+0x380>)
 800083e:	4b28      	ldr	r3, [pc, #160]	; (80008e0 <main+0x384>)
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000840:	0020      	movs	r0, r4
  htim14.Instance = TIM14;
 8000842:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = 0;
 8000844:	6065      	str	r5, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000846:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0x800;
 8000848:	60e6      	str	r6, [r4, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084a:	6125      	str	r5, [r4, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084c:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800084e:	f002 ff47 	bl	80036e0 <HAL_TIM_Base_Init>
 8000852:	2800      	cmp	r0, #0
 8000854:	d001      	beq.n	800085a <main+0x2fe>
 8000856:	b672      	cpsid	i
  while (1)
 8000858:	e7fe      	b.n	8000858 <main+0x2fc>
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800085a:	0020      	movs	r0, r4
 800085c:	f002 ff68 	bl	8003730 <HAL_TIM_PWM_Init>
 8000860:	1e02      	subs	r2, r0, #0
 8000862:	d001      	beq.n	8000868 <main+0x30c>
 8000864:	b672      	cpsid	i
  while (1)
 8000866:	e7fe      	b.n	8000866 <main+0x30a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000868:	2360      	movs	r3, #96	; 0x60
 800086a:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 0x400;
 800086c:	2380      	movs	r3, #128	; 0x80
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800086e:	9010      	str	r0, [sp, #64]	; 0x40
  sConfigOC.Pulse = 0x400;
 8000870:	00db      	lsls	r3, r3, #3
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000872:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000874:	a90e      	add	r1, sp, #56	; 0x38
 8000876:	0020      	movs	r0, r4
  sConfigOC.Pulse = 0x400;
 8000878:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800087a:	f002 ffbd 	bl	80037f8 <HAL_TIM_PWM_ConfigChannel>
 800087e:	1e05      	subs	r5, r0, #0
 8000880:	d001      	beq.n	8000886 <main+0x32a>
 8000882:	b672      	cpsid	i
  while (1)
 8000884:	e7fe      	b.n	8000884 <main+0x328>
  HAL_TIM_MspPostInit(&htim14);
 8000886:	0020      	movs	r0, r4
 8000888:	f001 fa96 	bl	8001db8 <HAL_TIM_MspPostInit>
  huart1.Instance = USART1;
 800088c:	4c15      	ldr	r4, [pc, #84]	; (80008e4 <main+0x388>)
 800088e:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <main+0x38c>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000890:	0020      	movs	r0, r4
  huart1.Instance = USART1;
 8000892:	6023      	str	r3, [r4, #0]
  huart1.Init.BaudRate = 9600;
 8000894:	2396      	movs	r3, #150	; 0x96
 8000896:	019b      	lsls	r3, r3, #6
 8000898:	6063      	str	r3, [r4, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800089a:	230c      	movs	r3, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800089c:	60a5      	str	r5, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800089e:	60e5      	str	r5, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008a0:	6125      	str	r5, [r4, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a2:	6163      	str	r3, [r4, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a4:	61a5      	str	r5, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a6:	61e5      	str	r5, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a8:	6225      	str	r5, [r4, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008aa:	6265      	str	r5, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ac:	f003 fc06 	bl	80040bc <HAL_UART_Init>
 80008b0:	2800      	cmp	r0, #0
 80008b2:	d01b      	beq.n	80008ec <main+0x390>
 80008b4:	b672      	cpsid	i
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <main+0x35a>
 80008b8:	40021000 	.word	0x40021000
 80008bc:	48001400 	.word	0x48001400
 80008c0:	200006a8 	.word	0x200006a8
 80008c4:	40012400 	.word	0x40012400
 80008c8:	2000072c 	.word	0x2000072c
 80008cc:	40012c00 	.word	0x40012c00
 80008d0:	000004af 	.word	0x000004af
 80008d4:	200007bc 	.word	0x200007bc
 80008d8:	0000ffff 	.word	0x0000ffff
 80008dc:	20000774 	.word	0x20000774
 80008e0:	40002000 	.word	0x40002000
 80008e4:	20000804 	.word	0x20000804
 80008e8:	40013800 	.word	0x40013800
  MX_MotorControl_Init();
 80008ec:	f000 fff0 	bl	80018d0 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	200d      	movs	r0, #13
 80008f4:	0011      	movs	r1, r2
 80008f6:	f002 f961 	bl	8002bbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80008fa:	200d      	movs	r0, #13
 80008fc:	f002 f988 	bl	8002c10 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000900:	2200      	movs	r2, #0
 8000902:	2101      	movs	r1, #1
 8000904:	2009      	movs	r0, #9
 8000906:	f002 f959 	bl	8002bbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800090a:	2009      	movs	r0, #9
 800090c:	f002 f980 	bl	8002c10 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8000910:	2200      	movs	r2, #0
 8000912:	2103      	movs	r1, #3
 8000914:	200f      	movs	r0, #15
 8000916:	f002 f951 	bl	8002bbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800091a:	200f      	movs	r0, #15
 800091c:	f002 f978 	bl	8002c10 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8000920:	2200      	movs	r2, #0
 8000922:	2103      	movs	r1, #3
 8000924:	201b      	movs	r0, #27
 8000926:	f002 f949 	bl	8002bbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800092a:	201b      	movs	r0, #27
 800092c:	f002 f970 	bl	8002c10 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	2103      	movs	r1, #3
 8000934:	2005      	movs	r0, #5
 8000936:	f002 f941 	bl	8002bbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800093a:	2005      	movs	r0, #5
 800093c:	f002 f968 	bl	8002c10 <HAL_NVIC_EnableIRQ>
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8000940:	2100      	movs	r1, #0
		  HAL_Delay(1000);
 8000942:	26fa      	movs	r6, #250	; 0xfa
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8000944:	4d14      	ldr	r5, [pc, #80]	; (8000998 <main+0x43c>)
		  HAL_Delay(1000);
 8000946:	00b6      	lsls	r6, r6, #2
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8000948:	682b      	ldr	r3, [r5, #0]
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800094a:	0028      	movs	r0, r5
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 800094c:	6359      	str	r1, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 800094e:	6399      	str	r1, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);
 8000950:	63d9      	str	r1, [r3, #60]	; 0x3c
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000952:	f003 f8f3 	bl	8003b3c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000956:	2104      	movs	r1, #4
 8000958:	0028      	movs	r0, r5
 800095a:	f003 f8ef 	bl	8003b3c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 800095e:	0028      	movs	r0, r5
 8000960:	2108      	movs	r1, #8
 8000962:	f003 f8eb 	bl	8003b3c <HAL_TIM_PWM_Start>
	  if(UI_Params.test == 0){
 8000966:	4d0d      	ldr	r5, [pc, #52]	; (800099c <main+0x440>)
 8000968:	352d      	adds	r5, #45	; 0x2d
 800096a:	782a      	ldrb	r2, [r5, #0]
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <main+0x444>)
 800096e:	490d      	ldr	r1, [pc, #52]	; (80009a4 <main+0x448>)
 8000970:	2a00      	cmp	r2, #0
 8000972:	d10e      	bne.n	8000992 <main+0x436>
		  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "\t STATE: %u\r\n", HALL_M1.HallStateCounter), 100);
 8000974:	33a7      	adds	r3, #167	; 0xa7
		  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "\t STATE: %u\r\n", HALL_M1.HallState), 100);
 8000976:	781a      	ldrb	r2, [r3, #0]
 8000978:	a80e      	add	r0, sp, #56	; 0x38
 800097a:	f005 f8f7 	bl	8005b6c <siprintf>
 800097e:	2364      	movs	r3, #100	; 0x64
 8000980:	b282      	uxth	r2, r0
 8000982:	a90e      	add	r1, sp, #56	; 0x38
 8000984:	0020      	movs	r0, r4
 8000986:	f003 faf5 	bl	8003f74 <HAL_UART_Transmit>
		  HAL_Delay(1000);
 800098a:	0030      	movs	r0, r6
 800098c:	f001 ffd6 	bl	800293c <HAL_Delay>
 8000990:	e7eb      	b.n	800096a <main+0x40e>
		  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "\t STATE: %u\r\n", HALL_M1.HallState), 100);
 8000992:	33a6      	adds	r3, #166	; 0xa6
 8000994:	e7ef      	b.n	8000976 <main+0x41a>
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	2000072c 	.word	0x2000072c
 800099c:	200004a8 	.word	0x200004a8
 80009a0:	200000f0 	.word	0x200000f0
 80009a4:	08006444 	.word	0x08006444

080009a8 <Error_Handler>:
 80009a8:	b672      	cpsid	i
  while (1)
 80009aa:	e7fe      	b.n	80009aa <Error_Handler+0x2>

080009ac <MC_StartMotor1>:
  * check if it has reached the #RUN state. See MC_GetSTMStateMotor1() for more details.
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
 80009ac:	b510      	push	{r4, lr}
	return MCI_StartMotor( pMCI[M1] );
 80009ae:	4b02      	ldr	r3, [pc, #8]	; (80009b8 <MC_StartMotor1+0xc>)
 80009b0:	6818      	ldr	r0, [r3, #0]
 80009b2:	f000 f836 	bl	8000a22 <MCI_StartMotor>
}
 80009b6:	bd10      	pop	{r4, pc}
 80009b8:	20000978 	.word	0x20000978

080009bc <MC_StopMotor1>:
  * #IDLE state has been reached back.
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
 80009bc:	b510      	push	{r4, lr}
	return MCI_StopMotor( pMCI[M1] );
 80009be:	4b02      	ldr	r3, [pc, #8]	; (80009c8 <MC_StopMotor1+0xc>)
 80009c0:	6818      	ldr	r0, [r3, #0]
 80009c2:	f000 f839 	bl	8000a38 <MCI_StopMotor>
}
 80009c6:	bd10      	pop	{r4, pc}
 80009c8:	20000978 	.word	0x20000978

080009cc <MC_GetSTMStateMotor1>:

/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
 80009cc:	b510      	push	{r4, lr}
	return MCI_GetSTMState( pMCI[M1] );
 80009ce:	4b02      	ldr	r3, [pc, #8]	; (80009d8 <MC_GetSTMStateMotor1+0xc>)
 80009d0:	6818      	ldr	r0, [r3, #0]
 80009d2:	f000 f878 	bl	8000ac6 <MCI_GetSTMState>
}
 80009d6:	bd10      	pop	{r4, pc}
 80009d8:	20000978 	.word	0x20000978

080009dc <MCI_Init>:
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;
 80009dc:	6083      	str	r3, [r0, #8]

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80009de:	2300      	movs	r3, #0
  pHandle->pSTM = pSTM;
 80009e0:	6001      	str	r1, [r0, #0]
  pHandle->pSTC = pSTC;
 80009e2:	6042      	str	r2, [r0, #4]
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80009e4:	7303      	strb	r3, [r0, #12]
  pHandle->hFinalSpeed = 0;
 80009e6:	81c3      	strh	r3, [r0, #14]
  pHandle->hFinalTorque = 0;
 80009e8:	8203      	strh	r3, [r0, #16]
  pHandle->hDurationms = 0;
 80009ea:	82c3      	strh	r3, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 80009ec:	7603      	strb	r3, [r0, #24]
}
 80009ee:	4770      	bx	lr

080009f0 <MCI_ExecSpeedRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	7303      	strb	r3, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80009f4:	2302      	movs	r3, #2
 80009f6:	33ff      	adds	r3, #255	; 0xff
  pHandle->hFinalSpeed = hFinalSpeed;
 80009f8:	81c1      	strh	r1, [r0, #14]
  pHandle->hDurationms = hDurationms;
 80009fa:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80009fc:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 80009fe:	4770      	bx	lr

08000a00 <MCI_ExecTorqueRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000a00:	2302      	movs	r3, #2
 8000a02:	7303      	strb	r3, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000a04:	3b01      	subs	r3, #1
  pHandle->hFinalTorque = hFinalTorque;
 8000a06:	8201      	strh	r1, [r0, #16]
  pHandle->hDurationms = hDurationms;
 8000a08:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000a0a:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000a0c:	4770      	bx	lr

08000a0e <MCI_SetCurrentReferences>:
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000a0e:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000a10:	2301      	movs	r3, #1
{
 8000a12:	b082      	sub	sp, #8
  pHandle->Iqdref.q = Iqdref.q;
 8000a14:	8241      	strh	r1, [r0, #18]
  pHandle->Iqdref.d = Iqdref.d;
 8000a16:	0c09      	lsrs	r1, r1, #16
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000a18:	7302      	strb	r2, [r0, #12]
  pHandle->Iqdref.d = Iqdref.d;
 8000a1a:	8281      	strh	r1, [r0, #20]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000a1c:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000a1e:	b002      	add	sp, #8
 8000a20:	4770      	bx	lr

08000a22 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8000a22:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000a24:	2103      	movs	r1, #3
{
 8000a26:	0004      	movs	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000a28:	6800      	ldr	r0, [r0, #0]
 8000a2a:	f004 fead 	bl	8005788 <STM_NextState>

  if ( RetVal == true )
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	d001      	beq.n	8000a36 <MCI_StartMotor+0x14>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000a32:	2301      	movs	r3, #1
 8000a34:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 8000a36:	bd10      	pop	{r4, pc}

08000a38 <MCI_StopMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
 8000a38:	b510      	push	{r4, lr}
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8000a3a:	2107      	movs	r1, #7
 8000a3c:	6800      	ldr	r0, [r0, #0]
 8000a3e:	f004 fea3 	bl	8005788 <STM_NextState>
}
 8000a42:	bd10      	pop	{r4, pc}

08000a44 <MCI_FaultAcknowledged>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
 8000a44:	b510      	push	{r4, lr}
  return STM_FaultAcknowledged( pHandle->pSTM );
 8000a46:	6800      	ldr	r0, [r0, #0]
 8000a48:	f004 ff18 	bl	800587c <STM_FaultAcknowledged>
}
 8000a4c:	bd10      	pop	{r4, pc}

08000a4e <MCI_EncoderAlign>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
 8000a4e:	b510      	push	{r4, lr}
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8000a50:	2101      	movs	r1, #1
 8000a52:	6800      	ldr	r0, [r0, #0]
 8000a54:	f004 fe98 	bl	8005788 <STM_NextState>
}
 8000a58:	bd10      	pop	{r4, pc}

08000a5a <MCI_ExecBufferedCommands>:
  *         occurs.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
 8000a5a:	b510      	push	{r4, lr}
 8000a5c:	1e04      	subs	r4, r0, #0
  if ( pHandle != MC_NULL )
 8000a5e:	d01a      	beq.n	8000a96 <MCI_ExecBufferedCommands+0x3c>
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8000a60:	7e03      	ldrb	r3, [r0, #24]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d117      	bne.n	8000a96 <MCI_ExecBufferedCommands+0x3c>
    {
      bool commandHasBeenExecuted = false;
      switch ( pHandle->lastCommand )
 8000a66:	7b01      	ldrb	r1, [r0, #12]
 8000a68:	2902      	cmp	r1, #2
 8000a6a:	d015      	beq.n	8000a98 <MCI_ExecBufferedCommands+0x3e>
 8000a6c:	2903      	cmp	r1, #3
 8000a6e:	d01e      	beq.n	8000aae <MCI_ExecBufferedCommands+0x54>
 8000a70:	2901      	cmp	r1, #1
 8000a72:	d126      	bne.n	8000ac2 <MCI_ExecBufferedCommands+0x68>
      {
        case MCI_EXECSPEEDRAMP:
        {
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000a74:	2200      	movs	r2, #0
 8000a76:	6883      	ldr	r3, [r0, #8]
 8000a78:	3305      	adds	r3, #5
 8000a7a:	77da      	strb	r2, [r3, #31]
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8000a7c:	6840      	ldr	r0, [r0, #4]
 8000a7e:	f004 fdda 	bl	8005636 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8000a82:	8ae2      	ldrh	r2, [r4, #22]
 8000a84:	230e      	movs	r3, #14
 8000a86:	5ee1      	ldrsh	r1, [r4, r3]
        break;
        case MCI_EXECTORQUERAMP:
        {
          pHandle->pFOCVars->bDriveInput = INTERNAL;
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8000a88:	6860      	ldr	r0, [r4, #4]
 8000a8a:	f004 fdd8 	bl	800563e <STC_ExecRamp>
        break;
        default:
          break;
      }

      if ( commandHasBeenExecuted )
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	d017      	beq.n	8000ac2 <MCI_ExecBufferedCommands+0x68>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8000a92:	2302      	movs	r3, #2
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8000a94:	7623      	strb	r3, [r4, #24]
      }
    }
  }
}
 8000a96:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000a98:	2100      	movs	r1, #0
 8000a9a:	6883      	ldr	r3, [r0, #8]
 8000a9c:	3305      	adds	r3, #5
 8000a9e:	77d9      	strb	r1, [r3, #31]
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8000aa0:	6840      	ldr	r0, [r0, #4]
 8000aa2:	f004 fdc8 	bl	8005636 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8000aa6:	8ae2      	ldrh	r2, [r4, #22]
 8000aa8:	2310      	movs	r3, #16
 8000aaa:	5ee1      	ldrsh	r1, [r4, r3]
 8000aac:	e7ec      	b.n	8000a88 <MCI_ExecBufferedCommands+0x2e>
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000aae:	0021      	movs	r1, r4
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000ab0:	6880      	ldr	r0, [r0, #8]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000ab2:	3112      	adds	r1, #18
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000ab4:	1d42      	adds	r2, r0, #5
 8000ab6:	77d3      	strb	r3, [r2, #31]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000ab8:	3010      	adds	r0, #16
 8000aba:	2204      	movs	r2, #4
 8000abc:	f005 f844 	bl	8005b48 <memcpy>
      if ( commandHasBeenExecuted )
 8000ac0:	e7e7      	b.n	8000a92 <MCI_ExecBufferedCommands+0x38>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	e7e6      	b.n	8000a94 <MCI_ExecBufferedCommands+0x3a>

08000ac6 <MCI_GetSTMState>:
  * @brief  It returns information about the state of the related pSTM object.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
 8000ac6:	b510      	push	{r4, lr}
  return STM_GetState( pHandle->pSTM );
 8000ac8:	6800      	ldr	r0, [r0, #0]
 8000aca:	f004 fed5 	bl	8005878 <STM_GetState>
}
 8000ace:	bd10      	pop	{r4, pc}

08000ad0 <MCI_GetControlMode>:
  * @retval STC_Modality_t It returns the modality of STC. It can be one of
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
 8000ad0:	7e40      	ldrb	r0, [r0, #25]
}
 8000ad2:	4770      	bx	lr

08000ad4 <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8000ad4:	7b02      	ldrb	r2, [r0, #12]
{
 8000ad6:	0003      	movs	r3, r0
  int16_t hRetVal = 0;
 8000ad8:	2000      	movs	r0, #0
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8000ada:	2a01      	cmp	r2, #1
 8000adc:	d101      	bne.n	8000ae2 <MCI_GetLastRampFinalSpeed+0xe>
  {
    hRetVal = pHandle->hFinalSpeed;
 8000ade:	200e      	movs	r0, #14
 8000ae0:	5e18      	ldrsh	r0, [r3, r0]
  }
  return hRetVal;
}
 8000ae2:	4770      	bx	lr

08000ae4 <MCI_StopRamp>:
/**
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
 8000ae4:	b510      	push	{r4, lr}
   STC_StopRamp( pHandle->pSTC );
 8000ae6:	6840      	ldr	r0, [r0, #4]
 8000ae8:	f004 fdeb 	bl	80056c2 <STC_StopRamp>
}
 8000aec:	bd10      	pop	{r4, pc}

08000aee <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8000aee:	b510      	push	{r4, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8000af0:	6840      	ldr	r0, [r0, #4]
 8000af2:	f004 fd89 	bl	8005608 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8000af6:	f004 fd36 	bl	8005566 <SPD_GetAvrgMecSpeedUnit>
}
 8000afa:	bd10      	pop	{r4, pc}

08000afc <MCI_GetMecSpeedRefUnit>:
  *
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
 8000afc:	b510      	push	{r4, lr}
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8000afe:	6840      	ldr	r0, [r0, #4]
 8000b00:	f004 fd8d 	bl	800561e <STC_GetMecSpeedRefUnit>
}
 8000b04:	bd10      	pop	{r4, pc}

08000b06 <MCI_GetIab>:
  * @brief  It returns stator current Iab in ab_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
 8000b06:	b507      	push	{r0, r1, r2, lr}
  return ( pHandle->pFOCVars->Iab );
 8000b08:	2204      	movs	r2, #4
 8000b0a:	6881      	ldr	r1, [r0, #8]
 8000b0c:	a801      	add	r0, sp, #4
 8000b0e:	f005 f81b 	bl	8005b48 <memcpy>
 8000b12:	466b      	mov	r3, sp
 8000b14:	466a      	mov	r2, sp
 8000b16:	88db      	ldrh	r3, [r3, #6]
 8000b18:	8890      	ldrh	r0, [r2, #4]
 8000b1a:	041b      	lsls	r3, r3, #16
 8000b1c:	4318      	orrs	r0, r3
}
 8000b1e:	bd0e      	pop	{r1, r2, r3, pc}

08000b20 <MCI_GetIalphabeta>:
  * @brief  It returns stator current Ialphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
 8000b20:	b507      	push	{r0, r1, r2, lr}
  return ( pHandle->pFOCVars->Ialphabeta );
 8000b22:	6881      	ldr	r1, [r0, #8]
 8000b24:	2204      	movs	r2, #4
 8000b26:	3104      	adds	r1, #4
 8000b28:	a801      	add	r0, sp, #4
 8000b2a:	f005 f80d 	bl	8005b48 <memcpy>
 8000b2e:	466b      	mov	r3, sp
 8000b30:	466a      	mov	r2, sp
 8000b32:	88db      	ldrh	r3, [r3, #6]
 8000b34:	8890      	ldrh	r0, [r2, #4]
 8000b36:	041b      	lsls	r3, r3, #16
 8000b38:	4318      	orrs	r0, r3
}
 8000b3a:	bd0e      	pop	{r1, r2, r3, pc}

08000b3c <MCI_GetIqd>:
  * @brief  It returns stator current Iqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
 8000b3c:	b507      	push	{r0, r1, r2, lr}
  return ( pHandle->pFOCVars->Iqd );
 8000b3e:	6881      	ldr	r1, [r0, #8]
 8000b40:	2204      	movs	r2, #4
 8000b42:	310c      	adds	r1, #12
 8000b44:	a801      	add	r0, sp, #4
 8000b46:	f004 ffff 	bl	8005b48 <memcpy>
 8000b4a:	466b      	mov	r3, sp
 8000b4c:	466a      	mov	r2, sp
 8000b4e:	88db      	ldrh	r3, [r3, #6]
 8000b50:	8890      	ldrh	r0, [r2, #4]
 8000b52:	041b      	lsls	r3, r3, #16
 8000b54:	4318      	orrs	r0, r3
}
 8000b56:	bd0e      	pop	{r1, r2, r3, pc}

08000b58 <MCI_GetIqdref>:
  * @brief  It returns stator current Iqdref in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
 8000b58:	b507      	push	{r0, r1, r2, lr}
  return ( pHandle->pFOCVars->Iqdref );
 8000b5a:	6881      	ldr	r1, [r0, #8]
 8000b5c:	2204      	movs	r2, #4
 8000b5e:	3110      	adds	r1, #16
 8000b60:	a801      	add	r0, sp, #4
 8000b62:	f004 fff1 	bl	8005b48 <memcpy>
 8000b66:	466b      	mov	r3, sp
 8000b68:	466a      	mov	r2, sp
 8000b6a:	88db      	ldrh	r3, [r3, #6]
 8000b6c:	8890      	ldrh	r0, [r2, #4]
 8000b6e:	041b      	lsls	r3, r3, #16
 8000b70:	4318      	orrs	r0, r3
}
 8000b72:	bd0e      	pop	{r1, r2, r3, pc}

08000b74 <MCI_GetVqd>:
  * @brief  It returns stator current Vqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
 8000b74:	b507      	push	{r0, r1, r2, lr}
  return ( pHandle->pFOCVars->Vqd );
 8000b76:	6881      	ldr	r1, [r0, #8]
 8000b78:	2204      	movs	r2, #4
 8000b7a:	3116      	adds	r1, #22
 8000b7c:	a801      	add	r0, sp, #4
 8000b7e:	f004 ffe3 	bl	8005b48 <memcpy>
 8000b82:	466b      	mov	r3, sp
 8000b84:	466a      	mov	r2, sp
 8000b86:	88db      	ldrh	r3, [r3, #6]
 8000b88:	8890      	ldrh	r0, [r2, #4]
 8000b8a:	041b      	lsls	r3, r3, #16
 8000b8c:	4318      	orrs	r0, r3
}
 8000b8e:	bd0e      	pop	{r1, r2, r3, pc}

08000b90 <MCI_GetValphabeta>:
  * @brief  It returns stator current Valphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
 8000b90:	b507      	push	{r0, r1, r2, lr}
  return ( pHandle->pFOCVars->Valphabeta );
 8000b92:	6881      	ldr	r1, [r0, #8]
 8000b94:	2204      	movs	r2, #4
 8000b96:	311a      	adds	r1, #26
 8000b98:	a801      	add	r0, sp, #4
 8000b9a:	f004 ffd5 	bl	8005b48 <memcpy>
 8000b9e:	466b      	mov	r3, sp
 8000ba0:	466a      	mov	r2, sp
 8000ba2:	88db      	ldrh	r3, [r3, #6]
 8000ba4:	8890      	ldrh	r0, [r2, #4]
 8000ba6:	041b      	lsls	r3, r3, #16
 8000ba8:	4318      	orrs	r0, r3
}
 8000baa:	bd0e      	pop	{r1, r2, r3, pc}

08000bac <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8000bac:	6883      	ldr	r3, [r0, #8]
 8000bae:	201e      	movs	r0, #30
 8000bb0:	5e18      	ldrsh	r0, [r3, r0]
}
 8000bb2:	4770      	bx	lr

08000bb4 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8000bb4:	6883      	ldr	r3, [r0, #8]
 8000bb6:	8259      	strh	r1, [r3, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
 8000bb8:	8299      	strh	r1, [r3, #20]
}
 8000bba:	4770      	bx	lr

08000bbc <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8000bbc:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8000bbe:	6884      	ldr	r4, [r0, #8]
 8000bc0:	6840      	ldr	r0, [r0, #4]
 8000bc2:	f004 fdb5 	bl	8005730 <STC_GetDefaultIqdref>
 8000bc6:	8220      	strh	r0, [r4, #16]
 8000bc8:	0c00      	lsrs	r0, r0, #16
 8000bca:	8260      	strh	r0, [r4, #18]
}
 8000bcc:	bd10      	pop	{r4, pc}
	...

08000bd0 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000bd0:	4a10      	ldr	r2, [pc, #64]	; (8000c14 <MCM_Clarke+0x44>)
 8000bd2:	b201      	sxth	r1, r0
 8000bd4:	1400      	asrs	r0, r0, #16
 8000bd6:	4350      	muls	r0, r2
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8000bd8:	434a      	muls	r2, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000bda:	4253      	negs	r3, r2
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8000bdc:	2280      	movs	r2, #128	; 0x80
  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000bde:	1a1b      	subs	r3, r3, r0
 8000be0:	1a1b      	subs	r3, r3, r0
{
 8000be2:	b084      	sub	sp, #16
  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000be4:	13db      	asrs	r3, r3, #15
  if ( wbeta_tmp > INT16_MAX )
 8000be6:	0212      	lsls	r2, r2, #8
 8000be8:	4293      	cmp	r3, r2
 8000bea:	da10      	bge.n	8000c0e <MCM_Clarke+0x3e>
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8000bec:	480a      	ldr	r0, [pc, #40]	; (8000c18 <MCM_Clarke+0x48>)
  {
    hbeta_tmp = ( -32768 );
 8000bee:	0002      	movs	r2, r0
  else if ( wbeta_tmp < ( -32768 ) )
 8000bf0:	4283      	cmp	r3, r0
 8000bf2:	db00      	blt.n	8000bf6 <MCM_Clarke+0x26>
  }
  else
  {
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8000bf4:	b21a      	sxth	r2, r3
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 8000bf6:	ab03      	add	r3, sp, #12
 8000bf8:	8019      	strh	r1, [r3, #0]
 8000bfa:	4908      	ldr	r1, [pc, #32]	; (8000c1c <MCM_Clarke+0x4c>)
 8000bfc:	1c10      	adds	r0, r2, #0
 8000bfe:	428a      	cmp	r2, r1
 8000c00:	da00      	bge.n	8000c04 <MCM_Clarke+0x34>
 8000c02:	1c08      	adds	r0, r1, #0
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	0400      	lsls	r0, r0, #16
 8000c08:	4318      	orrs	r0, r3
}
 8000c0a:	b004      	add	sp, #16
 8000c0c:	4770      	bx	lr
    hbeta_tmp = INT16_MAX;
 8000c0e:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <MCM_Clarke+0x50>)
 8000c10:	e7f1      	b.n	8000bf6 <MCM_Clarke+0x26>
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	000049e6 	.word	0x000049e6
 8000c18:	ffff8000 	.word	0xffff8000
 8000c1c:	ffff8001 	.word	0xffff8001
 8000c20:	00007fff 	.word	0x00007fff

08000c24 <MCM_Trig_Functions>:
  * @param  hAngle: angle in q1.15 format
  * @retval Sin(angle) and Cos(angle) in Trig_Components format
  */

__weak Trig_Components MCM_Trig_Functions( int16_t hAngle )
{
 8000c24:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 8000c26:	2180      	movs	r1, #128	; 0x80
 8000c28:	0209      	lsls	r1, r1, #8
 8000c2a:	1840      	adds	r0, r0, r1
  uhindex = ( uint16_t )shindex;
 8000c2c:	b280      	uxth	r0, r0
  uhindex /= ( uint16_t )64;
 8000c2e:	24c0      	movs	r4, #192	; 0xc0
 8000c30:	0980      	lsrs	r0, r0, #6
{
 8000c32:	2200      	movs	r2, #0
 8000c34:	0001      	movs	r1, r0

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000c36:	2580      	movs	r5, #128	; 0x80
 8000c38:	00a4      	lsls	r4, r4, #2
{
 8000c3a:	0013      	movs	r3, r2
 8000c3c:	4021      	ands	r1, r4
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000c3e:	00ad      	lsls	r5, r5, #2
 8000c40:	42a9      	cmp	r1, r5
 8000c42:	d017      	beq.n	8000c74 <MCM_Trig_Functions+0x50>
 8000c44:	d809      	bhi.n	8000c5a <MCM_Trig_Functions+0x36>
 8000c46:	4291      	cmp	r1, r2
 8000c48:	d01d      	beq.n	8000c86 <MCM_Trig_Functions+0x62>
 8000c4a:	2480      	movs	r4, #128	; 0x80
 8000c4c:	0064      	lsls	r4, r4, #1
 8000c4e:	42a1      	cmp	r1, r4
 8000c50:	d022      	beq.n	8000c98 <MCM_Trig_Functions+0x74>
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
      break;
    default:
      break;
  }
  return ( Local_Components );
 8000c52:	041b      	lsls	r3, r3, #16
 8000c54:	b290      	uxth	r0, r2
 8000c56:	4318      	orrs	r0, r3
}
 8000c58:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000c5a:	42a1      	cmp	r1, r4
 8000c5c:	d1f9      	bne.n	8000c52 <MCM_Trig_Functions+0x2e>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c5e:	b2c0      	uxtb	r0, r0
 8000c60:	43c3      	mvns	r3, r0
 8000c62:	4a12      	ldr	r2, [pc, #72]	; (8000cac <MCM_Trig_Functions+0x88>)
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	5e9b      	ldrsh	r3, [r3, r2]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c6a:	0040      	lsls	r0, r0, #1
 8000c6c:	5a82      	ldrh	r2, [r0, r2]
 8000c6e:	4252      	negs	r2, r2
 8000c70:	b212      	sxth	r2, r2
      break;
 8000c72:	e7ee      	b.n	8000c52 <MCM_Trig_Functions+0x2e>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c74:	b2c0      	uxtb	r0, r0
 8000c76:	0043      	lsls	r3, r0, #1
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c78:	43c0      	mvns	r0, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c7a:	4a0c      	ldr	r2, [pc, #48]	; (8000cac <MCM_Trig_Functions+0x88>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c7c:	b2c0      	uxtb	r0, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c7e:	5e9b      	ldrsh	r3, [r3, r2]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	5e82      	ldrsh	r2, [r0, r2]
      break;
 8000c84:	e7e5      	b.n	8000c52 <MCM_Trig_Functions+0x2e>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c86:	b2c0      	uxtb	r0, r0
 8000c88:	0043      	lsls	r3, r0, #1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c8a:	43c0      	mvns	r0, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c8c:	4a07      	ldr	r2, [pc, #28]	; (8000cac <MCM_Trig_Functions+0x88>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c8e:	b2c0      	uxtb	r0, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c90:	5a9b      	ldrh	r3, [r3, r2]
 8000c92:	425b      	negs	r3, r3
 8000c94:	b21b      	sxth	r3, r3
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c96:	e7e8      	b.n	8000c6a <MCM_Trig_Functions+0x46>
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c98:	b2c0      	uxtb	r0, r0
 8000c9a:	43c3      	mvns	r3, r0
 8000c9c:	4a03      	ldr	r2, [pc, #12]	; (8000cac <MCM_Trig_Functions+0x88>)
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	5a9b      	ldrh	r3, [r3, r2]
 8000ca4:	425b      	negs	r3, r3
 8000ca6:	b21b      	sxth	r3, r3
 8000ca8:	e7ea      	b.n	8000c80 <MCM_Trig_Functions+0x5c>
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	08006454 	.word	0x08006454

08000cb0 <MCM_Park>:
{
 8000cb0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8000cb2:	b205      	sxth	r5, r0
 8000cb4:	9001      	str	r0, [sp, #4]
 8000cb6:	1404      	asrs	r4, r0, #16
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000cb8:	0008      	movs	r0, r1
 8000cba:	f7ff ffb3 	bl	8000c24 <MCM_Trig_Functions>
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000cbe:	b202      	sxth	r2, r0
  q_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hSin;
 8000cc0:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000cc2:	0013      	movs	r3, r2
  q_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hSin;
 8000cc4:	0001      	movs	r1, r0
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000cc6:	436b      	muls	r3, r5
  q_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hSin;
 8000cc8:	4361      	muls	r1, r4
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8000cca:	1a5b      	subs	r3, r3, r1
  if ( wqd_tmp > INT16_MAX )
 8000ccc:	2180      	movs	r1, #128	; 0x80
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8000cce:	13db      	asrs	r3, r3, #15
  if ( wqd_tmp > INT16_MAX )
 8000cd0:	0209      	lsls	r1, r1, #8
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	da23      	bge.n	8000d1e <MCM_Park+0x6e>
  else if ( wqd_tmp < ( -32768 ) )
 8000cd6:	4914      	ldr	r1, [pc, #80]	; (8000d28 <MCM_Park+0x78>)
    hqd_tmp = ( -32768 );
 8000cd8:	000e      	movs	r6, r1
  else if ( wqd_tmp < ( -32768 ) )
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	db00      	blt.n	8000ce0 <MCM_Park+0x30>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000cde:	b21e      	sxth	r6, r3
  if ( Output.q == ( int16_t )( -32768 ) )
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <MCM_Park+0x7c>)
 8000ce2:	1c31      	adds	r1, r6, #0
 8000ce4:	429e      	cmp	r6, r3
 8000ce6:	da00      	bge.n	8000cea <MCM_Park+0x3a>
 8000ce8:	1c19      	adds	r1, r3, #0
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8000cea:	4362      	muls	r2, r4
  d_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hSin;
 8000cec:	4368      	muls	r0, r5
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000cee:	1880      	adds	r0, r0, r2
  if ( wqd_tmp > INT16_MAX )
 8000cf0:	2280      	movs	r2, #128	; 0x80
 8000cf2:	b209      	sxth	r1, r1
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000cf4:	13c0      	asrs	r0, r0, #15
  if ( wqd_tmp > INT16_MAX )
 8000cf6:	0212      	lsls	r2, r2, #8
 8000cf8:	4290      	cmp	r0, r2
 8000cfa:	da12      	bge.n	8000d22 <MCM_Park+0x72>
  else if ( wqd_tmp < ( -32768 ) )
 8000cfc:	4c0a      	ldr	r4, [pc, #40]	; (8000d28 <MCM_Park+0x78>)
    hqd_tmp = ( -32768 );
 8000cfe:	0022      	movs	r2, r4
  else if ( wqd_tmp < ( -32768 ) )
 8000d00:	42a0      	cmp	r0, r4
 8000d02:	db00      	blt.n	8000d06 <MCM_Park+0x56>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000d04:	b202      	sxth	r2, r0
  return ( Output );
 8000d06:	ac03      	add	r4, sp, #12
 8000d08:	8021      	strh	r1, [r4, #0]
 8000d0a:	1c10      	adds	r0, r2, #0
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	da01      	bge.n	8000d14 <MCM_Park+0x64>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <MCM_Park+0x80>)
 8000d12:	8818      	ldrh	r0, [r3, #0]
 8000d14:	8823      	ldrh	r3, [r4, #0]
 8000d16:	0400      	lsls	r0, r0, #16
 8000d18:	4318      	orrs	r0, r3
}
 8000d1a:	b004      	add	sp, #16
 8000d1c:	bd70      	pop	{r4, r5, r6, pc}
    hqd_tmp = INT16_MAX;
 8000d1e:	4e05      	ldr	r6, [pc, #20]	; (8000d34 <MCM_Park+0x84>)
 8000d20:	e7de      	b.n	8000ce0 <MCM_Park+0x30>
    hqd_tmp = INT16_MAX;
 8000d22:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <MCM_Park+0x84>)
 8000d24:	e7ef      	b.n	8000d06 <MCM_Park+0x56>
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	ffff8000 	.word	0xffff8000
 8000d2c:	ffff8001 	.word	0xffff8001
 8000d30:	08006452 	.word	0x08006452
 8000d34:	00007fff 	.word	0x00007fff

08000d38 <MCM_Rev_Park>:
{
 8000d38:	b530      	push	{r4, r5, lr}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	b205      	sxth	r5, r0
 8000d3e:	9001      	str	r0, [sp, #4]
 8000d40:	1404      	asrs	r4, r0, #16
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000d42:	0008      	movs	r0, r1
 8000d44:	f7ff ff6e 	bl	8000c24 <MCM_Trig_Functions>
  alpha_tmp1 = Input.q * ( int32_t )Local_Vector_Components.hCos;
 8000d48:	b202      	sxth	r2, r0
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8000d4a:	1400      	asrs	r0, r0, #16
  alpha_tmp1 = Input.q * ( int32_t )Local_Vector_Components.hCos;
 8000d4c:	0013      	movs	r3, r2
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8000d4e:	0001      	movs	r1, r0
  alpha_tmp1 = Input.q * ( int32_t )Local_Vector_Components.hCos;
 8000d50:	436b      	muls	r3, r5
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8000d52:	4361      	muls	r1, r4
  beta_tmp1 = Input.q * ( int32_t )Local_Vector_Components.hSin;
 8000d54:	4368      	muls	r0, r5
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8000d56:	4354      	muls	r4, r2
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8000d58:	185b      	adds	r3, r3, r1
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8000d5a:	1a20      	subs	r0, r4, r0
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8000d5c:	13db      	asrs	r3, r3, #15
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8000d5e:	13c0      	asrs	r0, r0, #15
  return ( Output );
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	0400      	lsls	r0, r0, #16
 8000d64:	4318      	orrs	r0, r3
}
 8000d66:	b005      	add	sp, #20
 8000d68:	bd30      	pop	{r4, r5, pc}

08000d6a <LL_GPIO_LockPin>:
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8000d6a:	2380      	movs	r3, #128	; 0x80
 8000d6c:	025b      	lsls	r3, r3, #9
 8000d6e:	430b      	orrs	r3, r1
 8000d70:	61c3      	str	r3, [r0, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8000d72:	61c1      	str	r1, [r0, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8000d74:	61c3      	str	r3, [r0, #28]
  temp = READ_REG(GPIOx->LCKR);
 8000d76:	69c3      	ldr	r3, [r0, #28]
{
 8000d78:	b082      	sub	sp, #8
  temp = READ_REG(GPIOx->LCKR);
 8000d7a:	9301      	str	r3, [sp, #4]
  (void) temp;
 8000d7c:	9b01      	ldr	r3, [sp, #4]
}
 8000d7e:	b002      	add	sp, #8
 8000d80:	4770      	bx	lr
	...

08000d84 <FOC_Clear>:
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 8000d84:	2226      	movs	r2, #38	; 0x26
{
 8000d86:	b570      	push	{r4, r5, r6, lr}
  FOCVars[bMotor].Iab = NULL_ab;
 8000d88:	2400      	movs	r4, #0
 8000d8a:	4342      	muls	r2, r0
 8000d8c:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <FOC_Clear+0x50>)
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000d8e:	0085      	lsls	r5, r0, #2
  FOCVars[bMotor].Iab = NULL_ab;
 8000d90:	52d4      	strh	r4, [r2, r3]
 8000d92:	189b      	adds	r3, r3, r2
 8000d94:	805c      	strh	r4, [r3, #2]
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8000d96:	809c      	strh	r4, [r3, #4]
 8000d98:	80dc      	strh	r4, [r3, #6]
  FOCVars[bMotor].Iqd = NULL_qd;
 8000d9a:	819c      	strh	r4, [r3, #12]
 8000d9c:	81dc      	strh	r4, [r3, #14]
  FOCVars[bMotor].Iqdref = NULL_qd;
 8000d9e:	821c      	strh	r4, [r3, #16]
 8000da0:	825c      	strh	r4, [r3, #18]
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000da2:	83dc      	strh	r4, [r3, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 8000da4:	82dc      	strh	r4, [r3, #22]
 8000da6:	831c      	strh	r4, [r3, #24]
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
 8000da8:	835c      	strh	r4, [r3, #26]
 8000daa:	839c      	strh	r4, [r3, #28]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8000dac:	841c      	strh	r4, [r3, #32]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000dae:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <FOC_Clear+0x54>)
 8000db0:	0021      	movs	r1, r4
 8000db2:	58e8      	ldr	r0, [r5, r3]
 8000db4:	f003 fe2d 	bl	8004a12 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <FOC_Clear+0x58>)
 8000dba:	0021      	movs	r1, r4
 8000dbc:	58e8      	ldr	r0, [r5, r3]
 8000dbe:	f003 fe28 	bl	8004a12 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8000dc2:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <FOC_Clear+0x5c>)
 8000dc4:	58e8      	ldr	r0, [r5, r3]
 8000dc6:	f004 fc21 	bl	800560c <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <FOC_Clear+0x60>)
 8000dcc:	58e8      	ldr	r0, [r5, r3]
 8000dce:	f003 ffb2 	bl	8004d36 <PWMC_SwitchOffPWM>

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8000dd2:	bd70      	pop	{r4, r5, r6, pc}
 8000dd4:	2000089c 	.word	0x2000089c
 8000dd8:	20000958 	.word	0x20000958
 8000ddc:	20000954 	.word	0x20000954
 8000de0:	20000964 	.word	0x20000964
 8000de4:	2000096c 	.word	0x2000096c

08000de8 <MCboot>:
{
 8000de8:	b5f0      	push	{r4, r5, r6, r7, lr}
  bMCBootCompleted = 0;
 8000dea:	2400      	movs	r4, #0
{
 8000dec:	b087      	sub	sp, #28
 8000dee:	9002      	str	r0, [sp, #8]
  STM_Init(&STM[M1]);
 8000df0:	484d      	ldr	r0, [pc, #308]	; (8000f28 <MCboot+0x140>)
{
 8000df2:	9103      	str	r1, [sp, #12]
  STM_Init(&STM[M1]);
 8000df4:	f004 fcac 	bl	8005750 <STM_Init>
  bMCBootCompleted = 0;
 8000df8:	4b4c      	ldr	r3, [pc, #304]	; (8000f2c <MCboot+0x144>)
  pCLM[M1] = &CircleLimitationM1;
 8000dfa:	4a4d      	ldr	r2, [pc, #308]	; (8000f30 <MCboot+0x148>)
  bMCBootCompleted = 0;
 8000dfc:	701c      	strb	r4, [r3, #0]
  pCLM[M1] = &CircleLimitationM1;
 8000dfe:	4b4d      	ldr	r3, [pc, #308]	; (8000f34 <MCboot+0x14c>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000e00:	484d      	ldr	r0, [pc, #308]	; (8000f38 <MCboot+0x150>)
  pCLM[M1] = &CircleLimitationM1;
 8000e02:	601a      	str	r2, [r3, #0]
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000e04:	4b4d      	ldr	r3, [pc, #308]	; (8000f3c <MCboot+0x154>)
 8000e06:	6018      	str	r0, [r3, #0]
  R3_1_Init(&PWM_Handle_M1);
 8000e08:	f004 f88e 	bl	8004f28 <R3_1_Init>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8000e0c:	4d4c      	ldr	r5, [pc, #304]	; (8000f40 <MCboot+0x158>)
 8000e0e:	0028      	movs	r0, r5
 8000e10:	f003 fded 	bl	80049ee <PID_HandleInit>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000e14:	4b4b      	ldr	r3, [pc, #300]	; (8000f44 <MCboot+0x15c>)
  HALL_Init (&HALL_M1);
 8000e16:	484c      	ldr	r0, [pc, #304]	; (8000f48 <MCboot+0x160>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000e18:	601d      	str	r5, [r3, #0]
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000e1a:	4d4c      	ldr	r5, [pc, #304]	; (8000f4c <MCboot+0x164>)
 8000e1c:	4b4c      	ldr	r3, [pc, #304]	; (8000f50 <MCboot+0x168>)
 8000e1e:	602b      	str	r3, [r5, #0]
  HALL_Init (&HALL_M1);
 8000e20:	f003 fa4c 	bl	80042bc <HALL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 8000e24:	4b47      	ldr	r3, [pc, #284]	; (8000f44 <MCboot+0x15c>)
 8000e26:	4a48      	ldr	r2, [pc, #288]	; (8000f48 <MCboot+0x160>)
 8000e28:	6819      	ldr	r1, [r3, #0]
 8000e2a:	6828      	ldr	r0, [r5, #0]
 8000e2c:	f004 fbd9 	bl	80055e2 <STC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 8000e30:	4f48      	ldr	r7, [pc, #288]	; (8000f54 <MCboot+0x16c>)
 8000e32:	0038      	movs	r0, r7
 8000e34:	f003 fddb 	bl	80049ee <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8000e38:	4e47      	ldr	r6, [pc, #284]	; (8000f58 <MCboot+0x170>)
 8000e3a:	0030      	movs	r0, r6
 8000e3c:	f003 fdd7 	bl	80049ee <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000e40:	4b46      	ldr	r3, [pc, #280]	; (8000f5c <MCboot+0x174>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000e42:	4847      	ldr	r0, [pc, #284]	; (8000f60 <MCboot+0x178>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000e44:	601f      	str	r7, [r3, #0]
  pPIDId[M1] = &PIDIdHandle_M1;
 8000e46:	4b47      	ldr	r3, [pc, #284]	; (8000f64 <MCboot+0x17c>)
 8000e48:	601e      	str	r6, [r3, #0]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000e4a:	4e47      	ldr	r6, [pc, #284]	; (8000f68 <MCboot+0x180>)
 8000e4c:	6030      	str	r0, [r6, #0]
  RVBS_Init(pBusSensorM1);
 8000e4e:	f004 fb32 	bl	80054b6 <RVBS_Init>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000e52:	4b46      	ldr	r3, [pc, #280]	; (8000f6c <MCboot+0x184>)
 8000e54:	4a46      	ldr	r2, [pc, #280]	; (8000f70 <MCboot+0x188>)
  NTC_Init(&TempSensorParamsM1);
 8000e56:	4f47      	ldr	r7, [pc, #284]	; (8000f74 <MCboot+0x18c>)
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000e58:	6013      	str	r3, [r2, #0]
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8000e5a:	6832      	ldr	r2, [r6, #0]
 8000e5c:	33fc      	adds	r3, #252	; 0xfc
 8000e5e:	615a      	str	r2, [r3, #20]
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000e60:	4a45      	ldr	r2, [pc, #276]	; (8000f78 <MCboot+0x190>)
  NTC_Init(&TempSensorParamsM1);
 8000e62:	0038      	movs	r0, r7
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000e64:	611a      	str	r2, [r3, #16]
  NTC_Init(&TempSensorParamsM1);
 8000e66:	f003 fd7b 	bl	8004960 <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000e6a:	4b44      	ldr	r3, [pc, #272]	; (8000f7c <MCboot+0x194>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000e6c:	4844      	ldr	r0, [pc, #272]	; (8000f80 <MCboot+0x198>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000e6e:	601f      	str	r7, [r3, #0]
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000e70:	4b44      	ldr	r3, [pc, #272]	; (8000f84 <MCboot+0x19c>)
 8000e72:	6018      	str	r0, [r3, #0]
  REMNG_Init(pREMNG[M1]);
 8000e74:	f004 fb68 	bl	8005548 <REMNG_Init>
  FOC_Clear(M1);
 8000e78:	0020      	movs	r0, r4
 8000e7a:	f7ff ff83 	bl	8000d84 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000e7e:	2201      	movs	r2, #1
 8000e80:	4b3d      	ldr	r3, [pc, #244]	; (8000f78 <MCboot+0x190>)
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8000e82:	6828      	ldr	r0, [r5, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000e84:	3305      	adds	r3, #5
 8000e86:	77da      	strb	r2, [r3, #31]
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8000e88:	f004 fc52 	bl	8005730 <STC_GetDefaultIqdref>
 8000e8c:	4b3a      	ldr	r3, [pc, #232]	; (8000f78 <MCboot+0x190>)
 8000e8e:	8218      	strh	r0, [r3, #16]
 8000e90:	0c00      	lsrs	r0, r0, #16
 8000e92:	8258      	strh	r0, [r3, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000e94:	6828      	ldr	r0, [r5, #0]
 8000e96:	f004 fc4b 	bl	8005730 <STC_GetDefaultIqdref>
 8000e9a:	4b37      	ldr	r3, [pc, #220]	; (8000f78 <MCboot+0x190>)
 8000e9c:	0c00      	lsrs	r0, r0, #16
  oMCInterface[M1] = & Mci[M1];
 8000e9e:	4f3a      	ldr	r7, [pc, #232]	; (8000f88 <MCboot+0x1a0>)
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000ea0:	8298      	strh	r0, [r3, #20]
  oMCInterface[M1] = & Mci[M1];
 8000ea2:	483a      	ldr	r0, [pc, #232]	; (8000f8c <MCboot+0x1a4>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000ea4:	682a      	ldr	r2, [r5, #0]
 8000ea6:	4920      	ldr	r1, [pc, #128]	; (8000f28 <MCboot+0x140>)
  oMCInterface[M1] = & Mci[M1];
 8000ea8:	6038      	str	r0, [r7, #0]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000eaa:	f7ff fd97 	bl	80009dc <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	6828      	ldr	r0, [r5, #0]
 8000eb2:	9301      	str	r3, [sp, #4]
 8000eb4:	f004 fc34 	bl	8005720 <STC_GetMecSpeedRefUnitDefault>
 8000eb8:	0022      	movs	r2, r4
 8000eba:	0001      	movs	r1, r0
 8000ebc:	9801      	ldr	r0, [sp, #4]
 8000ebe:	f7ff fd97 	bl	80009f0 <MCI_ExecSpeedRamp>
  pMCIList[M1] = oMCInterface[M1];
 8000ec2:	683b      	ldr	r3, [r7, #0]
  bMCBootCompleted = 1;
 8000ec4:	2201      	movs	r2, #1
  pMCIList[M1] = oMCInterface[M1];
 8000ec6:	9301      	str	r3, [sp, #4]
 8000ec8:	9901      	ldr	r1, [sp, #4]
 8000eca:	9b02      	ldr	r3, [sp, #8]
 8000ecc:	6019      	str	r1, [r3, #0]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000ece:	491d      	ldr	r1, [pc, #116]	; (8000f44 <MCboot+0x15c>)
 8000ed0:	4b2f      	ldr	r3, [pc, #188]	; (8000f90 <MCboot+0x1a8>)
 8000ed2:	6809      	ldr	r1, [r1, #0]
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 8000ed4:	60dc      	str	r4, [r3, #12]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000ed6:	6019      	str	r1, [r3, #0]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000ed8:	4920      	ldr	r1, [pc, #128]	; (8000f5c <MCboot+0x174>)
  MCT[M1].pRevupCtrl = MC_NULL;              /* only if M1 is not sensorless*/
 8000eda:	615c      	str	r4, [r3, #20]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000edc:	6809      	ldr	r1, [r1, #0]
  MCT[M1].pSpeedSensorAux = MC_NULL;
 8000ede:	61dc      	str	r4, [r3, #28]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000ee0:	6059      	str	r1, [r3, #4]
  MCT[M1].pPIDId = pPIDId[M1];
 8000ee2:	4920      	ldr	r1, [pc, #128]	; (8000f64 <MCboot+0x17c>)
  MCT[M1].pSpeedSensorVirtual = MC_NULL;
 8000ee4:	621c      	str	r4, [r3, #32]
  MCT[M1].pPIDId = pPIDId[M1];
 8000ee6:	6809      	ldr	r1, [r1, #0]
 8000ee8:	6099      	str	r1, [r3, #8]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000eea:	4914      	ldr	r1, [pc, #80]	; (8000f3c <MCboot+0x154>)
 8000eec:	6809      	ldr	r1, [r1, #0]
 8000eee:	6119      	str	r1, [r3, #16]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &HALL_M1;
 8000ef0:	4915      	ldr	r1, [pc, #84]	; (8000f48 <MCboot+0x160>)
 8000ef2:	6199      	str	r1, [r3, #24]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8000ef4:	6829      	ldr	r1, [r5, #0]
 8000ef6:	6259      	str	r1, [r3, #36]	; 0x24
  MCT[M1].pStateMachine = &STM[M1];
 8000ef8:	490b      	ldr	r1, [pc, #44]	; (8000f28 <MCboot+0x140>)
 8000efa:	6299      	str	r1, [r3, #40]	; 0x28
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8000efc:	491f      	ldr	r1, [pc, #124]	; (8000f7c <MCboot+0x194>)
 8000efe:	6809      	ldr	r1, [r1, #0]
 8000f00:	62d9      	str	r1, [r3, #44]	; 0x2c
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8000f02:	6831      	ldr	r1, [r6, #0]
 8000f04:	6319      	str	r1, [r3, #48]	; 0x30
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000f06:	491a      	ldr	r1, [pc, #104]	; (8000f70 <MCboot+0x188>)
  MCT[M1].pBrakeDigitalOutput = MC_NULL;   /* brake is defined, oBrakeM1*/
 8000f08:	635c      	str	r4, [r3, #52]	; 0x34
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000f0a:	6809      	ldr	r1, [r1, #0]
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 8000f0c:	639c      	str	r4, [r3, #56]	; 0x38
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000f0e:	63d9      	str	r1, [r3, #60]	; 0x3c
  pMCTList[M1] = &MCT[M1];
 8000f10:	9903      	ldr	r1, [sp, #12]
  MCT[M1].pFW = MC_NULL;
 8000f12:	641c      	str	r4, [r3, #64]	; 0x40
  MCT[M1].pFF = MC_NULL;
 8000f14:	645c      	str	r4, [r3, #68]	; 0x44
  MCT[M1].pPosCtrl = MC_NULL;
 8000f16:	649c      	str	r4, [r3, #72]	; 0x48
  MCT[M1].pSCC = MC_NULL;
 8000f18:	64dc      	str	r4, [r3, #76]	; 0x4c
  MCT[M1].pOTT = MC_NULL;
 8000f1a:	651c      	str	r4, [r3, #80]	; 0x50
  pMCTList[M1] = &MCT[M1];
 8000f1c:	600b      	str	r3, [r1, #0]
  bMCBootCompleted = 1;
 8000f1e:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <MCboot+0x144>)
 8000f20:	701a      	strb	r2, [r3, #0]
}
 8000f22:	b007      	add	sp, #28
 8000f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	20000934 	.word	0x20000934
 8000f2c:	2000093a 	.word	0x2000093a
 8000f30:	20000000 	.word	0x20000000
 8000f34:	2000094c 	.word	0x2000094c
 8000f38:	20000350 	.word	0x20000350
 8000f3c:	2000096c 	.word	0x2000096c
 8000f40:	20000210 	.word	0x20000210
 8000f44:	2000095c 	.word	0x2000095c
 8000f48:	200000f0 	.word	0x200000f0
 8000f4c:	20000964 	.word	0x20000964
 8000f50:	2000044c 	.word	0x2000044c
 8000f54:	200001e4 	.word	0x200001e4
 8000f58:	200001b8 	.word	0x200001b8
 8000f5c:	20000958 	.word	0x20000958
 8000f60:	20000424 	.word	0x20000424
 8000f64:	20000954 	.word	0x20000954
 8000f68:	20000948 	.word	0x20000948
 8000f6c:	2000023c 	.word	0x2000023c
 8000f70:	20000950 	.word	0x20000950
 8000f74:	20000480 	.word	0x20000480
 8000f78:	2000089c 	.word	0x2000089c
 8000f7c:	20000968 	.word	0x20000968
 8000f80:	200003cc 	.word	0x200003cc
 8000f84:	20000960 	.word	0x20000960
 8000f88:	20000944 	.word	0x20000944
 8000f8c:	20000918 	.word	0x20000918
 8000f90:	200008c4 	.word	0x200008c4

08000f94 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8000f94:	4770      	bx	lr
	...

08000f98 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8000f98:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8000f9a:	2426      	movs	r4, #38	; 0x26
 8000f9c:	4344      	muls	r4, r0
 8000f9e:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <FOC_CalcCurrRef+0x24>)
 8000fa0:	191c      	adds	r4, r3, r4
 8000fa2:	1d63      	adds	r3, r4, #5
 8000fa4:	7fdb      	ldrb	r3, [r3, #31]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d106      	bne.n	8000fb8 <FOC_CalcCurrRef+0x20>
  {
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <FOC_CalcCurrRef+0x28>)
 8000fac:	0080      	lsls	r0, r0, #2
 8000fae:	58c0      	ldr	r0, [r0, r3]
 8000fb0:	f004 fb8b 	bl	80056ca <STC_CalcTorqueReference>
 8000fb4:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8000fb6:	8220      	strh	r0, [r4, #16]

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8000fb8:	bd10      	pop	{r4, pc}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	2000089c 	.word	0x2000089c
 8000fc0:	20000964 	.word	0x20000964

08000fc4 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8000fc4:	4b01      	ldr	r3, [pc, #4]	; (8000fcc <TSK_SetChargeBootCapDelayM1+0x8>)
 8000fc6:	8018      	strh	r0, [r3, #0]
}
 8000fc8:	4770      	bx	lr
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	2000093c 	.word	0x2000093c

08000fd0 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8000fd0:	4b02      	ldr	r3, [pc, #8]	; (8000fdc <TSK_ChargeBootCapDelayHasElapsedM1+0xc>)
 8000fd2:	8818      	ldrh	r0, [r3, #0]
 8000fd4:	4243      	negs	r3, r0
 8000fd6:	4158      	adcs	r0, r3
  {
    retVal = true;
  }
  return (retVal);
 8000fd8:	b2c0      	uxtb	r0, r0
}
 8000fda:	4770      	bx	lr
 8000fdc:	2000093c 	.word	0x2000093c

08000fe0 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8000fe0:	4b01      	ldr	r3, [pc, #4]	; (8000fe8 <TSK_SetStopPermanencyTimeM1+0x8>)
 8000fe2:	8018      	strh	r0, [r3, #0]
}
 8000fe4:	4770      	bx	lr
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	20000940 	.word	0x20000940

08000fec <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8000fec:	4b02      	ldr	r3, [pc, #8]	; (8000ff8 <TSK_StopPermanencyTimeHasElapsedM1+0xc>)
 8000fee:	8818      	ldrh	r0, [r3, #0]
 8000ff0:	4243      	negs	r3, r0
 8000ff2:	4158      	adcs	r0, r3
  {
    retVal = true;
  }
  return (retVal);
 8000ff4:	b2c0      	uxtb	r0, r0
}
 8000ff6:	4770      	bx	lr
 8000ff8:	20000940 	.word	0x20000940

08000ffc <TSK_MediumFrequencyTaskM1>:
{
 8000ffc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  int16_t wAux = 0;
 8000ffe:	466b      	mov	r3, sp
 8001000:	1d99      	adds	r1, r3, #6
 8001002:	2300      	movs	r3, #0
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8001004:	4f43      	ldr	r7, [pc, #268]	; (8001114 <TSK_MediumFrequencyTaskM1+0x118>)
  int16_t wAux = 0;
 8001006:	800b      	strh	r3, [r1, #0]
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8001008:	0038      	movs	r0, r7
 800100a:	f003 fa2b 	bl	8004464 <HALL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 800100e:	4e42      	ldr	r6, [pc, #264]	; (8001118 <TSK_MediumFrequencyTaskM1+0x11c>)
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8001010:	0005      	movs	r5, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 8001012:	6830      	ldr	r0, [r6, #0]
 8001014:	f003 fd46 	bl	8004aa4 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8001018:	4c40      	ldr	r4, [pc, #256]	; (800111c <TSK_MediumFrequencyTaskM1+0x120>)
 800101a:	0020      	movs	r0, r4
 800101c:	f004 fc2c 	bl	8005878 <STM_GetState>
  switch ( StateM1 )
 8001020:	3803      	subs	r0, #3
 8001022:	280f      	cmp	r0, #15
 8001024:	d828      	bhi.n	8001078 <TSK_MediumFrequencyTaskM1+0x7c>
 8001026:	f7ff f879 	bl	800011c <__gnu_thumb1_case_uqi>
 800102a:	3908      	.short	0x3908
 800102c:	6d5d4e3b 	.word	0x6d5d4e3b
 8001030:	27272773 	.word	0x27272773
 8001034:	14272727 	.word	0x14272727
 8001038:	281f      	.short	0x281f
    R3_1_TurnOnLowSides( pwmcHandle[M1] );
 800103a:	4b39      	ldr	r3, [pc, #228]	; (8001120 <TSK_MediumFrequencyTaskM1+0x124>)
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	f004 f849 	bl	80050d4 <R3_1_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8001042:	2014      	movs	r0, #20
 8001044:	f7ff ffbe 	bl	8000fc4 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8001048:	2110      	movs	r1, #16
    STM_NextState( &STM[M1], IDLE );
 800104a:	0020      	movs	r0, r4
 800104c:	f004 fb9c 	bl	8005788 <STM_NextState>
}
 8001050:	e012      	b.n	8001078 <TSK_MediumFrequencyTaskM1+0x7c>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 8001052:	f7ff ffbd 	bl	8000fd0 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001056:	2800      	cmp	r0, #0
 8001058:	d00e      	beq.n	8001078 <TSK_MediumFrequencyTaskM1+0x7c>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 800105a:	4b31      	ldr	r3, [pc, #196]	; (8001120 <TSK_MediumFrequencyTaskM1+0x124>)
 800105c:	2100      	movs	r1, #0
 800105e:	6818      	ldr	r0, [r3, #0]
 8001060:	f003 fe6d 	bl	8004d3e <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 8001064:	2111      	movs	r1, #17
 8001066:	e7f0      	b.n	800104a <TSK_MediumFrequencyTaskM1+0x4e>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 8001068:	4b2d      	ldr	r3, [pc, #180]	; (8001120 <TSK_MediumFrequencyTaskM1+0x124>)
 800106a:	2101      	movs	r1, #1
 800106c:	6818      	ldr	r0, [r3, #0]
 800106e:	f003 fe66 	bl	8004d3e <PWMC_CurrentReadingCalibr>
      STM_NextState( &STM[M1], CLEAR );
 8001072:	2112      	movs	r1, #18
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 8001074:	2800      	cmp	r0, #0
 8001076:	d1e8      	bne.n	800104a <TSK_MediumFrequencyTaskM1+0x4e>
}
 8001078:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    HALL_Clear( &HALL_M1 );
 800107a:	0038      	movs	r0, r7
 800107c:	f003 f9a8 	bl	80043d0 <HALL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 8001080:	2104      	movs	r1, #4
 8001082:	0020      	movs	r0, r4
 8001084:	f004 fb80 	bl	8005788 <STM_NextState>
 8001088:	2800      	cmp	r0, #0
 800108a:	d0f5      	beq.n	8001078 <TSK_MediumFrequencyTaskM1+0x7c>
      FOC_Clear( M1 );
 800108c:	2000      	movs	r0, #0
 800108e:	f7ff fe79 	bl	8000d84 <FOC_Clear>
      R3_1_SwitchOnPWM( pwmcHandle[M1] );
 8001092:	4b23      	ldr	r3, [pc, #140]	; (8001120 <TSK_MediumFrequencyTaskM1+0x124>)
 8001094:	6818      	ldr	r0, [r3, #0]
 8001096:	f004 f843 	bl	8005120 <R3_1_SwitchOnPWM>
 800109a:	e7ed      	b.n	8001078 <TSK_MediumFrequencyTaskM1+0x7c>
        STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 800109c:	2105      	movs	r1, #5
 800109e:	e7d4      	b.n	800104a <TSK_MediumFrequencyTaskM1+0x4e>
	  FOC_InitAdditionalMethods(M1);
 80010a0:	2000      	movs	r0, #0
 80010a2:	f7ff ff77 	bl	8000f94 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 80010a6:	2000      	movs	r0, #0
 80010a8:	f7ff ff76 	bl	8000f98 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 80010ac:	2106      	movs	r1, #6
 80010ae:	0020      	movs	r0, r4
 80010b0:	f004 fb6a 	bl	8005788 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 80010b4:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <TSK_MediumFrequencyTaskM1+0x128>)
 80010b6:	6818      	ldr	r0, [r3, #0]
 80010b8:	f004 fb42 	bl	8005740 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 80010bc:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <TSK_MediumFrequencyTaskM1+0x12c>)
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	f7ff fccb 	bl	8000a5a <MCI_ExecBufferedCommands>
    break;
 80010c4:	e7d8      	b.n	8001078 <TSK_MediumFrequencyTaskM1+0x7c>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <TSK_MediumFrequencyTaskM1+0x12c>)
 80010c8:	6818      	ldr	r0, [r3, #0]
 80010ca:	f7ff fcc6 	bl	8000a5a <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 80010ce:	2000      	movs	r0, #0
 80010d0:	f7ff ff62 	bl	8000f98 <FOC_CalcCurrRef>
    if( !IsSpeedReliable )
 80010d4:	2d00      	cmp	r5, #0
 80010d6:	d1cf      	bne.n	8001078 <TSK_MediumFrequencyTaskM1+0x7c>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 80010d8:	002a      	movs	r2, r5
 80010da:	2120      	movs	r1, #32
 80010dc:	0020      	movs	r0, r4
 80010de:	f004 fb3c 	bl	800575a <STM_FaultProcessing>
 80010e2:	e7c9      	b.n	8001078 <TSK_MediumFrequencyTaskM1+0x7c>
    R3_1_SwitchOffPWM( pwmcHandle[M1] );
 80010e4:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <TSK_MediumFrequencyTaskM1+0x124>)
 80010e6:	6818      	ldr	r0, [r3, #0]
 80010e8:	f004 f88e 	bl	8005208 <R3_1_SwitchOffPWM>
    FOC_Clear( M1 );
 80010ec:	2000      	movs	r0, #0
 80010ee:	f7ff fe49 	bl	8000d84 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 80010f2:	6830      	ldr	r0, [r6, #0]
 80010f4:	f003 fbf5 	bl	80048e2 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 80010f8:	20c8      	movs	r0, #200	; 0xc8
 80010fa:	0080      	lsls	r0, r0, #2
 80010fc:	f7ff ff70 	bl	8000fe0 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 8001100:	2108      	movs	r1, #8
 8001102:	e7a2      	b.n	800104a <TSK_MediumFrequencyTaskM1+0x4e>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 8001104:	f7ff ff72 	bl	8000fec <TSK_StopPermanencyTimeHasElapsedM1>
      STM_NextState( &STM[M1], STOP_IDLE );
 8001108:	2109      	movs	r1, #9
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 800110a:	2800      	cmp	r0, #0
 800110c:	d0b4      	beq.n	8001078 <TSK_MediumFrequencyTaskM1+0x7c>
 800110e:	e79c      	b.n	800104a <TSK_MediumFrequencyTaskM1+0x4e>
    STM_NextState( &STM[M1], IDLE );
 8001110:	2100      	movs	r1, #0
 8001112:	e79a      	b.n	800104a <TSK_MediumFrequencyTaskM1+0x4e>
 8001114:	200000f0 	.word	0x200000f0
 8001118:	20000950 	.word	0x20000950
 800111c:	20000934 	.word	0x20000934
 8001120:	2000096c 	.word	0x2000096c
 8001124:	20000964 	.word	0x20000964
 8001128:	20000944 	.word	0x20000944

0800112c <MC_Scheduler>:
{
 800112c:	b570      	push	{r4, r5, r6, lr}
  if (bMCBootCompleted == 1)
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <MC_Scheduler+0x44>)
 8001130:	781d      	ldrb	r5, [r3, #0]
 8001132:	2d01      	cmp	r5, #1
 8001134:	d117      	bne.n	8001166 <MC_Scheduler+0x3a>
    if(hMFTaskCounterM1 > 0u)
 8001136:	4c0f      	ldr	r4, [pc, #60]	; (8001174 <MC_Scheduler+0x48>)
 8001138:	8823      	ldrh	r3, [r4, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d014      	beq.n	8001168 <MC_Scheduler+0x3c>
      hMFTaskCounterM1--;
 800113e:	8823      	ldrh	r3, [r4, #0]
 8001140:	3b01      	subs	r3, #1
 8001142:	b29b      	uxth	r3, r3
 8001144:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0u)
 8001146:	4a0c      	ldr	r2, [pc, #48]	; (8001178 <MC_Scheduler+0x4c>)
 8001148:	8813      	ldrh	r3, [r2, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <MC_Scheduler+0x2a>
      hBootCapDelayCounterM1--;
 800114e:	8813      	ldrh	r3, [r2, #0]
 8001150:	3b01      	subs	r3, #1
 8001152:	b29b      	uxth	r3, r3
 8001154:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 8001156:	4a09      	ldr	r2, [pc, #36]	; (800117c <MC_Scheduler+0x50>)
 8001158:	8813      	ldrh	r3, [r2, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <MC_Scheduler+0x3a>
      hStopPermanencyCounterM1--;
 800115e:	8813      	ldrh	r3, [r2, #0]
 8001160:	3b01      	subs	r3, #1
 8001162:	b29b      	uxth	r3, r3
 8001164:	8013      	strh	r3, [r2, #0]
}
 8001166:	bd70      	pop	{r4, r5, r6, pc}
      TSK_MediumFrequencyTaskM1();
 8001168:	f7ff ff48 	bl	8000ffc <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 800116c:	8025      	strh	r5, [r4, #0]
 800116e:	e7ea      	b.n	8001146 <MC_Scheduler+0x1a>
 8001170:	2000093a 	.word	0x2000093a
 8001174:	2000093e 	.word	0x2000093e
 8001178:	2000093c 	.word	0x2000093c
 800117c:	20000940 	.word	0x20000940

08001180 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001180:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
  uint16_t hFOCreturn;

  HALL_CalcElAngle (&HALL_M1);
 8001182:	4839      	ldr	r0, [pc, #228]	; (8001268 <TSK_HighFrequencyTask+0xe8>)
{
 8001184:	b089      	sub	sp, #36	; 0x24
  HALL_CalcElAngle (&HALL_M1);
 8001186:	f003 f94d 	bl	8004424 <HALL_CalcElAngle>

  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 800118a:	4b38      	ldr	r3, [pc, #224]	; (800126c <TSK_HighFrequencyTask+0xec>)
 800118c:	6818      	ldr	r0, [r3, #0]
 800118e:	f004 fa3b 	bl	8005608 <STC_GetSpeedSensor>
 8001192:	0006      	movs	r6, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8001194:	f004 f9e4 	bl	8005560 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001198:	4f35      	ldr	r7, [pc, #212]	; (8001270 <TSK_HighFrequencyTask+0xf0>)
  hElAngle = SPD_GetElAngle(speedHandle);
 800119a:	0005      	movs	r5, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800119c:	a905      	add	r1, sp, #20
 800119e:	6838      	ldr	r0, [r7, #0]
 80011a0:	f003 fccd 	bl	8004b3e <PWMC_GetPhaseCurrents>
  RCM_ExecNextConv();
 80011a4:	f000 fcbc 	bl	8001b20 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 80011a8:	9805      	ldr	r0, [sp, #20]
 80011aa:	f7ff fd11 	bl	8000bd0 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80011ae:	0029      	movs	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 80011b0:	9006      	str	r0, [sp, #24]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80011b2:	f7ff fd7d 	bl	8000cb0 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80011b6:	4c2f      	ldr	r4, [pc, #188]	; (8001274 <TSK_HighFrequencyTask+0xf4>)
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80011b8:	9003      	str	r0, [sp, #12]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80011ba:	2310      	movs	r3, #16
 80011bc:	5ee1      	ldrsh	r1, [r4, r3]
  Vqd.q = PI_Controller(pPIDIq[M1],
 80011be:	4b2e      	ldr	r3, [pc, #184]	; (8001278 <TSK_HighFrequencyTask+0xf8>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80011c0:	b200      	sxth	r0, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 80011c2:	1a09      	subs	r1, r1, r0
 80011c4:	6818      	ldr	r0, [r3, #0]
 80011c6:	f003 fc2f 	bl	8004a28 <PI_Controller>
 80011ca:	9000      	str	r0, [sp, #0]

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80011cc:	2312      	movs	r3, #18
 80011ce:	5ee1      	ldrsh	r1, [r4, r3]
 80011d0:	ab02      	add	r3, sp, #8
 80011d2:	2206      	movs	r2, #6
 80011d4:	5e9b      	ldrsh	r3, [r3, r2]
  Vqd.d = PI_Controller(pPIDId[M1],
 80011d6:	1ac9      	subs	r1, r1, r3
 80011d8:	4b28      	ldr	r3, [pc, #160]	; (800127c <TSK_HighFrequencyTask+0xfc>)
 80011da:	6818      	ldr	r0, [r3, #0]
 80011dc:	f003 fc24 	bl	8004a28 <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80011e0:	4b27      	ldr	r3, [pc, #156]	; (8001280 <TSK_HighFrequencyTask+0x100>)
 80011e2:	9900      	ldr	r1, [sp, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	ab04      	add	r3, sp, #16
 80011e8:	8058      	strh	r0, [r3, #2]
 80011ea:	8019      	strh	r1, [r3, #0]
 80011ec:	0010      	movs	r0, r2
 80011ee:	9904      	ldr	r1, [sp, #16]
 80011f0:	f002 ff9c 	bl	800412c <Circle_Limitation>
 80011f4:	b203      	sxth	r3, r0
 80011f6:	9004      	str	r0, [sp, #16]
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	1403      	asrs	r3, r0, #16
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80011fc:	0030      	movs	r0, r6
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80011fe:	9301      	str	r3, [sp, #4]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001200:	f004 f9b4 	bl	800556c <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001204:	0029      	movs	r1, r5
 8001206:	9804      	ldr	r0, [sp, #16]
 8001208:	f7ff fd96 	bl	8000d38 <MCM_Rev_Park>
 800120c:	0001      	movs	r1, r0
 800120e:	9007      	str	r0, [sp, #28]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001210:	6838      	ldr	r0, [r7, #0]
 8001212:	f003 fc98 	bl	8004b46 <PWMC_SetPhaseVoltage>
 8001216:	0006      	movs	r6, r0
  RCM_ReadOngoingConv();
 8001218:	f000 fcbe 	bl	8001b98 <RCM_ReadOngoingConv>
  FOCVars[M1].Vqd = Vqd;
 800121c:	9b00      	ldr	r3, [sp, #0]
  FOCVars[M1].Iab = Iab;
 800121e:	2204      	movs	r2, #4
  FOCVars[M1].Vqd = Vqd;
 8001220:	82e3      	strh	r3, [r4, #22]
 8001222:	9b01      	ldr	r3, [sp, #4]
  FOCVars[M1].Iab = Iab;
 8001224:	a905      	add	r1, sp, #20
  FOCVars[M1].Vqd = Vqd;
 8001226:	8323      	strh	r3, [r4, #24]
  FOCVars[M1].Iab = Iab;
 8001228:	0020      	movs	r0, r4
 800122a:	f004 fc8d 	bl	8005b48 <memcpy>
  FOCVars[M1].Ialphabeta = Ialphabeta;
 800122e:	2204      	movs	r2, #4
 8001230:	a906      	add	r1, sp, #24
 8001232:	1d20      	adds	r0, r4, #4
 8001234:	f004 fc88 	bl	8005b48 <memcpy>
  FOCVars[M1].Iqd = Iqd;
 8001238:	0020      	movs	r0, r4
 800123a:	2204      	movs	r2, #4
 800123c:	a903      	add	r1, sp, #12
 800123e:	300c      	adds	r0, #12
 8001240:	f004 fc82 	bl	8005b48 <memcpy>
  FOCVars[M1].Valphabeta = Valphabeta;
 8001244:	0020      	movs	r0, r4
 8001246:	2204      	movs	r2, #4
 8001248:	301a      	adds	r0, #26
 800124a:	a907      	add	r1, sp, #28
 800124c:	f004 fc7c 	bl	8005b48 <memcpy>
  FOCVars[M1].hElAngle = hElAngle;
 8001250:	8425      	strh	r5, [r4, #32]
  if(hFOCreturn == MC_FOC_DURATION)
 8001252:	2e01      	cmp	r6, #1
 8001254:	d104      	bne.n	8001260 <TSK_HighFrequencyTask+0xe0>
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8001256:	2200      	movs	r2, #0
 8001258:	0031      	movs	r1, r6
 800125a:	480a      	ldr	r0, [pc, #40]	; (8001284 <TSK_HighFrequencyTask+0x104>)
 800125c:	f004 fa7d 	bl	800575a <STM_FaultProcessing>
}
 8001260:	2000      	movs	r0, #0
 8001262:	b009      	add	sp, #36	; 0x24
 8001264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	200000f0 	.word	0x200000f0
 800126c:	20000964 	.word	0x20000964
 8001270:	2000096c 	.word	0x2000096c
 8001274:	2000089c 	.word	0x2000089c
 8001278:	20000958 	.word	0x20000958
 800127c:	20000954 	.word	0x20000954
 8001280:	2000094c 	.word	0x2000094c
 8001284:	20000934 	.word	0x20000934

08001288 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800128a:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <TSK_SafetyTask_PWMOFF+0x78>)
 800128c:	0086      	lsls	r6, r0, #2
{
 800128e:	0005      	movs	r5, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001290:	58f0      	ldr	r0, [r6, r3]
 8001292:	f003 fb79 	bl	8004988 <NTC_CalcAvTemp>
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001296:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <TSK_SafetyTask_PWMOFF+0x7c>)
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001298:	0004      	movs	r4, r0
 800129a:	2708      	movs	r7, #8
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800129c:	58f0      	ldr	r0, [r6, r3]
 800129e:	f003 fd71 	bl	8004d84 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80012a2:	43bc      	bics	r4, r7
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80012a4:	4304      	orrs	r4, r0
 80012a6:	b2a4      	uxth	r4, r4
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 80012a8:	2d00      	cmp	r5, #0
 80012aa:	d106      	bne.n	80012ba <TSK_SafetyTask_PWMOFF+0x32>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 80012ac:	4b16      	ldr	r3, [pc, #88]	; (8001308 <TSK_SafetyTask_PWMOFF+0x80>)
 80012ae:	6818      	ldr	r0, [r3, #0]
 80012b0:	f004 f918 	bl	80054e4 <RVBS_CalcAvVbus>
 80012b4:	43b8      	bics	r0, r7
 80012b6:	4304      	orrs	r4, r0
 80012b8:	b2a4      	uxth	r4, r4
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 80012ba:	2706      	movs	r7, #6
 80012bc:	43e2      	mvns	r2, r4
 80012be:	436f      	muls	r7, r5
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <TSK_SafetyTask_PWMOFF+0x84>)
 80012c2:	0021      	movs	r1, r4
 80012c4:	19df      	adds	r7, r3, r7
 80012c6:	0038      	movs	r0, r7
 80012c8:	b292      	uxth	r2, r2
 80012ca:	f004 fa46 	bl	800575a <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 80012ce:	0038      	movs	r0, r7
 80012d0:	f004 fad2 	bl	8005878 <STM_GetState>
 80012d4:	280a      	cmp	r0, #10
 80012d6:	d002      	beq.n	80012de <TSK_SafetyTask_PWMOFF+0x56>
 80012d8:	280b      	cmp	r0, #11
 80012da:	d00c      	beq.n	80012f6 <TSK_SafetyTask_PWMOFF+0x6e>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 80012dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <TSK_SafetyTask_PWMOFF+0x7c>)
 80012e0:	5998      	ldr	r0, [r3, r6]
 80012e2:	f003 fd28 	bl	8004d36 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 80012e6:	0028      	movs	r0, r5
 80012e8:	f7ff fd4c 	bl	8000d84 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <TSK_SafetyTask_PWMOFF+0x88>)
 80012ee:	5998      	ldr	r0, [r3, r6]
 80012f0:	f003 faf7 	bl	80048e2 <MPM_Clear>
    break;
 80012f4:	e7f2      	b.n	80012dc <TSK_SafetyTask_PWMOFF+0x54>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80012f6:	4b03      	ldr	r3, [pc, #12]	; (8001304 <TSK_SafetyTask_PWMOFF+0x7c>)
 80012f8:	5998      	ldr	r0, [r3, r6]
 80012fa:	f003 fd1c 	bl	8004d36 <PWMC_SwitchOffPWM>
}
 80012fe:	e7ed      	b.n	80012dc <TSK_SafetyTask_PWMOFF+0x54>
 8001300:	20000968 	.word	0x20000968
 8001304:	2000096c 	.word	0x2000096c
 8001308:	20000948 	.word	0x20000948
 800130c:	20000934 	.word	0x20000934
 8001310:	20000950 	.word	0x20000950

08001314 <TSK_SafetyTask>:
{
 8001314:	b510      	push	{r4, lr}
  if (bMCBootCompleted == 1)
 8001316:	4b05      	ldr	r3, [pc, #20]	; (800132c <TSK_SafetyTask+0x18>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d104      	bne.n	8001328 <TSK_SafetyTask+0x14>
    TSK_SafetyTask_PWMOFF(M1);
 800131e:	2000      	movs	r0, #0
 8001320:	f7ff ffb2 	bl	8001288 <TSK_SafetyTask_PWMOFF>
    RCM_ExecUserConv ();
 8001324:	f000 fbd0 	bl	8001ac8 <RCM_ExecUserConv>
}
 8001328:	bd10      	pop	{r4, pc}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	2000093a 	.word	0x2000093a

08001330 <MC_RunMotorControlTasks>:
{
 8001330:	b510      	push	{r4, lr}
  if ( bMCBootCompleted ) {
 8001332:	4b05      	ldr	r3, [pc, #20]	; (8001348 <MC_RunMotorControlTasks+0x18>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d005      	beq.n	8001346 <MC_RunMotorControlTasks+0x16>
    MC_Scheduler();
 800133a:	f7ff fef7 	bl	800112c <MC_Scheduler>
    TSK_SafetyTask();
 800133e:	f7ff ffe9 	bl	8001314 <TSK_SafetyTask>
    UI_Scheduler();
 8001342:	f000 ff17 	bl	8002174 <UI_Scheduler>
}
 8001346:	bd10      	pop	{r4, pc}
 8001348:	2000093a 	.word	0x2000093a

0800134c <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 800134c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 800134e:	4b05      	ldr	r3, [pc, #20]	; (8001364 <TSK_HardwareFaultTask+0x18>)
 8001350:	6818      	ldr	r0, [r3, #0]
 8001352:	f003 ff59 	bl	8005208 <R3_1_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8001356:	2200      	movs	r2, #0
 8001358:	2180      	movs	r1, #128	; 0x80
 800135a:	4803      	ldr	r0, [pc, #12]	; (8001368 <TSK_HardwareFaultTask+0x1c>)
 800135c:	f004 f9fd 	bl	800575a <STM_FaultProcessing>
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8001360:	bd10      	pop	{r4, pc}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	2000096c 	.word	0x2000096c
 8001368:	20000934 	.word	0x20000934

0800136c <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 800136c:	b570      	push	{r4, r5, r6, lr}
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
 800136e:	2490      	movs	r4, #144	; 0x90
 8001370:	05e4      	lsls	r4, r4, #23
 8001372:	0020      	movs	r0, r4
 8001374:	2108      	movs	r1, #8
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
 8001376:	4d1f      	ldr	r5, [pc, #124]	; (80013f4 <mc_lock_pins+0x88>)
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
 8001378:	f7ff fcf7 	bl	8000d6a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
 800137c:	0020      	movs	r0, r4
 800137e:	2120      	movs	r1, #32
 8001380:	f7ff fcf3 	bl	8000d6a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
 8001384:	0020      	movs	r0, r4
 8001386:	2110      	movs	r1, #16
 8001388:	f7ff fcef 	bl	8000d6a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
 800138c:	0028      	movs	r0, r5
 800138e:	2102      	movs	r1, #2
 8001390:	f7ff fceb 	bl	8000d6a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_HALL_H2_GPIO_Port, M1_HALL_H2_Pin);
 8001394:	0020      	movs	r0, r4
 8001396:	2102      	movs	r1, #2
 8001398:	f7ff fce7 	bl	8000d6a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_HALL_H3_GPIO_Port, M1_HALL_H3_Pin);
 800139c:	0020      	movs	r0, r4
 800139e:	2104      	movs	r1, #4
 80013a0:	f7ff fce3 	bl	8000d6a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_HALL_H1_GPIO_Port, M1_HALL_H1_Pin);
 80013a4:	0020      	movs	r0, r4
 80013a6:	2101      	movs	r1, #1
 80013a8:	f7ff fcdf 	bl	8000d6a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_UH_GPIO_Port, M1_PWM_UH_Pin);
 80013ac:	2180      	movs	r1, #128	; 0x80
 80013ae:	0020      	movs	r0, r4
 80013b0:	0049      	lsls	r1, r1, #1
 80013b2:	f7ff fcda 	bl	8000d6a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
 80013b6:	2180      	movs	r1, #128	; 0x80
 80013b8:	0020      	movs	r0, r4
 80013ba:	0089      	lsls	r1, r1, #2
 80013bc:	f7ff fcd5 	bl	8000d6a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_OCP_GPIO_Port, M1_OCP_Pin);
 80013c0:	2180      	movs	r1, #128	; 0x80
 80013c2:	0028      	movs	r0, r5
 80013c4:	0149      	lsls	r1, r1, #5
 80013c6:	f7ff fcd0 	bl	8000d6a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
 80013ca:	2180      	movs	r1, #128	; 0x80
 80013cc:	0028      	movs	r0, r5
 80013ce:	01c9      	lsls	r1, r1, #7
 80013d0:	f7ff fccb 	bl	8000d6a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
 80013d4:	2180      	movs	r1, #128	; 0x80
 80013d6:	0020      	movs	r0, r4
 80013d8:	00c9      	lsls	r1, r1, #3
 80013da:	f7ff fcc6 	bl	8000d6a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
 80013de:	2180      	movs	r1, #128	; 0x80
 80013e0:	0028      	movs	r0, r5
 80013e2:	0209      	lsls	r1, r1, #8
 80013e4:	f7ff fcc1 	bl	8000d6a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
 80013e8:	2180      	movs	r1, #128	; 0x80
 80013ea:	0028      	movs	r0, r5
 80013ec:	0189      	lsls	r1, r1, #6
 80013ee:	f7ff fcbc 	bl	8000d6a <LL_GPIO_LockPin>
}
 80013f2:	bd70      	pop	{r4, r5, r6, pc}
 80013f4:	48000400 	.word	0x48000400

080013f8 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 80013f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 80013fa:	2609      	movs	r6, #9
{
 80013fc:	b08f      	sub	sp, #60	; 0x3c
 80013fe:	9303      	str	r3, [sp, #12]
  bool bNoError = false; // Default is error
 8001400:	ab02      	add	r3, sp, #8
 8001402:	18f6      	adds	r6, r6, r3
 8001404:	2300      	movs	r3, #0
{
 8001406:	0004      	movs	r4, r0
  bool bNoError = false; // Default is error
 8001408:	7033      	strb	r3, [r6, #0]
{
 800140a:	000f      	movs	r7, r1
 800140c:	0015      	movs	r5, r2
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
 800140e:	094b      	lsrs	r3, r1, #5
  if (bMotorSelection != 0)
 8001410:	d012      	beq.n	8001438 <MCP_ReceivedFrame+0x40>
  {
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 8001412:	3b01      	subs	r3, #1
 8001414:	001a      	movs	r2, r3
 8001416:	2100      	movs	r1, #0
 8001418:	9302      	str	r3, [sp, #8]
 800141a:	f000 ff06 	bl	800222a <UI_SetReg>
 800141e:	2800      	cmp	r0, #0
 8001420:	d023      	beq.n	800146a <MCP_ReceivedFrame+0x72>
    {
      Code &= 0x1F; /* Mask: 0001|1111 */
 8001422:	231f      	movs	r3, #31
 8001424:	401f      	ands	r7, r3

      /* Change also the DAC selected motor */
      if (pHandle->pDAC)
 8001426:	0023      	movs	r3, r4
 8001428:	33c4      	adds	r3, #196	; 0xc4
 800142a:	6818      	ldr	r0, [r3, #0]
 800142c:	2800      	cmp	r0, #0
 800142e:	d003      	beq.n	8001438 <MCP_ReceivedFrame+0x40>
      {
        UI_SetReg(&pHandle->pDAC->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1);
 8001430:	2100      	movs	r1, #0
 8001432:	9a02      	ldr	r2, [sp, #8]
 8001434:	f000 fef9 	bl	800222a <UI_SetReg>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 8001438:	2f12      	cmp	r7, #18
 800143a:	d900      	bls.n	800143e <MCP_ReceivedFrame+0x46>
 800143c:	e203      	b.n	8001846 <MCP_ReceivedFrame+0x44e>
 800143e:	0038      	movs	r0, r7
 8001440:	f7fe fe80 	bl	8000144 <__gnu_thumb1_case_uhi>
 8001444:	002a0094 	.word	0x002a0094
 8001448:	013e00a6 	.word	0x013e00a6
 800144c:	02010201 	.word	0x02010201
 8001450:	016c0148 	.word	0x016c0148
 8001454:	01b6018d 	.word	0x01b6018d
 8001458:	01e201d4 	.word	0x01e201d4
 800145c:	017f0019 	.word	0x017f0019
 8001460:	02010201 	.word	0x02010201
 8001464:	02010201 	.word	0x02010201
 8001468:	0094      	.short	0x0094
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 800146a:	230e      	movs	r3, #14
 800146c:	aa02      	add	r2, sp, #8
 800146e:	189b      	adds	r3, r3, r2
 8001470:	220b      	movs	r2, #11
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001472:	701a      	strb	r2, [r3, #0]
    }
    break;
  }

  if (RequireAck)
 8001474:	e07a      	b.n	800156c <MCP_ReceivedFrame+0x174>
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001476:	0023      	movs	r3, r4
 8001478:	2000      	movs	r0, #0
 800147a:	33c0      	adds	r3, #192	; 0xc0
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	ad06      	add	r5, sp, #24
 8001480:	5c11      	ldrb	r1, [r2, r0]
 8001482:	b2c3      	uxtb	r3, r0
 8001484:	2900      	cmp	r1, #0
 8001486:	d000      	beq.n	800148a <MCP_ReceivedFrame+0x92>
 8001488:	e1d7      	b.n	800183a <MCP_ReceivedFrame+0x442>
        outBuff[i] = 0;
 800148a:	2220      	movs	r2, #32
 800148c:	1ad2      	subs	r2, r2, r3
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	1828      	adds	r0, r5, r0
 8001492:	f004 fb62 	bl	8005b5a <memset>
 8001496:	e137      	b.n	8001708 <MCP_ReceivedFrame+0x310>
      bErrorCode = ERROR_CODE_WRONG_SET;
 8001498:	220e      	movs	r2, #14
 800149a:	ab02      	add	r3, sp, #8
 800149c:	18d2      	adds	r2, r2, r3
 800149e:	2305      	movs	r3, #5
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 80014a0:	7829      	ldrb	r1, [r5, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 80014a2:	7013      	strb	r3, [r2, #0]
      switch (bRegID)
 80014a4:	291d      	cmp	r1, #29
 80014a6:	d935      	bls.n	8001514 <MCP_ReceivedFrame+0x11c>
 80014a8:	2988      	cmp	r1, #136	; 0x88
 80014aa:	d80b      	bhi.n	80014c4 <MCP_ReceivedFrame+0xcc>
 80014ac:	2973      	cmp	r1, #115	; 0x73
 80014ae:	d80c      	bhi.n	80014ca <MCP_ReceivedFrame+0xd2>
 80014b0:	2965      	cmp	r1, #101	; 0x65
 80014b2:	d807      	bhi.n	80014c4 <MCP_ReceivedFrame+0xcc>
 80014b4:	294e      	cmp	r1, #78	; 0x4e
 80014b6:	d819      	bhi.n	80014ec <MCP_ReceivedFrame+0xf4>
 80014b8:	2941      	cmp	r1, #65	; 0x41
 80014ba:	d064      	beq.n	8001586 <MCP_ReceivedFrame+0x18e>
 80014bc:	000b      	movs	r3, r1
 80014be:	3b46      	subs	r3, #70	; 0x46
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d91d      	bls.n	8001500 <MCP_ReceivedFrame+0x108>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 80014c4:	2302      	movs	r3, #2
 80014c6:	7013      	strb	r3, [r2, #0]
  if (RequireAck)
 80014c8:	e050      	b.n	800156c <MCP_ReceivedFrame+0x174>
 80014ca:	0008      	movs	r0, r1
 80014cc:	3874      	subs	r0, #116	; 0x74
 80014ce:	2814      	cmp	r0, #20
 80014d0:	d8f8      	bhi.n	80014c4 <MCP_ReceivedFrame+0xcc>
 80014d2:	f7fe fe19 	bl	8000108 <__gnu_thumb1_case_sqi>
 80014d6:	1540      	.short	0x1540
 80014d8:	15151515 	.word	0x15151515
 80014dc:	15f7f7f7 	.word	0x15f7f7f7
 80014e0:	f7f7f715 	.word	0xf7f7f715
 80014e4:	f7f7f7f7 	.word	0xf7f7f7f7
 80014e8:	5858      	.short	0x5858
 80014ea:	58          	.byte	0x58
 80014eb:	00          	.byte	0x00
 80014ec:	0008      	movs	r0, r1
 80014ee:	2301      	movs	r3, #1
 80014f0:	384f      	subs	r0, #79	; 0x4f
 80014f2:	b2c0      	uxtb	r0, r0
 80014f4:	4083      	lsls	r3, r0
 80014f6:	4871      	ldr	r0, [pc, #452]	; (80016bc <MCP_ReceivedFrame+0x2c4>)
 80014f8:	4203      	tst	r3, r0
 80014fa:	d144      	bne.n	8001586 <MCP_ReceivedFrame+0x18e>
 80014fc:	04db      	lsls	r3, r3, #19
 80014fe:	d5e1      	bpl.n	80014c4 <MCP_ReceivedFrame+0xcc>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001500:	78aa      	ldrb	r2, [r5, #2]
 8001502:	786b      	ldrb	r3, [r5, #1]
 8001504:	0212      	lsls	r2, r2, #8
 8001506:	18d2      	adds	r2, r2, r3
 8001508:	78eb      	ldrb	r3, [r5, #3]
 800150a:	041b      	lsls	r3, r3, #16
 800150c:	18d2      	adds	r2, r2, r3
 800150e:	792b      	ldrb	r3, [r5, #4]
 8001510:	061b      	lsls	r3, r3, #24
 8001512:	e03b      	b.n	800158c <MCP_ReceivedFrame+0x194>
 8001514:	0008      	movs	r0, r1
 8001516:	f7fe fdf7 	bl	8000108 <__gnu_thumb1_case_sqi>
 800151a:	d50f      	.short	0xd50f
 800151c:	36d51ed5 	.word	0x36d51ed5
 8001520:	36363636 	.word	0x36363636
 8001524:	36363636 	.word	0x36363636
 8001528:	f3f33636 	.word	0xf3f33636
 800152c:	3636d5d5 	.word	0x3636d5d5
 8001530:	d5363636 	.word	0xd5363636
 8001534:	3320d5d5 	.word	0x3320d5d5
          UI_SetReg(&pHandle->pDAC->_Super, bRegID, wValue);
 8001538:	0023      	movs	r3, r4
          int32_t wValue = (int32_t)(buffer[1]);
 800153a:	786d      	ldrb	r5, [r5, #1]
          UI_SetReg(&pHandle->pDAC->_Super, bRegID, wValue);
 800153c:	33c4      	adds	r3, #196	; 0xc4
 800153e:	002a      	movs	r2, r5
 8001540:	2100      	movs	r1, #0
 8001542:	6818      	ldr	r0, [r3, #0]
 8001544:	f000 fe71 	bl	800222a <UI_SetReg>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001548:	002a      	movs	r2, r5
 800154a:	2100      	movs	r1, #0
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 800154c:	0020      	movs	r0, r4
 800154e:	f000 fe6c 	bl	800222a <UI_SetReg>
 8001552:	7030      	strb	r0, [r6, #0]
  if (RequireAck)
 8001554:	e00a      	b.n	800156c <MCP_ReceivedFrame+0x174>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8001556:	786a      	ldrb	r2, [r5, #1]
 8001558:	e7f8      	b.n	800154c <MCP_ReceivedFrame+0x154>
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH0, (MC_Protocol_REG_t)(buffer[1]));
 800155a:	2100      	movs	r1, #0
 800155c:	786a      	ldrb	r2, [r5, #1]
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH1, (MC_Protocol_REG_t)(buffer[1]));
 800155e:	0023      	movs	r3, r4
 8001560:	33c4      	adds	r3, #196	; 0xc4
 8001562:	6818      	ldr	r0, [r3, #0]
 8001564:	f000 ffa4 	bl	80024b0 <UI_SetDAC>
          bNoError = true; /* No check inside class return always true*/
 8001568:	2301      	movs	r3, #1
 800156a:	7033      	strb	r3, [r6, #0]
  {
    if (bNoError)
 800156c:	7833      	ldrb	r3, [r6, #0]
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 800156e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001570:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if (bNoError)
 8001572:	2b00      	cmp	r3, #0
 8001574:	d100      	bne.n	8001578 <MCP_ReceivedFrame+0x180>
 8001576:	e16b      	b.n	8001850 <MCP_ReceivedFrame+0x458>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 8001578:	2300      	movs	r3, #0
 800157a:	21f0      	movs	r1, #240	; 0xf0
 800157c:	001a      	movs	r2, r3
 800157e:	e071      	b.n	8001664 <MCP_ReceivedFrame+0x26c>
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH1, (MC_Protocol_REG_t)(buffer[1]));
 8001580:	2101      	movs	r1, #1
 8001582:	786a      	ldrb	r2, [r5, #1]
 8001584:	e7eb      	b.n	800155e <MCP_ReceivedFrame+0x166>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 8001586:	78aa      	ldrb	r2, [r5, #2]
 8001588:	786b      	ldrb	r3, [r5, #1]
 800158a:	0212      	lsls	r2, r2, #8
 800158c:	18d2      	adds	r2, r2, r3
 800158e:	e7dd      	b.n	800154c <MCP_ReceivedFrame+0x154>
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 8001590:	230e      	movs	r3, #14
 8001592:	aa02      	add	r2, sp, #8
 8001594:	189b      	adds	r3, r3, r2
 8001596:	2203      	movs	r2, #3
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001598:	7829      	ldrb	r1, [r5, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 800159a:	701a      	strb	r2, [r3, #0]
      switch (bRegID)
 800159c:	2988      	cmp	r1, #136	; 0x88
 800159e:	d8e5      	bhi.n	800156c <MCP_ReceivedFrame+0x174>
 80015a0:	0008      	movs	r0, r1
 80015a2:	f7fe fdb1 	bl	8000108 <__gnu_thumb1_case_sqi>
 80015a6:	7e45      	.short	0x7e45
 80015a8:	727e4545 	.word	0x727e4545
 80015ac:	72727272 	.word	0x72727272
 80015b0:	72727272 	.word	0x72727272
 80015b4:	72727272 	.word	0x72727272
 80015b8:	72727272 	.word	0x72727272
 80015bc:	72727272 	.word	0x72727272
 80015c0:	61517272 	.word	0x61517272
 80015c4:	7272727e 	.word	0x7272727e
 80015c8:	e3e3e345 	.word	0xe3e3e345
 80015cc:	e3e3e3e3 	.word	0xe3e3e3e3
 80015d0:	e3e3e3e3 	.word	0xe3e3e3e3
 80015d4:	e3e3e3e3 	.word	0xe3e3e3e3
 80015d8:	e3e3e3e3 	.word	0xe3e3e3e3
 80015dc:	e3e3e3e3 	.word	0xe3e3e3e3
 80015e0:	e3e3e3e3 	.word	0xe3e3e3e3
 80015e4:	72e3e3e3 	.word	0x72e3e3e3
 80015e8:	e3e3e3e3 	.word	0xe3e3e3e3
 80015ec:	727e7e7e 	.word	0x727e7e7e
 80015f0:	45727272 	.word	0x45727272
 80015f4:	7272727e 	.word	0x7272727e
 80015f8:	72727272 	.word	0x72727272
 80015fc:	72727272 	.word	0x72727272
 8001600:	72e37e45 	.word	0x72e37e45
 8001604:	72727272 	.word	0x72727272
 8001608:	7272e3e3 	.word	0x7272e3e3
 800160c:	7e7e4545 	.word	0x7e7e4545
 8001610:	457e7e7e 	.word	0x457e7e7e
 8001614:	e37e7272 	.word	0xe37e7272
 8001618:	7e457272 	.word	0x7e457272
 800161c:	7e7e7e7e 	.word	0x7e7e7e7e
 8001620:	7e7e7e7e 	.word	0x7e7e7e7e
 8001624:	e3457e7e 	.word	0xe3457e7e
 8001628:	7e7e7e45 	.word	0x7e7e7e45
 800162c:	7272      	.short	0x7272
 800162e:	72          	.byte	0x72
 800162f:	00          	.byte	0x00
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001630:	0032      	movs	r2, r6
 8001632:	0020      	movs	r0, r4
 8001634:	f000 ff4c 	bl	80024d0 <UI_GetReg>
           if ( bNoError == true )
 8001638:	7833      	ldrb	r3, [r6, #0]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 800163a:	9006      	str	r0, [sp, #24]
           if ( bNoError == true )
 800163c:	2b00      	cmp	r3, #0
 800163e:	d095      	beq.n	800156c <MCP_ReceivedFrame+0x174>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001640:	2301      	movs	r3, #1
 8001642:	6b65      	ldr	r5, [r4, #52]	; 0x34
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8001644:	aa06      	add	r2, sp, #24
 8001646:	e00b      	b.n	8001660 <MCP_ReceivedFrame+0x268>
          if (pHandle->pDAC)
 8001648:	0023      	movs	r3, r4
 800164a:	33c4      	adds	r3, #196	; 0xc4
 800164c:	6818      	ldr	r0, [r3, #0]
 800164e:	2800      	cmp	r0, #0
 8001650:	d08c      	beq.n	800156c <MCP_ReceivedFrame+0x174>
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH0);
 8001652:	2100      	movs	r1, #0
 8001654:	f000 ff32 	bl	80024bc <UI_GetDAC>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001658:	2301      	movs	r3, #1
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH0);
 800165a:	aa06      	add	r2, sp, #24
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 800165c:	6b65      	ldr	r5, [r4, #52]	; 0x34
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH0);
 800165e:	7010      	strb	r0, [r2, #0]
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8001660:	21f0      	movs	r1, #240	; 0xf0
 8001662:	6b20      	ldr	r0, [r4, #48]	; 0x30
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 8001664:	47a8      	blx	r5
    }
  }
}
 8001666:	e0e6      	b.n	8001836 <MCP_ReceivedFrame+0x43e>
          if (pHandle->pDAC)
 8001668:	0023      	movs	r3, r4
 800166a:	33c4      	adds	r3, #196	; 0xc4
 800166c:	6818      	ldr	r0, [r3, #0]
 800166e:	2800      	cmp	r0, #0
 8001670:	d100      	bne.n	8001674 <MCP_ReceivedFrame+0x27c>
 8001672:	e77b      	b.n	800156c <MCP_ReceivedFrame+0x174>
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 8001674:	2101      	movs	r1, #1
 8001676:	f000 ff21 	bl	80024bc <UI_GetDAC>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 800167a:	2301      	movs	r3, #1
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 800167c:	aa06      	add	r2, sp, #24
 800167e:	7010      	strb	r0, [r2, #0]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001680:	21f0      	movs	r1, #240	; 0xf0
 8001682:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001684:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001686:	47a8      	blx	r5
      bNoError = true;
 8001688:	e76e      	b.n	8001568 <MCP_ReceivedFrame+0x170>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 800168a:	0032      	movs	r2, r6
 800168c:	0020      	movs	r0, r4
 800168e:	f000 ff1f 	bl	80024d0 <UI_GetReg>
          if ( bNoError == true )
 8001692:	7833      	ldrb	r3, [r6, #0]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001694:	9006      	str	r0, [sp, #24]
          if ( bNoError == true )
 8001696:	2b00      	cmp	r3, #0
 8001698:	d100      	bne.n	800169c <MCP_ReceivedFrame+0x2a4>
 800169a:	e767      	b.n	800156c <MCP_ReceivedFrame+0x174>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 800169c:	2302      	movs	r3, #2
 800169e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80016a0:	e7d0      	b.n	8001644 <MCP_ReceivedFrame+0x24c>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 80016a2:	0032      	movs	r2, r6
 80016a4:	0020      	movs	r0, r4
 80016a6:	f000 ff13 	bl	80024d0 <UI_GetReg>
          if ( bNoError == true )
 80016aa:	7833      	ldrb	r3, [r6, #0]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 80016ac:	9006      	str	r0, [sp, #24]
          if ( bNoError == true )
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d100      	bne.n	80016b4 <MCP_ReceivedFrame+0x2bc>
 80016b2:	e75b      	b.n	800156c <MCP_ReceivedFrame+0x174>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 80016b4:	2304      	movs	r3, #4
 80016b6:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80016b8:	e7c4      	b.n	8001644 <MCP_ReceivedFrame+0x24c>
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	006407f1 	.word	0x006407f1
      bErrorCode = ERROR_CODE_WRONG_CMD;
 80016c0:	230e      	movs	r3, #14
 80016c2:	aa02      	add	r2, sp, #8
 80016c4:	189b      	adds	r3, r3, r2
 80016c6:	2207      	movs	r2, #7
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 80016c8:	0020      	movs	r0, r4
      uint8_t bCmdID = buffer[0];
 80016ca:	7829      	ldrb	r1, [r5, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 80016cc:	701a      	strb	r2, [r3, #0]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 80016ce:	f000 fe2c 	bl	800232a <UI_ExecCmd>
 80016d2:	e73e      	b.n	8001552 <MCP_ReceivedFrame+0x15a>
        outBuff[i] = 0;
 80016d4:	ad06      	add	r5, sp, #24
 80016d6:	2220      	movs	r2, #32
 80016d8:	2100      	movs	r1, #0
 80016da:	0028      	movs	r0, r5
 80016dc:	f004 fa3d 	bl	8005b5a <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 80016e0:	0023      	movs	r3, r4
 80016e2:	2200      	movs	r2, #0
 80016e4:	33c0      	adds	r3, #192	; 0xc0
 80016e6:	6819      	ldr	r1, [r3, #0]
 80016e8:	5c88      	ldrb	r0, [r1, r2]
 80016ea:	b2d3      	uxtb	r3, r2
 80016ec:	2809      	cmp	r0, #9
 80016ee:	d10e      	bne.n	800170e <MCP_ReceivedFrame+0x316>
      outBuff[0] = pHandle->s_fwVer[i+5];
 80016f0:	1d5a      	adds	r2, r3, #5
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	5c8a      	ldrb	r2, [r1, r2]
 80016f6:	702a      	strb	r2, [r5, #0]
      outBuff[1] = pHandle->s_fwVer[i+7];
 80016f8:	1dda      	adds	r2, r3, #7
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	5c8a      	ldrb	r2, [r1, r2]
      outBuff[2] = pHandle->s_fwVer[i+9];
 80016fe:	3309      	adds	r3, #9
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001700:	706a      	strb	r2, [r5, #1]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001702:	b2db      	uxtb	r3, r3
 8001704:	5ccb      	ldrb	r3, [r1, r3]
 8001706:	70ab      	strb	r3, [r5, #2]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001708:	2320      	movs	r3, #32
 800170a:	002a      	movs	r2, r5
 800170c:	e7b8      	b.n	8001680 <MCP_ReceivedFrame+0x288>
        outBuff[3+i] = pHandle->s_fwVer[i];
 800170e:	18ab      	adds	r3, r5, r2
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001710:	3201      	adds	r2, #1
        outBuff[3+i] = pHandle->s_fwVer[i];
 8001712:	70d8      	strb	r0, [r3, #3]
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001714:	2a1d      	cmp	r2, #29
 8001716:	d1e7      	bne.n	80016e8 <MCP_ReceivedFrame+0x2f0>
 8001718:	0013      	movs	r3, r2
 800171a:	e7e9      	b.n	80016f0 <MCP_ReceivedFrame+0x2f8>
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 800171c:	796b      	ldrb	r3, [r5, #5]
 800171e:	792a      	ldrb	r2, [r5, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001720:	7869      	ldrb	r1, [r5, #1]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001722:	021b      	lsls	r3, r3, #8
 8001724:	18d2      	adds	r2, r2, r3
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001726:	782b      	ldrb	r3, [r5, #0]
 8001728:	0209      	lsls	r1, r1, #8
 800172a:	18c9      	adds	r1, r1, r3
 800172c:	78ab      	ldrb	r3, [r5, #2]
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 800172e:	0020      	movs	r0, r4
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001730:	041b      	lsls	r3, r3, #16
 8001732:	18c9      	adds	r1, r1, r3
 8001734:	78eb      	ldrb	r3, [r5, #3]
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8001736:	b292      	uxth	r2, r2
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001738:	061b      	lsls	r3, r3, #24
 800173a:	18c9      	adds	r1, r1, r3
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 800173c:	f000 fe42 	bl	80023c4 <UI_ExecSpeedRamp>
 8001740:	e707      	b.n	8001552 <MCP_ReceivedFrame+0x15a>
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001742:	796b      	ldrb	r3, [r5, #5]
 8001744:	792a      	ldrb	r2, [r5, #4]
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001746:	7869      	ldrb	r1, [r5, #1]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001748:	021b      	lsls	r3, r3, #8
 800174a:	18d2      	adds	r2, r2, r3
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 800174c:	782b      	ldrb	r3, [r5, #0]
 800174e:	0209      	lsls	r1, r1, #8
 8001750:	18c9      	adds	r1, r1, r3
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8001752:	0020      	movs	r0, r4
 8001754:	b292      	uxth	r2, r2
 8001756:	b209      	sxth	r1, r1
 8001758:	f000 fe47 	bl	80023ea <UI_ExecTorqueRamp>
 800175c:	e6f9      	b.n	8001552 <MCP_ReceivedFrame+0x15a>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 800175e:	7829      	ldrb	r1, [r5, #0]
 8001760:	250e      	movs	r5, #14
 8001762:	220a      	movs	r2, #10
 8001764:	ab02      	add	r3, sp, #8
 8001766:	18ed      	adds	r5, r5, r3
 8001768:	af05      	add	r7, sp, #20
 800176a:	a802      	add	r0, sp, #8
 800176c:	003b      	movs	r3, r7
 800176e:	9500      	str	r5, [sp, #0]
 8001770:	1812      	adds	r2, r2, r0
 8001772:	0020      	movs	r0, r4
 8001774:	f000 fe44 	bl	8002400 <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001778:	2300      	movs	r3, #0
 800177a:	5efa      	ldrsh	r2, [r7, r3]
 800177c:	2306      	movs	r3, #6
 800177e:	4353      	muls	r3, r2
      outBuff[0] = (uint8_t)(rpm);
 8001780:	aa06      	add	r2, sp, #24
      outBuff[1] = (uint8_t)(rpm >> 8);
 8001782:	1219      	asrs	r1, r3, #8
      outBuff[0] = (uint8_t)(rpm);
 8001784:	7013      	strb	r3, [r2, #0]
      outBuff[1] = (uint8_t)(rpm >> 8);
 8001786:	7051      	strb	r1, [r2, #1]
      outBuff[2] = (uint8_t)(rpm >> 16);
 8001788:	1419      	asrs	r1, r3, #16
      outBuff[3] = (uint8_t)(rpm >> 24);
 800178a:	161b      	asrs	r3, r3, #24
      outBuff[2] = (uint8_t)(rpm >> 16);
 800178c:	7091      	strb	r1, [r2, #2]
      outBuff[3] = (uint8_t)(rpm >> 24);
 800178e:	70d3      	strb	r3, [r2, #3]
      outBuff[4] = (uint8_t)(FinalTorque);
 8001790:	2100      	movs	r1, #0
 8001792:	5e6b      	ldrsh	r3, [r5, r1]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8001794:	6b20      	ldr	r0, [r4, #48]	; 0x30
      outBuff[4] = (uint8_t)(FinalTorque);
 8001796:	7113      	strb	r3, [r2, #4]
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8001798:	121b      	asrs	r3, r3, #8
 800179a:	7153      	strb	r3, [r2, #5]
      outBuff[6] = (uint8_t)(Durationms);
 800179c:	ab02      	add	r3, sp, #8
 800179e:	895b      	ldrh	r3, [r3, #10]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 80017a0:	21f0      	movs	r1, #240	; 0xf0
      outBuff[6] = (uint8_t)(Durationms);
 80017a2:	7193      	strb	r3, [r2, #6]
      outBuff[7] = (uint8_t)(Durationms >> 8);
 80017a4:	0a1b      	lsrs	r3, r3, #8
 80017a6:	71d3      	strb	r3, [r2, #7]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 80017a8:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80017aa:	2308      	movs	r3, #8
 80017ac:	47a8      	blx	r5
  if (RequireAck)
 80017ae:	e6dd      	b.n	800156c <MCP_ReceivedFrame+0x174>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80017b0:	78a8      	ldrb	r0, [r5, #2]
 80017b2:	786b      	ldrb	r3, [r5, #1]
 80017b4:	0200      	lsls	r0, r0, #8
 80017b6:	18c0      	adds	r0, r0, r3
 80017b8:	78eb      	ldrb	r3, [r5, #3]
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80017ba:	2106      	movs	r1, #6
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80017bc:	041b      	lsls	r3, r3, #16
 80017be:	18c0      	adds	r0, r0, r3
 80017c0:	792b      	ldrb	r3, [r5, #4]
 80017c2:	061b      	lsls	r3, r3, #24
 80017c4:	18c0      	adds	r0, r0, r3
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80017c6:	f7fe fd51 	bl	800026c <__divsi3>
      hDurationms = buffer[7] + (buffer[8] << 8);
 80017ca:	7a29      	ldrb	r1, [r5, #8]
 80017cc:	79ea      	ldrb	r2, [r5, #7]
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 80017ce:	b203      	sxth	r3, r0
      hDurationms = buffer[7] + (buffer[8] << 8);
 80017d0:	0209      	lsls	r1, r1, #8
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80017d2:	79a8      	ldrb	r0, [r5, #6]
      hDurationms = buffer[7] + (buffer[8] << 8);
 80017d4:	1852      	adds	r2, r2, r1
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 80017d6:	7829      	ldrb	r1, [r5, #0]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80017d8:	796d      	ldrb	r5, [r5, #5]
 80017da:	0200      	lsls	r0, r0, #8
 80017dc:	182d      	adds	r5, r5, r0
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 80017de:	b22d      	sxth	r5, r5
 80017e0:	0020      	movs	r0, r4
 80017e2:	b292      	uxth	r2, r2
 80017e4:	9500      	str	r5, [sp, #0]
 80017e6:	f000 fe2a 	bl	800243e <UI_SetRevupData>
 80017ea:	e6b2      	b.n	8001552 <MCP_ReceivedFrame+0x15a>
      hIdRef = buffer[2] + (buffer[3] << 8);
 80017ec:	78eb      	ldrb	r3, [r5, #3]
 80017ee:	78aa      	ldrb	r2, [r5, #2]
 80017f0:	021b      	lsls	r3, r3, #8
 80017f2:	18d2      	adds	r2, r2, r3
      hIqRef = buffer[0] + (buffer[1] << 8);
 80017f4:	786b      	ldrb	r3, [r5, #1]
 80017f6:	7829      	ldrb	r1, [r5, #0]
 80017f8:	021b      	lsls	r3, r3, #8
 80017fa:	18c9      	adds	r1, r1, r3
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 80017fc:	0020      	movs	r0, r4
 80017fe:	b212      	sxth	r2, r2
 8001800:	b209      	sxth	r1, r1
 8001802:	f000 fe39 	bl	8002478 <UI_SetCurrentReferences>
      bNoError = true;
 8001806:	e6af      	b.n	8001568 <MCP_ReceivedFrame+0x170>
      stepList.len = Size;
 8001808:	9b03      	ldr	r3, [sp, #12]
      stepList.data = buffer;
 800180a:	a806      	add	r0, sp, #24
 800180c:	9506      	str	r5, [sp, #24]
      stepList.len = Size;
 800180e:	7103      	strb	r3, [r0, #4]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001810:	230e      	movs	r3, #14
 8001812:	aa02      	add	r2, sp, #8
 8001814:	189b      	adds	r3, r3, r2
 8001816:	220c      	movs	r2, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001818:	4d10      	ldr	r5, [pc, #64]	; (800185c <MCP_ReceivedFrame+0x464>)
      bErrorCode = ERROR_MP_NOT_ENABLED;
 800181a:	701a      	strb	r2, [r3, #0]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 800181c:	0029      	movs	r1, r5
 800181e:	f000 fe39 	bl	8002494 <UI_GetMPInfo>
 8001822:	7030      	strb	r0, [r6, #0]
      if (bNoError)
 8001824:	2800      	cmp	r0, #0
 8001826:	d100      	bne.n	800182a <MCP_ReceivedFrame+0x432>
 8001828:	e6a0      	b.n	800156c <MCP_ReceivedFrame+0x174>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 800182a:	21f0      	movs	r1, #240	; 0xf0
 800182c:	792b      	ldrb	r3, [r5, #4]
 800182e:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8001830:	682a      	ldr	r2, [r5, #0]
 8001832:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001834:	47b0      	blx	r6
}
 8001836:	b00f      	add	sp, #60	; 0x3c
 8001838:	bdf0      	pop	{r4, r5, r6, r7, pc}
        outBuff[i] = pHandle->s_fwVer[i];
 800183a:	5429      	strb	r1, [r5, r0]
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 800183c:	3001      	adds	r0, #1
 800183e:	2820      	cmp	r0, #32
 8001840:	d000      	beq.n	8001844 <MCP_ReceivedFrame+0x44c>
 8001842:	e61d      	b.n	8001480 <MCP_ReceivedFrame+0x88>
 8001844:	e760      	b.n	8001708 <MCP_ReceivedFrame+0x310>
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001846:	230e      	movs	r3, #14
 8001848:	aa02      	add	r2, sp, #8
 800184a:	189b      	adds	r3, r3, r2
 800184c:	2201      	movs	r2, #1
 800184e:	e610      	b.n	8001472 <MCP_ReceivedFrame+0x7a>
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 8001850:	220e      	movs	r2, #14
 8001852:	a902      	add	r1, sp, #8
 8001854:	1852      	adds	r2, r2, r1
 8001856:	2301      	movs	r3, #1
 8001858:	21ff      	movs	r1, #255	; 0xff
 800185a:	e703      	b.n	8001664 <MCP_ReceivedFrame+0x26c>
 800185c:	20000970 	.word	0x20000970

08001860 <MCP_WaitNextFrame>:
{
 8001860:	b510      	push	{r4, lr}
 8001862:	0004      	movs	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001864:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001866:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001868:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 800186a:	0023      	movs	r3, r4
 800186c:	2280      	movs	r2, #128	; 0x80
 800186e:	33c8      	adds	r3, #200	; 0xc8
 8001870:	701a      	strb	r2, [r3, #0]
  pHandle->fFcpReceive(pHandle->pFCP);
 8001872:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001874:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001876:	4798      	blx	r3
}
 8001878:	bd10      	pop	{r4, pc}
	...

0800187c <MCP_Init>:
{
 800187c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800187e:	0004      	movs	r4, r0
 8001880:	001d      	movs	r5, r3
  pHandle->pDAC = pDAC;
 8001882:	0023      	movs	r3, r4
{
 8001884:	0016      	movs	r6, r2
  pHandle->pDAC = pDAC;
 8001886:	9a07      	ldr	r2, [sp, #28]
 8001888:	33c4      	adds	r3, #196	; 0xc4
  pHandle->pFCP = pFCP;
 800188a:	6321      	str	r1, [r4, #48]	; 0x30
  pHandle->pDAC = pDAC;
 800188c:	601a      	str	r2, [r3, #0]
  pHandle->s_fwVer = s_fwVer;
 800188e:	9a08      	ldr	r2, [sp, #32]
 8001890:	3b04      	subs	r3, #4
 8001892:	601a      	str	r2, [r3, #0]
  FCP_SetClient( pFCP, pHandle,
 8001894:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <MCP_Init+0x38>)
{
 8001896:	0008      	movs	r0, r1
  FCP_SetClient( pFCP, pHandle,
 8001898:	4a07      	ldr	r2, [pc, #28]	; (80018b8 <MCP_Init+0x3c>)
 800189a:	0021      	movs	r1, r4
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <MCP_Init+0x40>)
 80018a0:	f002 fc8e 	bl	80041c0 <FCP_SetClient>
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 80018a4:	9b06      	ldr	r3, [sp, #24]
  pHandle->fFcpSend = fFcpSend;
 80018a6:	6366      	str	r6, [r4, #52]	; 0x34
  pHandle->fFcpReceive = fFcpReceive;
 80018a8:	63a5      	str	r5, [r4, #56]	; 0x38
  MCP_WaitNextFrame(pHandle);
 80018aa:	0020      	movs	r0, r4
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 80018ac:	63e3      	str	r3, [r4, #60]	; 0x3c
  MCP_WaitNextFrame(pHandle);
 80018ae:	f7ff ffd7 	bl	8001860 <MCP_WaitNextFrame>
}
 80018b2:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 80018b4:	080018c1 	.word	0x080018c1
 80018b8:	080018c9 	.word	0x080018c9
 80018bc:	080013f9 	.word	0x080013f9

080018c0 <MCP_OnTimeOut>:
{
 80018c0:	b510      	push	{r4, lr}
     MCP_WaitNextFrame(pHandle);
 80018c2:	f7ff ffcd 	bl	8001860 <MCP_WaitNextFrame>
}
 80018c6:	bd10      	pop	{r4, pc}

080018c8 <MCP_SentFrame>:
{
 80018c8:	b510      	push	{r4, lr}
    MCP_WaitNextFrame(pHandle);
 80018ca:	f7ff ffc9 	bl	8001860 <MCP_WaitNextFrame>
}
 80018ce:	bd10      	pop	{r4, pc}

080018d0 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 80018d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 80018d2:	f001 fd71 	bl	80033b8 <HAL_RCC_GetHCLKFreq>
 80018d6:	21fa      	movs	r1, #250	; 0xfa
 80018d8:	00c9      	lsls	r1, r1, #3
 80018da:	f7fe fc3d 	bl	8000158 <__udivsi3>
 80018de:	f001 f9a3 	bl	8002c28 <HAL_SYSTICK_Config>
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 80018e2:	4d08      	ldr	r5, [pc, #32]	; (8001904 <MX_MotorControl_Init+0x34>)
 80018e4:	4c08      	ldr	r4, [pc, #32]	; (8001908 <MX_MotorControl_Init+0x38>)
 80018e6:	0029      	movs	r1, r5
 80018e8:	0020      	movs	r0, r4
 80018ea:	f7ff fa7d 	bl	8000de8 <MCboot>
  mc_lock_pins();
 80018ee:	f7ff fd3d 	bl	800136c <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <MX_MotorControl_Init+0x3c>)
 80018f4:	0022      	movs	r2, r4
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	2101      	movs	r1, #1
 80018fa:	002b      	movs	r3, r5
 80018fc:	4804      	ldr	r0, [pc, #16]	; (8001910 <MX_MotorControl_Init+0x40>)
 80018fe:	f000 fbd9 	bl	80020b4 <UI_TaskInit>
}
 8001902:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8001904:	2000097c 	.word	0x2000097c
 8001908:	20000978 	.word	0x20000978
 800190c:	080066c8 	.word	0x080066c8
 8001910:	20000614 	.word	0x20000614

08001914 <RCM_RegisterRegConv>:
  *         Contains ADC, Channel and sampling time to be used.
  *
  *  @retval the handle of the registered conversion or 255 if the registration failed
  */
uint8_t RCM_RegisterRegConv(RegConv_t * regConv)
{
 8001914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001916:	0002      	movs	r2, r0
  uint8_t handle=255;
  uint8_t i=0;
 8001918:	2300      	movs	r3, #0
  uint8_t handle=255;
 800191a:	20ff      	movs	r0, #255	; 0xff
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
            (RCM_handle_array [i]->regADC == regConv->regADC))
          {
           handle =i; /* Reuse the same handle */
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
 800191c:	2704      	movs	r7, #4
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800191e:	4e1d      	ldr	r6, [pc, #116]	; (8001994 <RCM_RegisterRegConv+0x80>)
 8001920:	0099      	lsls	r1, r3, #2
 8001922:	5989      	ldr	r1, [r1, r6]
 8001924:	2900      	cmp	r1, #0
 8001926:	d12a      	bne.n	800197e <RCM_RegisterRegConv+0x6a>
 8001928:	2804      	cmp	r0, #4
 800192a:	d900      	bls.n	800192e <RCM_RegisterRegConv+0x1a>
 800192c:	0018      	movs	r0, r3
          }
      }
      i++;
 800192e:	3301      	adds	r3, #1
 8001930:	b2db      	uxtb	r3, r3
    while (i < RCM_MAX_CONV)
 8001932:	2b03      	cmp	r3, #3
 8001934:	d9f4      	bls.n	8001920 <RCM_RegisterRegConv+0xc>
    }
    if (handle < RCM_MAX_CONV )
 8001936:	2803      	cmp	r0, #3
 8001938:	d820      	bhi.n	800197c <RCM_RegisterRegConv+0x68>
    {
      RCM_handle_array [handle] = regConv;
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 800193a:	2400      	movs	r4, #0
      RCM_handle_array [handle] = regConv;
 800193c:	0083      	lsls	r3, r0, #2
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 800193e:	4916      	ldr	r1, [pc, #88]	; (8001998 <RCM_RegisterRegConv+0x84>)
      RCM_handle_array [handle] = regConv;
 8001940:	50f2      	str	r2, [r6, r3]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8001942:	00c3      	lsls	r3, r0, #3
 8001944:	505c      	str	r4, [r3, r1]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8001946:	6813      	ldr	r3, [r2, #0]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	07d2      	lsls	r2, r2, #31
 800194c:	d40e      	bmi.n	800196c <RCM_RegisterRegConv+0x58>
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800194e:	2480      	movs	r4, #128	; 0x80
 8001950:	689d      	ldr	r5, [r3, #8]
 8001952:	4912      	ldr	r1, [pc, #72]	; (800199c <RCM_RegisterRegConv+0x88>)
 8001954:	0624      	lsls	r4, r4, #24
 8001956:	400d      	ands	r5, r1
 8001958:	432c      	orrs	r4, r5
 800195a:	609c      	str	r4, [r3, #8]
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 800195c:	689a      	ldr	r2, [r3, #8]
      {

        LL_ADC_StartCalibration( regConv->regADC);
        while ( LL_ADC_IsCalibrationOnGoing( regConv->regADC ) )
 800195e:	2a00      	cmp	r2, #0
 8001960:	dbfc      	blt.n	800195c <RCM_RegisterRegConv+0x48>
  MODIFY_REG(ADCx->CR,
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	4011      	ands	r1, r2
 8001966:	2201      	movs	r2, #1
 8001968:	430a      	orrs	r2, r1
 800196a:	609a      	str	r2, [r3, #8]
      }
      else
      {
      }
      /* conversion handler is created, will be enabled by the first call to RCM_ExecRegularConv*/
      RCM_NoInj_array [handle].enable = false;
 800196c:	2206      	movs	r2, #6
 800196e:	2100      	movs	r1, #0
 8001970:	4342      	muls	r2, r0
 8001972:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <RCM_RegisterRegConv+0x8c>)
 8001974:	54d1      	strb	r1, [r2, r3]
      RCM_NoInj_array [handle].next = handle;
 8001976:	189b      	adds	r3, r3, r2
 8001978:	7158      	strb	r0, [r3, #5]
      RCM_NoInj_array [handle].prev = handle;
 800197a:	7118      	strb	r0, [r3, #4]
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 800197c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800197e:	790d      	ldrb	r5, [r1, #4]
 8001980:	7914      	ldrb	r4, [r2, #4]
 8001982:	42a5      	cmp	r5, r4
 8001984:	d1d3      	bne.n	800192e <RCM_RegisterRegConv+0x1a>
 8001986:	6809      	ldr	r1, [r1, #0]
 8001988:	6814      	ldr	r4, [r2, #0]
 800198a:	42a1      	cmp	r1, r4
 800198c:	d1cf      	bne.n	800192e <RCM_RegisterRegConv+0x1a>
 800198e:	0018      	movs	r0, r3
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
 8001990:	003b      	movs	r3, r7
 8001992:	e7cc      	b.n	800192e <RCM_RegisterRegConv+0x1a>
 8001994:	200009c0 	.word	0x200009c0
 8001998:	20000980 	.word	0x20000980
 800199c:	7fffffe8 	.word	0x7fffffe8
 80019a0:	200009a0 	.word	0x200009a0

080019a4 <RCM_ExecRegularConv>:
 * Otherwise, the latest stored conversion result will be returned.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
 80019a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t retVal;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (RCM_NoInj_array [handle].enable == false)
 80019a6:	2606      	movs	r6, #6
 80019a8:	0034      	movs	r4, r6
 80019aa:	4344      	muls	r4, r0
 80019ac:	4a40      	ldr	r2, [pc, #256]	; (8001ab0 <RCM_ExecRegularConv+0x10c>)
 80019ae:	5ca3      	ldrb	r3, [r4, r2]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d132      	bne.n	8001a1a <RCM_ExecRegularConv+0x76>
  uint8_t LastEnable = RCM_MAX_CONV;
 80019b4:	2504      	movs	r5, #4
      {
        if (RCM_NoInj_array [i].next > handle)
        /* We found a previous reg conv to link with */
        {
          formerNext = RCM_NoInj_array [i].next;
          RCM_NoInj_array [handle].next = formerNext;
 80019b6:	1914      	adds	r4, r2, r4
      if (RCM_NoInj_array [i].enable == true)
 80019b8:	0037      	movs	r7, r6
 80019ba:	435f      	muls	r7, r3
 80019bc:	5dd1      	ldrb	r1, [r2, r7]
 80019be:	2900      	cmp	r1, #0
 80019c0:	d00a      	beq.n	80019d8 <RCM_ExecRegularConv+0x34>
        if (RCM_NoInj_array [i].next > handle)
 80019c2:	19d7      	adds	r7, r2, r7
 80019c4:	7979      	ldrb	r1, [r7, #5]
 80019c6:	4281      	cmp	r1, r0
 80019c8:	d969      	bls.n	8001a9e <RCM_ExecRegularConv+0xfa>
          RCM_NoInj_array [handle].prev = i;
 80019ca:	7123      	strb	r3, [r4, #4]
          RCM_NoInj_array [i].next = handle;
          RCM_NoInj_array [formerNext].prev = handle;
          i= RCM_MAX_CONV; /* stop the loop, handler inserted*/
 80019cc:	2304      	movs	r3, #4
          RCM_NoInj_array [handle].next = formerNext;
 80019ce:	7161      	strb	r1, [r4, #5]
          RCM_NoInj_array [formerNext].prev = handle;
 80019d0:	4371      	muls	r1, r6
 80019d2:	1851      	adds	r1, r2, r1
          RCM_NoInj_array [i].next = handle;
 80019d4:	7178      	strb	r0, [r7, #5]
          RCM_NoInj_array [formerNext].prev = handle;
 80019d6:	7108      	strb	r0, [r1, #4]
        }
      }
      else
      { /* nothing to do */
      }
      i++;
 80019d8:	3301      	adds	r3, #1
 80019da:	b2db      	uxtb	r3, r3
      if (i == RCM_MAX_CONV)
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d163      	bne.n	8001aa8 <RCM_ExecRegularConv+0x104>
      /* We reach end of the array without handler inserted*/
      {
       if (LastEnable != RCM_MAX_CONV )
 80019e0:	2d04      	cmp	r5, #4
 80019e2:	d05e      	beq.n	8001aa2 <RCM_ExecRegularConv+0xfe>
       /* we find a regular conversion with smaller position to be linked with */
       {
         formerNext = RCM_NoInj_array [LastEnable].next;
 80019e4:	3302      	adds	r3, #2
 80019e6:	0019      	movs	r1, r3
         RCM_NoInj_array [handle].next = formerNext;
 80019e8:	001c      	movs	r4, r3
         formerNext = RCM_NoInj_array [LastEnable].next;
 80019ea:	4369      	muls	r1, r5
 80019ec:	1851      	adds	r1, r2, r1
 80019ee:	794e      	ldrb	r6, [r1, #5]
         RCM_NoInj_array [handle].next = formerNext;
 80019f0:	4344      	muls	r4, r0
         RCM_NoInj_array [handle].prev = LastEnable;
         RCM_NoInj_array [LastEnable].next = handle;
         RCM_NoInj_array [formerNext].prev = handle;
 80019f2:	4373      	muls	r3, r6
         RCM_NoInj_array [handle].next = formerNext;
 80019f4:	1914      	adds	r4, r2, r4
         RCM_NoInj_array [formerNext].prev = handle;
 80019f6:	18d3      	adds	r3, r2, r3
         RCM_NoInj_array [handle].next = formerNext;
 80019f8:	7166      	strb	r6, [r4, #5]
         RCM_NoInj_array [handle].prev = LastEnable;
 80019fa:	7125      	strb	r5, [r4, #4]
         RCM_NoInj_array [LastEnable].next = handle;
 80019fc:	7148      	strb	r0, [r1, #5]
         RCM_NoInj_array [formerNext].prev = handle;
 80019fe:	7118      	strb	r0, [r3, #4]
      {
       /* Nothing to do we are parsing the array, nothing inserted yet*/
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array [handle].enable = true;
 8001a00:	2306      	movs	r3, #6
 8001a02:	0019      	movs	r1, r3
 8001a04:	2401      	movs	r4, #1
 8001a06:	4341      	muls	r1, r0
 8001a08:	5254      	strh	r4, [r2, r1]
    RCM_NoInj_array [handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8001a0a:	492a      	ldr	r1, [pc, #168]	; (8001ab4 <RCM_ExecRegularConv+0x110>)
 8001a0c:	780c      	ldrb	r4, [r1, #0]
 8001a0e:	4363      	muls	r3, r4
 8001a10:	18d3      	adds	r3, r2, r3
 8001a12:	785b      	ldrb	r3, [r3, #1]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d000      	beq.n	8001a1a <RCM_ExecRegularConv+0x76>
    {/* select the new conversion to be the next scheduled only if a conversion is not ongoing*/
      RCM_currentHandle = handle;
 8001a18:	7008      	strb	r0, [r1, #0]
  }
  else
  {
  /* Nothing to do the current handle is already scheduled */
  }
  if (PWM_Handle_M1.ADCRegularLocked == false)
 8001a1a:	4b27      	ldr	r3, [pc, #156]	; (8001ab8 <RCM_ExecRegularConv+0x114>)
 8001a1c:	3377      	adds	r3, #119	; 0x77
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d136      	bne.n	8001a92 <RCM_ExecRegularConv+0xee>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8001a24:	2603      	movs	r6, #3
  /* The ADC is free to be used asynchronously*/
  {
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[handle]->regADC, LL_ADC_REG_DMA_TRANSFER_NONE);
 8001a26:	4c25      	ldr	r4, [pc, #148]	; (8001abc <RCM_ExecRegularConv+0x118>)
 8001a28:	0083      	lsls	r3, r0, #2
 8001a2a:	591d      	ldr	r5, [r3, r4]
 8001a2c:	682b      	ldr	r3, [r5, #0]
 8001a2e:	68d9      	ldr	r1, [r3, #12]
 8001a30:	43b1      	bics	r1, r6
 8001a32:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8001a34:	68d9      	ldr	r1, [r3, #12]
 8001a36:	4e22      	ldr	r6, [pc, #136]	; (8001ac0 <RCM_ExecRegularConv+0x11c>)
 8001a38:	4031      	ands	r1, r6
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8001a3a:	2607      	movs	r6, #7
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8001a3c:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8001a3e:	6959      	ldr	r1, [r3, #20]
 8001a40:	43b1      	bics	r1, r6
 8001a42:	68ae      	ldr	r6, [r5, #8]
 8001a44:	4331      	orrs	r1, r6
 8001a46:	6159      	str	r1, [r3, #20]
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001a48:	2180      	movs	r1, #128	; 0x80
    /* Disabling External Trigger of ADC */
    LL_ADC_REG_SetTriggerSource (RCM_handle_array[handle]->regADC, LL_ADC_REG_TRIG_SOFTWARE);

    /* Set Sampling time and channel */
    LL_ADC_SetSamplingTimeCommonChannels (RCM_handle_array[handle]->regADC,  RCM_handle_array[handle]->samplingTime );
    LL_ADC_REG_SetSequencerChannels (RCM_handle_array[handle]->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel) );
 8001a4a:	792d      	ldrb	r5, [r5, #4]
 8001a4c:	0189      	lsls	r1, r1, #6
 8001a4e:	40a9      	lsls	r1, r5
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001a50:	2504      	movs	r5, #4
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001a52:	0b49      	lsrs	r1, r1, #13
 8001a54:	6299      	str	r1, [r3, #40]	; 0x28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001a56:	601d      	str	r5, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8001a58:	6899      	ldr	r1, [r3, #8]
 8001a5a:	4e1a      	ldr	r6, [pc, #104]	; (8001ac4 <RCM_ExecRegularConv+0x120>)
 8001a5c:	4031      	ands	r1, r6
 8001a5e:	4329      	orrs	r1, r5
 8001a60:	6099      	str	r1, [r3, #8]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8001a62:	6819      	ldr	r1, [r3, #0]

    /* Start ADC conversion */
    LL_ADC_REG_StartConversion( RCM_handle_array[handle]->regADC );

    /* Wait EOC */
    while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == RESET )
 8001a64:	4229      	tst	r1, r5
 8001a66:	d0fc      	beq.n	8001a62 <RCM_ExecRegularConv+0xbe>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001a68:	6c19      	ldr	r1, [r3, #64]	; 0x40
    {
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array [handle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 8001a6a:	2306      	movs	r3, #6
 8001a6c:	4343      	muls	r3, r0
 8001a6e:	18d2      	adds	r2, r2, r3
 8001a70:	8051      	strh	r1, [r2, #2]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8001a72:	2103      	movs	r1, #3
    LL_ADC_REG_SetDMATransfer( RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED );
 8001a74:	4d0f      	ldr	r5, [pc, #60]	; (8001ab4 <RCM_ExecRegularConv+0x110>)
 8001a76:	782b      	ldrb	r3, [r5, #0]
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	58e3      	ldr	r3, [r4, r3]
 8001a7c:	681c      	ldr	r4, [r3, #0]
 8001a7e:	68e3      	ldr	r3, [r4, #12]
 8001a80:	438b      	bics	r3, r1
 8001a82:	0019      	movs	r1, r3
 8001a84:	2301      	movs	r3, #1
 8001a86:	430b      	orrs	r3, r1
 8001a88:	60e3      	str	r3, [r4, #12]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 8001a8a:	7953      	ldrb	r3, [r2, #5]
 8001a8c:	702b      	strb	r3, [r5, #0]
    RCM_NoInj_array [handle].status = valid;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	7053      	strb	r3, [r2, #1]
  }
  retVal = RCM_NoInj_array [handle].value;
 8001a92:	2306      	movs	r3, #6
 8001a94:	4343      	muls	r3, r0
 8001a96:	4806      	ldr	r0, [pc, #24]	; (8001ab0 <RCM_ExecRegularConv+0x10c>)
 8001a98:	18c0      	adds	r0, r0, r3
return retVal;
 8001a9a:	8840      	ldrh	r0, [r0, #2]
}
 8001a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a9e:	001d      	movs	r5, r3
 8001aa0:	e79a      	b.n	80019d8 <RCM_ExecRegularConv+0x34>
         RCM_currentHandle = handle;
 8001aa2:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <RCM_ExecRegularConv+0x110>)
 8001aa4:	7018      	strb	r0, [r3, #0]
    while (i < RCM_MAX_CONV)
 8001aa6:	e7ab      	b.n	8001a00 <RCM_ExecRegularConv+0x5c>
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d800      	bhi.n	8001aae <RCM_ExecRegularConv+0x10a>
 8001aac:	e784      	b.n	80019b8 <RCM_ExecRegularConv+0x14>
 8001aae:	e7a7      	b.n	8001a00 <RCM_ExecRegularConv+0x5c>
 8001ab0:	200009a0 	.word	0x200009a0
 8001ab4:	200009bc 	.word	0x200009bc
 8001ab8:	20000350 	.word	0x20000350
 8001abc:	200009c0 	.word	0x200009c0
 8001ac0:	fffff23f 	.word	0xfffff23f
 8001ac4:	7fffffe8 	.word	0x7fffffe8

08001ac8 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8001ac8:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8001aca:	4c10      	ldr	r4, [pc, #64]	; (8001b0c <RCM_ExecUserConv+0x44>)
 8001acc:	7823      	ldrb	r3, [r4, #0]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d11a      	bne.n	8001b08 <RCM_ExecUserConv+0x40>
  {
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001ad2:	4d0f      	ldr	r5, [pc, #60]	; (8001b10 <RCM_ExecUserConv+0x48>)
 8001ad4:	7828      	ldrb	r0, [r5, #0]
 8001ad6:	f7ff ff65 	bl	80019a4 <RCM_ExecRegularConv>
    /* Regular conversion is read from RCM_NoInj_array but we must take care that first conversion is done*/
    /* status could also be ongoing, but decision is taken to provide previous conversion */
    /* instead of waiting for RCM_NoInj_array [RCM_UserConvHandle].status == valid */
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8001ada:	2206      	movs	r2, #6
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001adc:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <RCM_ExecUserConv+0x4c>)
 8001ade:	0001      	movs	r1, r0
 8001ae0:	8018      	strh	r0, [r3, #0]
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8001ae2:	7828      	ldrb	r0, [r5, #0]
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <RCM_ExecUserConv+0x50>)
 8001ae6:	4342      	muls	r2, r0
 8001ae8:	189b      	adds	r3, r3, r2
 8001aea:	785b      	ldrb	r3, [r3, #1]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <RCM_ExecUserConv+0x2c>
    {
      RCM_UserConvState = RCM_USERCONV_EOC;
 8001af0:	2302      	movs	r3, #2
 8001af2:	7023      	strb	r3, [r4, #0]
    }
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001af4:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <RCM_ExecUserConv+0x54>)
 8001af6:	00c2      	lsls	r2, r0, #3
 8001af8:	58d5      	ldr	r5, [r2, r3]
 8001afa:	2d00      	cmp	r5, #0
 8001afc:	d004      	beq.n	8001b08 <RCM_ExecUserConv+0x40>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8001afe:	2600      	movs	r6, #0
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001b00:	189b      	adds	r3, r3, r2
 8001b02:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8001b04:	7026      	strb	r6, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001b06:	47a8      	blx	r5
    }
  }
}
 8001b08:	bd70      	pop	{r4, r5, r6, pc}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	200009b9 	.word	0x200009b9
 8001b10:	200009b8 	.word	0x200009b8
 8001b14:	200009ba 	.word	0x200009ba
 8001b18:	200009a0 	.word	0x200009a0
 8001b1c:	20000980 	.word	0x20000980

08001b20 <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv (void)
{
  if (RCM_NoInj_array [RCM_currentHandle].enable == true)
 8001b20:	2006      	movs	r0, #6
 8001b22:	0002      	movs	r2, r0
{
 8001b24:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (RCM_NoInj_array [RCM_currentHandle].enable == true)
 8001b26:	4d17      	ldr	r5, [pc, #92]	; (8001b84 <RCM_ExecNextConv+0x64>)
 8001b28:	4917      	ldr	r1, [pc, #92]	; (8001b88 <RCM_ExecNextConv+0x68>)
 8001b2a:	782b      	ldrb	r3, [r5, #0]
 8001b2c:	435a      	muls	r2, r3
 8001b2e:	5c52      	ldrb	r2, [r2, r1]
 8001b30:	2a00      	cmp	r2, #0
 8001b32:	d026      	beq.n	8001b82 <RCM_ExecNextConv+0x62>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001b34:	2404      	movs	r4, #4
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8001b36:	2703      	movs	r7, #3
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped.*/

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC );
 8001b38:	4a14      	ldr	r2, [pc, #80]	; (8001b8c <RCM_ExecNextConv+0x6c>)
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	589b      	ldr	r3, [r3, r2]
 8001b3e:	681b      	ldr	r3, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001b40:	601c      	str	r4, [r3, #0]
    /* Disabling ADC DMA request  */
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_NONE);
 8001b42:	782d      	ldrb	r5, [r5, #0]
 8001b44:	00ab      	lsls	r3, r5, #2
 8001b46:	589e      	ldr	r6, [r3, r2]
    /* Set Sampling time and channel of ADC for Regular Conversion */
    LL_ADC_SetSamplingTimeCommonChannels (RCM_handle_array[RCM_currentHandle]->regADC,  RCM_handle_array[RCM_currentHandle]->samplingTime );
    LL_ADC_REG_SetSequencerChannels (RCM_handle_array[RCM_currentHandle]->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel) );
    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion( RCM_handle_array[RCM_currentHandle]->regADC );
    RCM_NoInj_array [RCM_currentHandle].status = ongoing;
 8001b48:	4368      	muls	r0, r5
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_NONE);
 8001b4a:	6833      	ldr	r3, [r6, #0]
    RCM_NoInj_array [RCM_currentHandle].status = ongoing;
 8001b4c:	1809      	adds	r1, r1, r0
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8001b4e:	68da      	ldr	r2, [r3, #12]
 8001b50:	43ba      	bics	r2, r7
 8001b52:	60da      	str	r2, [r3, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	4f0e      	ldr	r7, [pc, #56]	; (8001b90 <RCM_ExecNextConv+0x70>)
 8001b58:	403a      	ands	r2, r7
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8001b5a:	2707      	movs	r7, #7
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8001b5c:	60da      	str	r2, [r3, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8001b5e:	695a      	ldr	r2, [r3, #20]
 8001b60:	43ba      	bics	r2, r7
 8001b62:	68b7      	ldr	r7, [r6, #8]
 8001b64:	433a      	orrs	r2, r7
 8001b66:	615a      	str	r2, [r3, #20]
    LL_ADC_REG_SetSequencerChannels (RCM_handle_array[RCM_currentHandle]->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel) );
 8001b68:	7932      	ldrb	r2, [r6, #4]
 8001b6a:	2601      	movs	r6, #1
 8001b6c:	0037      	movs	r7, r6
 8001b6e:	4097      	lsls	r7, r2
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001b70:	037a      	lsls	r2, r7, #13
 8001b72:	0b52      	lsrs	r2, r2, #13
 8001b74:	629a      	str	r2, [r3, #40]	; 0x28
  MODIFY_REG(ADCx->CR,
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	4f06      	ldr	r7, [pc, #24]	; (8001b94 <RCM_ExecNextConv+0x74>)
 8001b7a:	403a      	ands	r2, r7
 8001b7c:	4314      	orrs	r4, r2
 8001b7e:	609c      	str	r4, [r3, #8]
    RCM_NoInj_array [RCM_currentHandle].status = ongoing;
 8001b80:	704e      	strb	r6, [r1, #1]
  }
  else
  {
  /* nothing to do, conversion not enabled have already notvalid status */
  }
}
 8001b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b84:	200009bc 	.word	0x200009bc
 8001b88:	200009a0 	.word	0x200009a0
 8001b8c:	200009c0 	.word	0x200009c0
 8001b90:	fffff23f 	.word	0xfffff23f
 8001b94:	7fffffe8 	.word	0x7fffffe8

08001b98 <RCM_ReadOngoingConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv (void)
{
  if ( RCM_NoInj_array [RCM_currentHandle].status == ongoing &&
 8001b98:	2306      	movs	r3, #6
{
 8001b9a:	b570      	push	{r4, r5, r6, lr}
  if ( RCM_NoInj_array [RCM_currentHandle].status == ongoing &&
 8001b9c:	490e      	ldr	r1, [pc, #56]	; (8001bd8 <RCM_ReadOngoingConv+0x40>)
 8001b9e:	480f      	ldr	r0, [pc, #60]	; (8001bdc <RCM_ReadOngoingConv+0x44>)
 8001ba0:	780c      	ldrb	r4, [r1, #0]
 8001ba2:	4363      	muls	r3, r4
 8001ba4:	18c3      	adds	r3, r0, r3
 8001ba6:	785e      	ldrb	r6, [r3, #1]
 8001ba8:	2e01      	cmp	r6, #1
 8001baa:	d10f      	bne.n	8001bcc <RCM_ReadOngoingConv+0x34>
      LL_ADC_IsActiveFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC ))
 8001bac:	4a0c      	ldr	r2, [pc, #48]	; (8001be0 <RCM_ReadOngoingConv+0x48>)
 8001bae:	00a5      	lsls	r5, r4, #2
 8001bb0:	58aa      	ldr	r2, [r5, r2]
 8001bb2:	6815      	ldr	r5, [r2, #0]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8001bb4:	682a      	ldr	r2, [r5, #0]
  if ( RCM_NoInj_array [RCM_currentHandle].status == ongoing &&
 8001bb6:	0752      	lsls	r2, r2, #29
 8001bb8:	d508      	bpl.n	8001bcc <RCM_ReadOngoingConv+0x34>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001bba:	6c2a      	ldr	r2, [r5, #64]	; 0x40
  {
    /* Reading of ADC Converted Value */
    RCM_NoInj_array [RCM_currentHandle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[RCM_currentHandle]->regADC );
 8001bbc:	805a      	strh	r2, [r3, #2]
    RCM_NoInj_array [RCM_currentHandle].status = valid;
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	705a      	strb	r2, [r3, #1]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	68ea      	ldr	r2, [r5, #12]
 8001bc6:	439a      	bics	r2, r3
 8001bc8:	4332      	orrs	r2, r6
 8001bca:	60ea      	str	r2, [r5, #12]
    /* Restore back DMA configuration. */
    LL_ADC_REG_SetDMATransfer( RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED );
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8001bcc:	2306      	movs	r3, #6
 8001bce:	4363      	muls	r3, r4
 8001bd0:	18c3      	adds	r3, r0, r3
 8001bd2:	795b      	ldrb	r3, [r3, #5]
 8001bd4:	700b      	strb	r3, [r1, #0]
}
 8001bd6:	bd70      	pop	{r4, r5, r6, pc}
 8001bd8:	200009bc 	.word	0x200009bc
 8001bdc:	200009a0 	.word	0x200009a0
 8001be0:	200009c0 	.word	0x200009c0

08001be4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be4:	2001      	movs	r0, #1
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <HAL_MspInit+0x2c>)
{
 8001be8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bea:	6999      	ldr	r1, [r3, #24]
 8001bec:	4301      	orrs	r1, r0
 8001bee:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf0:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf2:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf4:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf6:	4002      	ands	r2, r0
 8001bf8:	9200      	str	r2, [sp, #0]
 8001bfa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfc:	69da      	ldr	r2, [r3, #28]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	61da      	str	r2, [r3, #28]
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	400b      	ands	r3, r1
 8001c06:	9301      	str	r3, [sp, #4]
 8001c08:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c0a:	b002      	add	sp, #8
 8001c0c:	4770      	bx	lr
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	40021000 	.word	0x40021000

08001c14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c14:	b570      	push	{r4, r5, r6, lr}
 8001c16:	0005      	movs	r5, r0
 8001c18:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1a:	2214      	movs	r2, #20
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	a803      	add	r0, sp, #12
 8001c20:	f003 ff9b 	bl	8005b5a <memset>
  if(hadc->Instance==ADC1)
 8001c24:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <HAL_ADC_MspInit+0xac>)
 8001c26:	682a      	ldr	r2, [r5, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d147      	bne.n	8001cbc <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c2c:	2080      	movs	r0, #128	; 0x80
 8001c2e:	4b25      	ldr	r3, [pc, #148]	; (8001cc4 <HAL_ADC_MspInit+0xb0>)
 8001c30:	0080      	lsls	r0, r0, #2
 8001c32:	6999      	ldr	r1, [r3, #24]
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_U_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c34:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c36:	4301      	orrs	r1, r0
 8001c38:	6199      	str	r1, [r3, #24]
 8001c3a:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2600      	movs	r6, #0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c3e:	4002      	ands	r2, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c40:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c42:	9200      	str	r2, [sp, #0]
 8001c44:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c46:	6959      	ldr	r1, [r3, #20]
 8001c48:	0280      	lsls	r0, r0, #10
 8001c4a:	4301      	orrs	r1, r0
 8001c4c:	6159      	str	r1, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4e:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c50:	695a      	ldr	r2, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c52:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c54:	4002      	ands	r2, r0
 8001c56:	9201      	str	r2, [sp, #4]
 8001c58:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5a:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5c:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	615a      	str	r2, [r3, #20]
 8001c62:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c64:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c66:	400b      	ands	r3, r1
 8001c68:	9302      	str	r3, [sp, #8]
 8001c6a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_U_Pin;
 8001c6c:	2338      	movs	r3, #56	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_U_Pin;
 8001c70:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c72:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c74:	f001 f82a 	bl	8002ccc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8001c78:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8001c7a:	4813      	ldr	r0, [pc, #76]	; (8001cc8 <HAL_ADC_MspInit+0xb4>)
 8001c7c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8001c7e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c80:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8001c84:	f001 f822 	bl	8002ccc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001c88:	4c10      	ldr	r4, [pc, #64]	; (8001ccc <HAL_ADC_MspInit+0xb8>)
 8001c8a:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <HAL_ADC_MspInit+0xbc>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc.Init.Mode = DMA_CIRCULAR;
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001c8c:	0020      	movs	r0, r4
    hdma_adc.Instance = DMA1_Channel1;
 8001c8e:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001c90:	2380      	movs	r3, #128	; 0x80
 8001c92:	60e3      	str	r3, [r4, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c94:	18db      	adds	r3, r3, r3
 8001c96:	6123      	str	r3, [r4, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	6163      	str	r3, [r4, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001c9e:	2320      	movs	r3, #32
 8001ca0:	61a3      	str	r3, [r4, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8001ca2:	2380      	movs	r3, #128	; 0x80
 8001ca4:	019b      	lsls	r3, r3, #6
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ca6:	6066      	str	r6, [r4, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ca8:	60a6      	str	r6, [r4, #8]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8001caa:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001cac:	f000 ffdc 	bl	8002c68 <HAL_DMA_Init>
 8001cb0:	42b0      	cmp	r0, r6
 8001cb2:	d001      	beq.n	8001cb8 <HAL_ADC_MspInit+0xa4>
    {
      Error_Handler();
 8001cb4:	f7fe fe78 	bl	80009a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001cb8:	632c      	str	r4, [r5, #48]	; 0x30
 8001cba:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001cbc:	b008      	add	sp, #32
 8001cbe:	bd70      	pop	{r4, r5, r6, pc}
 8001cc0:	40012400 	.word	0x40012400
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	48000400 	.word	0x48000400
 8001ccc:	200006e8 	.word	0x200006e8
 8001cd0:	40020008 	.word	0x40020008

08001cd4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001cd4:	b510      	push	{r4, lr}
 8001cd6:	0004      	movs	r4, r0
 8001cd8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cda:	2214      	movs	r2, #20
 8001cdc:	2100      	movs	r1, #0
 8001cde:	a803      	add	r0, sp, #12
 8001ce0:	f003 ff3b 	bl	8005b5a <memset>
  if(htim_pwm->Instance==TIM1)
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <HAL_TIM_PWM_MspInit+0x58>)
 8001ce6:	6822      	ldr	r2, [r4, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d11d      	bne.n	8001d28 <HAL_TIM_PWM_MspInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cec:	2080      	movs	r0, #128	; 0x80
 8001cee:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <HAL_TIM_PWM_MspInit+0x5c>)
 8001cf0:	0100      	lsls	r0, r0, #4
 8001cf2:	6999      	ldr	r1, [r3, #24]
 8001cf4:	4301      	orrs	r1, r0
 8001cf6:	6199      	str	r1, [r3, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf8:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cfa:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfc:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cfe:	4002      	ands	r2, r0
 8001d00:	9201      	str	r2, [sp, #4]
 8001d02:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d04:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8001d06:	480b      	ldr	r0, [pc, #44]	; (8001d34 <HAL_TIM_PWM_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	615a      	str	r2, [r3, #20]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	400b      	ands	r3, r1
 8001d10:	9302      	str	r3, [sp, #8]
 8001d12:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8001d14:	2380      	movs	r3, #128	; 0x80
 8001d16:	015b      	lsls	r3, r3, #5
 8001d18:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8001d1c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d20:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001d22:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8001d24:	f000 ffd2 	bl	8002ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d28:	b008      	add	sp, #32
 8001d2a:	bd10      	pop	{r4, pc}
 8001d2c:	40012c00 	.word	0x40012c00
 8001d30:	40021000 	.word	0x40021000
 8001d34:	48000400 	.word	0x48000400

08001d38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d38:	b510      	push	{r4, lr}
 8001d3a:	0004      	movs	r4, r0
 8001d3c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3e:	2214      	movs	r2, #20
 8001d40:	2100      	movs	r1, #0
 8001d42:	a803      	add	r0, sp, #12
 8001d44:	f003 ff09 	bl	8005b5a <memset>
  if(htim_base->Instance==TIM2)
 8001d48:	2280      	movs	r2, #128	; 0x80
 8001d4a:	6823      	ldr	r3, [r4, #0]
 8001d4c:	05d2      	lsls	r2, r2, #23
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d11f      	bne.n	8001d92 <HAL_TIM_Base_MspInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d52:	2001      	movs	r0, #1
 8001d54:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <HAL_TIM_Base_MspInit+0x78>)
 8001d56:	69d9      	ldr	r1, [r3, #28]
 8001d58:	4301      	orrs	r1, r0
 8001d5a:	61d9      	str	r1, [r3, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5c:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d5e:	69da      	ldr	r2, [r3, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d60:	0289      	lsls	r1, r1, #10
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d62:	4002      	ands	r2, r0
 8001d64:	9200      	str	r2, [sp, #0]
 8001d66:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d68:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin|M1_HALL_H2_Pin|M1_HALL_H3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6a:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	615a      	str	r2, [r3, #20]
 8001d70:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d72:	2203      	movs	r2, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d74:	400b      	ands	r3, r1
 8001d76:	9301      	str	r3, [sp, #4]
 8001d78:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin|M1_HALL_H2_Pin|M1_HALL_H3_Pin;
 8001d7a:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin|M1_HALL_H2_Pin|M1_HALL_H3_Pin;
 8001d7e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d80:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	3b05      	subs	r3, #5
 8001d84:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d86:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001d88:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8a:	f000 ff9f 	bl	8002ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001d8e:	b008      	add	sp, #32
 8001d90:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM14)
 8001d92:	4a08      	ldr	r2, [pc, #32]	; (8001db4 <HAL_TIM_Base_MspInit+0x7c>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d1fa      	bne.n	8001d8e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001d98:	2080      	movs	r0, #128	; 0x80
 8001d9a:	4a05      	ldr	r2, [pc, #20]	; (8001db0 <HAL_TIM_Base_MspInit+0x78>)
 8001d9c:	0040      	lsls	r0, r0, #1
 8001d9e:	69d1      	ldr	r1, [r2, #28]
 8001da0:	4301      	orrs	r1, r0
 8001da2:	61d1      	str	r1, [r2, #28]
 8001da4:	69d3      	ldr	r3, [r2, #28]
 8001da6:	4003      	ands	r3, r0
 8001da8:	9302      	str	r3, [sp, #8]
 8001daa:	9b02      	ldr	r3, [sp, #8]
}
 8001dac:	e7ef      	b.n	8001d8e <HAL_TIM_Base_MspInit+0x56>
 8001dae:	46c0      	nop			; (mov r8, r8)
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40002000 	.word	0x40002000

08001db8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001db8:	b530      	push	{r4, r5, lr}
 8001dba:	0004      	movs	r4, r0
 8001dbc:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbe:	2214      	movs	r2, #20
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	a803      	add	r0, sp, #12
 8001dc4:	f003 fec9 	bl	8005b5a <memset>
  if(htim->Instance==TIM1)
 8001dc8:	6823      	ldr	r3, [r4, #0]
 8001dca:	4a22      	ldr	r2, [pc, #136]	; (8001e54 <HAL_TIM_MspPostInit+0x9c>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d12d      	bne.n	8001e2c <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd0:	2080      	movs	r0, #128	; 0x80
 8001dd2:	4b21      	ldr	r3, [pc, #132]	; (8001e58 <HAL_TIM_MspPostInit+0xa0>)
 8001dd4:	02c0      	lsls	r0, r0, #11
 8001dd6:	6959      	ldr	r1, [r3, #20]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd8:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dda:	4301      	orrs	r1, r0
 8001ddc:	6159      	str	r1, [r3, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dde:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de0:	695a      	ldr	r2, [r3, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de2:	0289      	lsls	r1, r1, #10
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de4:	4002      	ands	r2, r0
 8001de6:	9200      	str	r2, [sp, #0]
 8001de8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dec:	2503      	movs	r5, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dee:	430a      	orrs	r2, r1
 8001df0:	615a      	str	r2, [r3, #20]
 8001df2:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df4:	4819      	ldr	r0, [pc, #100]	; (8001e5c <HAL_TIM_MspPostInit+0xa4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df6:	400b      	ands	r3, r1
 8001df8:	9301      	str	r3, [sp, #4]
 8001dfa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8001dfc:	23e0      	movs	r3, #224	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfe:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8001e00:	021b      	lsls	r3, r3, #8
 8001e02:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e04:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e06:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e08:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001e0a:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0c:	f000 ff5e 	bl	8002ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8001e10:	23e0      	movs	r3, #224	; 0xe0
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e16:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e18:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e1a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001e1c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = DAC_EMUL_CH1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
    HAL_GPIO_Init(DAC_EMUL_CH1_GPIO_Port, &GPIO_InitStruct);
 8001e1e:	2090      	movs	r0, #144	; 0x90
 8001e20:	a903      	add	r1, sp, #12
 8001e22:	05c0      	lsls	r0, r0, #23
 8001e24:	f000 ff52 	bl	8002ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001e28:	b009      	add	sp, #36	; 0x24
 8001e2a:	bd30      	pop	{r4, r5, pc}
  else if(htim->Instance==TIM14)
 8001e2c:	4a0c      	ldr	r2, [pc, #48]	; (8001e60 <HAL_TIM_MspPostInit+0xa8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d1fa      	bne.n	8001e28 <HAL_TIM_MspPostInit+0x70>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e32:	2080      	movs	r0, #128	; 0x80
 8001e34:	4a08      	ldr	r2, [pc, #32]	; (8001e58 <HAL_TIM_MspPostInit+0xa0>)
 8001e36:	0280      	lsls	r0, r0, #10
 8001e38:	6951      	ldr	r1, [r2, #20]
 8001e3a:	4301      	orrs	r1, r0
 8001e3c:	6151      	str	r1, [r2, #20]
 8001e3e:	6953      	ldr	r3, [r2, #20]
 8001e40:	4003      	ands	r3, r0
 8001e42:	9302      	str	r3, [sp, #8]
 8001e44:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DAC_EMUL_CH1_Pin;
 8001e46:	2380      	movs	r3, #128	; 0x80
 8001e48:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4a:	3b7e      	subs	r3, #126	; 0x7e
 8001e4c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8001e4e:	3302      	adds	r3, #2
 8001e50:	9307      	str	r3, [sp, #28]
 8001e52:	e7e4      	b.n	8001e1e <HAL_TIM_MspPostInit+0x66>
 8001e54:	40012c00 	.word	0x40012c00
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	48000400 	.word	0x48000400
 8001e60:	40002000 	.word	0x40002000

08001e64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e64:	b510      	push	{r4, lr}
 8001e66:	0004      	movs	r4, r0
 8001e68:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6a:	2214      	movs	r2, #20
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	a803      	add	r0, sp, #12
 8001e70:	f003 fe73 	bl	8005b5a <memset>
  if(huart->Instance==USART1)
 8001e74:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <HAL_UART_MspInit+0x54>)
 8001e76:	6822      	ldr	r2, [r4, #0]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d11a      	bne.n	8001eb2 <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e7c:	2080      	movs	r0, #128	; 0x80
 8001e7e:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <HAL_UART_MspInit+0x58>)
 8001e80:	01c0      	lsls	r0, r0, #7
 8001e82:	6999      	ldr	r1, [r3, #24]
 8001e84:	4301      	orrs	r1, r0
 8001e86:	6199      	str	r1, [r3, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e88:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e8a:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e8c:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e8e:	4002      	ands	r2, r0
 8001e90:	9201      	str	r2, [sp, #4]
 8001e92:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e94:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e96:	480a      	ldr	r0, [pc, #40]	; (8001ec0 <HAL_UART_MspInit+0x5c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	615a      	str	r2, [r3, #20]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	400b      	ands	r3, r1
 8001ea0:	9302      	str	r3, [sp, #8]
 8001ea2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8001ea4:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8001ea8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eaa:	3bbe      	subs	r3, #190	; 0xbe
 8001eac:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eae:	f000 ff0d 	bl	8002ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001eb2:	b008      	add	sp, #32
 8001eb4:	bd10      	pop	{r4, pc}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	40013800 	.word	0x40013800
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	48000400 	.word	0x48000400

08001ec4 <DMA1_Channel1_IRQHandler>:
  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 0 */

  /* USER CODE END CURRENT_REGULATION_IRQn 0 */

  /* Clear Flags */
  DMA1->IFCR = (LL_DMA_ISR_GIF1|LL_DMA_ISR_TCIF1|LL_DMA_ISR_HTIF1);
 8001ec4:	2207      	movs	r2, #7
{
 8001ec6:	b510      	push	{r4, lr}
  DMA1->IFCR = (LL_DMA_ISR_GIF1|LL_DMA_ISR_TCIF1|LL_DMA_ISR_HTIF1);
 8001ec8:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <DMA1_Channel1_IRQHandler+0x14>)
 8001eca:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 1 */

  /* USER CODE END CURRENT_REGULATION_IRQn 1 */

    UI_DACUpdate(TSK_HighFrequencyTask());  /*GUI, this section is present only if DAC is enabled*/
 8001ecc:	f7ff f958 	bl	8001180 <TSK_HighFrequencyTask>
 8001ed0:	f000 f970 	bl	80021b4 <UI_DACUpdate>
  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 2 */

  /* USER CODE END CURRENT_REGULATION_IRQn 2 */
}
 8001ed4:	bd10      	pop	{r4, pc}
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	40020000 	.word	0x40020000

08001edc <TIM1_BRK_UP_TRG_COM_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001edc:	2201      	movs	r2, #1
  * @brief  This function handles first motor TIMx Update, Break-in interrupt request.
  * @param  None
  * @retval None
  */
void TIMx_UP_BRK_M1_IRQHandler(void)
{
 8001ede:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIMx_UP_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_BRK_M1_IRQn 0 */

  if(LL_TIM_IsActiveFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx) && LL_TIM_IsEnabledIT_UPDATE(PWM_Handle_M1.pParams_str->TIMx))
 8001ee0:	4c0e      	ldr	r4, [pc, #56]	; (8001f1c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x40>)
 8001ee2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6919      	ldr	r1, [r3, #16]
 8001ee8:	4211      	tst	r1, r2
 8001eea:	d007      	beq.n	8001efc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x20>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8001eec:	68d9      	ldr	r1, [r3, #12]
 8001eee:	4211      	tst	r1, r2
 8001ef0:	d004      	beq.n	8001efc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x20>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001ef2:	3a03      	subs	r2, #3
  {
    LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
    R3_1_TIMx_UP_IRQHandler( &PWM_Handle_M1 );
 8001ef4:	0020      	movs	r0, r4
 8001ef6:	611a      	str	r2, [r3, #16]
 8001ef8:	f003 fa62 	bl	80053c0 <R3_1_TIMx_UP_IRQHandler>
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8001efc:	2280      	movs	r2, #128	; 0x80
    /* USER CODE BEGIN PWM_Update */

    /* USER CODE END PWM_Update */
  }
  if(LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx) && LL_TIM_IsEnabledIT_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8001efe:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6919      	ldr	r1, [r3, #16]
 8001f04:	4211      	tst	r1, r2
 8001f06:	d008      	beq.n	8001f1a <TIM1_BRK_UP_TRG_COM_IRQHandler+0x3e>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_BIE) == (TIM_DIER_BIE)) ? 1UL : 0UL);
 8001f08:	68d9      	ldr	r1, [r3, #12]
 8001f0a:	4211      	tst	r1, r2
 8001f0c:	d005      	beq.n	8001f1a <TIM1_BRK_UP_TRG_COM_IRQHandler+0x3e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8001f0e:	3a02      	subs	r2, #2
 8001f10:	3aff      	subs	r2, #255	; 0xff
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    F0XX_BRK_IRQHandler(&PWM_Handle_M1);
 8001f12:	0020      	movs	r0, r4
 8001f14:	611a      	str	r2, [r3, #16]
 8001f16:	f003 fa93 	bl	8005440 <F0XX_BRK_IRQHandler>
   /* No other interrupts are routed to this handler */
  }
  /* USER CODE BEGIN TIMx_UP_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_UP_BRK_M1_IRQn 1 */
}
 8001f1a:	bd10      	pop	{r4, pc}
 8001f1c:	20000350 	.word	0x20000350

08001f20 <DMA1_Channel4_5_IRQHandler>:
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC4(DMA_TypeDef *DMAx)
{
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4));
 8001f20:	2280      	movs	r2, #128	; 0x80
 8001f22:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <DMA1_Channel4_5_IRQHandler+0x10>)
 8001f24:	0192      	lsls	r2, r2, #6
 8001f26:	6819      	ldr	r1, [r3, #0]
{
  /* USER CODE BEGIN DMAx_R1_M1_IRQn 0 */

  /* USER CODE END DMAx_R1_M1_IRQn 0 */

  if (LL_DMA_IsActiveFlag_TC4(DMA1))
 8001f28:	4211      	tst	r1, r2
 8001f2a:	d000      	beq.n	8001f2e <DMA1_Channel4_5_IRQHandler+0xe>
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC4(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF4);
 8001f2c:	605a      	str	r2, [r3, #4]
    /* USER CODE END DMAx_R1_M1_TC4 */
  }
  /* USER CODE BEGIN DMAx_R1_M1_IRQn 1 */

  /* USER CODE END DMAx_R1_M1_IRQn 1 */
}
 8001f2e:	4770      	bx	lr
 8001f30:	40020000 	.word	0x40020000

08001f34 <TIM2_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request for M1 Speed Sensor.
  * @param  None
  * @retval None
  */
void SPD_TIM_M1_IRQHandler(void)
{
 8001f34:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* HALL Timer Update IT always enabled, no need to check enable UPDATE state */
  if (LL_TIM_IsActiveFlag_UPDATE(HALL_M1.TIMx) != 0)
 8001f36:	4c0b      	ldr	r4, [pc, #44]	; (8001f64 <TIM2_IRQHandler+0x30>)
 8001f38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001f3a:	691a      	ldr	r2, [r3, #16]
 8001f3c:	07d2      	lsls	r2, r2, #31
 8001f3e:	d505      	bpl.n	8001f4c <TIM2_IRQHandler+0x18>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001f40:	2202      	movs	r2, #2
 8001f42:	4252      	negs	r2, r2
  {
    LL_TIM_ClearFlag_UPDATE(HALL_M1.TIMx);
    HALL_TIMx_UP_IRQHandler(&HALL_M1);
 8001f44:	0020      	movs	r0, r4
 8001f46:	611a      	str	r2, [r3, #16]
 8001f48:	f002 fc88 	bl	800485c <HALL_TIMx_UP_IRQHandler>
  else
  {
    /* Nothing to do */
  }
  /* HALL Timer CC1 IT always enabled, no need to check enable CC1 state */
  if (LL_TIM_IsActiveFlag_CC1 (HALL_M1.TIMx))
 8001f4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8001f4e:	691a      	ldr	r2, [r3, #16]
 8001f50:	0792      	lsls	r2, r2, #30
 8001f52:	d505      	bpl.n	8001f60 <TIM2_IRQHandler+0x2c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8001f54:	2203      	movs	r2, #3
 8001f56:	4252      	negs	r2, r2
  {
    LL_TIM_ClearFlag_CC1(HALL_M1.TIMx);
    HALL_TIMx_CC_IRQHandler(&HALL_M1);
 8001f58:	0020      	movs	r0, r4
 8001f5a:	611a      	str	r2, [r3, #16]
 8001f5c:	f002 fad6 	bl	800450c <HALL_TIMx_CC_IRQHandler>
  /* Nothing to do */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8001f60:	bd10      	pop	{r4, pc}
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	200000f0 	.word	0x200000f0

08001f68 <USART1_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8001f68:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8001f6a:	4c17      	ldr	r4, [pc, #92]	; (8001fc8 <USART1_IRQHandler+0x60>)
 8001f6c:	0023      	movs	r3, r4
 8001f6e:	33fc      	adds	r3, #252	; 0xfc
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8001f72:	69da      	ldr	r2, [r3, #28]
 8001f74:	0692      	lsls	r2, r2, #26
 8001f76:	d509      	bpl.n	8001f8c <USART1_IRQHandler+0x24>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8001f78:	8c99      	ldrh	r1, [r3, #36]	; 0x24
  {
    uint16_t retVal;
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 8001f7a:	0020      	movs	r0, r4
 8001f7c:	b2c9      	uxtb	r1, r1
 8001f7e:	f003 fd07 	bl	8005990 <UFCP_RX_IRQ_Handler>
 8001f82:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d119      	bne.n	8001fbc <USART1_IRQHandler+0x54>
    {
      UI_SerialCommunicationTimeOutStart();
 8001f88:	f000 f928 	bl	80021dc <UI_SerialCommunicationTimeOutStart>
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8001f8c:	0023      	movs	r3, r4
 8001f8e:	33fc      	adds	r3, #252	; 0xfc
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	061b      	lsls	r3, r3, #24
 8001f96:	d502      	bpl.n	8001f9e <USART1_IRQHandler+0x36>
  {
    UFCP_TX_IRQ_Handler(&pUSART);
 8001f98:	0020      	movs	r0, r4
 8001f9a:	f003 fc82 	bl	80058a2 <UFCP_TX_IRQ_Handler>
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8001f9e:	0026      	movs	r6, r4
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8001fa0:	2508      	movs	r5, #8
 8001fa2:	36fc      	adds	r6, #252	; 0xfc
 8001fa4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	422b      	tst	r3, r5
 8001faa:	d006      	beq.n	8001fba <USART1_IRQHandler+0x52>
  {
    /* Send Overrun message */
    UFCP_OVR_IRQ_Handler(&pUSART);
 8001fac:	0020      	movs	r0, r4
 8001fae:	f003 fd55 	bl	8005a5c <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8001fb2:	6a73      	ldr	r3, [r6, #36]	; 0x24
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8001fb4:	621d      	str	r5, [r3, #32]
    UI_SerialCommunicationTimeOutStop();
 8001fb6:	f000 f90b 	bl	80021d0 <UI_SerialCommunicationTimeOutStop>
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 8001fba:	bd70      	pop	{r4, r5, r6, pc}
    if (retVal == 2)
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d1e5      	bne.n	8001f8c <USART1_IRQHandler+0x24>
      UI_SerialCommunicationTimeOutStop();
 8001fc0:	f000 f906 	bl	80021d0 <UI_SerialCommunicationTimeOutStop>
 8001fc4:	e7e2      	b.n	8001f8c <USART1_IRQHandler+0x24>
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	200004d8 	.word	0x200004d8

08001fcc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8001fce:	f7ff f9bd 	bl	800134c <TSK_HardwareFaultTask>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8001fd2:	2508      	movs	r5, #8
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001fd4:	2680      	movs	r6, #128	; 0x80

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8001fd6:	4c16      	ldr	r4, [pc, #88]	; (8002030 <HardFault_Handler+0x64>)
 8001fd8:	0027      	movs	r7, r4
 8001fda:	37fc      	adds	r7, #252	; 0xfc
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	422b      	tst	r3, r5
 8001fe2:	d006      	beq.n	8001ff2 <HardFault_Handler+0x26>
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 8001fe4:	0020      	movs	r0, r4
 8001fe6:	f003 fd39 	bl	8005a5c <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8001fec:	621d      	str	r5, [r3, #32]
        UI_SerialCommunicationTimeOutStop();
 8001fee:	f000 f8ef 	bl	80021d0 <UI_SerialCommunicationTimeOutStop>
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8001ff2:	0023      	movs	r3, r4
 8001ff4:	33fc      	adds	r3, #252	; 0xfc
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	4233      	tst	r3, r6
 8001ffc:	d002      	beq.n	8002004 <HardFault_Handler+0x38>
      {
        UFCP_TX_IRQ_Handler(&pUSART);
 8001ffe:	0020      	movs	r0, r4
 8002000:	f003 fc4f 	bl	80058a2 <UFCP_TX_IRQ_Handler>
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002004:	0023      	movs	r3, r4
 8002006:	33fc      	adds	r3, #252	; 0xfc
 8002008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800200a:	69da      	ldr	r2, [r3, #28]
 800200c:	0692      	lsls	r2, r2, #26
 800200e:	d5e2      	bpl.n	8001fd6 <HardFault_Handler+0xa>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002010:	8c99      	ldrh	r1, [r3, #36]	; 0x24
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 8002012:	0020      	movs	r0, r4
 8002014:	b2c9      	uxtb	r1, r1
 8002016:	f003 fcbb 	bl	8005990 <UFCP_RX_IRQ_Handler>
 800201a:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 800201c:	2b01      	cmp	r3, #1
 800201e:	d102      	bne.n	8002026 <HardFault_Handler+0x5a>
        {
          UI_SerialCommunicationTimeOutStart();
 8002020:	f000 f8dc 	bl	80021dc <UI_SerialCommunicationTimeOutStart>
        }
        if (retVal == 2)
 8002024:	e7d7      	b.n	8001fd6 <HardFault_Handler+0xa>
 8002026:	2b02      	cmp	r3, #2
 8002028:	d1d5      	bne.n	8001fd6 <HardFault_Handler+0xa>
        {
          UI_SerialCommunicationTimeOutStop();
 800202a:	f000 f8d1 	bl	80021d0 <UI_SerialCommunicationTimeOutStop>
 800202e:	e7d2      	b.n	8001fd6 <HardFault_Handler+0xa>
 8002030:	200004d8 	.word	0x200004d8

08002034 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8002034:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8002036:	4c08      	ldr	r4, [pc, #32]	; (8002058 <SysTick_Handler+0x24>)
 8002038:	7823      	ldrb	r3, [r4, #0]
 800203a:	2b02      	cmp	r3, #2
 800203c:	d105      	bne.n	800204a <SysTick_Handler+0x16>
  {
    HAL_IncTick();
 800203e:	f000 fc6b 	bl	8002918 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8002042:	f000 fe0c 	bl	8002c5e <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	7023      	strb	r3, [r4, #0]
  }
  SystickDividerCounter ++;
 800204a:	7823      	ldrb	r3, [r4, #0]
 800204c:	3301      	adds	r3, #1
 800204e:	7023      	strb	r3, [r4, #0]
#endif /* MC_HAL_IS_USED */

  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();
 8002050:	f7ff f96e 	bl	8001330 <MC_RunMotorControlTasks>

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8002054:	bd10      	pop	{r4, pc}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	20000618 	.word	0x20000618

0800205c <EXTI0_1_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR, ExtiLine));
 800205c:	2201      	movs	r2, #1
 800205e:	4b04      	ldr	r3, [pc, #16]	; (8002070 <EXTI0_1_IRQHandler+0x14>)

/**
  * @brief  This function handles Button IRQ on PIN PF0.
  */
void EXTI0_1_IRQHandler (void)
{
 8002060:	b510      	push	{r4, lr}
 8002062:	6959      	ldr	r1, [r3, #20]
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_0) )
 8002064:	4211      	tst	r1, r2
 8002066:	d002      	beq.n	800206e <EXTI0_1_IRQHandler+0x12>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8002068:	615a      	str	r2, [r3, #20]
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_0);
    UI_HandleStartStopButton_cb ();
 800206a:	f000 f8bd 	bl	80021e8 <UI_HandleStartStopButton_cb>
  }

}
 800206e:	bd10      	pop	{r4, pc}
 8002070:	40010400 	.word	0x40010400

08002074 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002074:	4a0b      	ldr	r2, [pc, #44]	; (80020a4 <_sbrk+0x30>)
 8002076:	490c      	ldr	r1, [pc, #48]	; (80020a8 <_sbrk+0x34>)
{
 8002078:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800207a:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800207c:	4a0b      	ldr	r2, [pc, #44]	; (80020ac <_sbrk+0x38>)
{
 800207e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002080:	6810      	ldr	r0, [r2, #0]
 8002082:	2800      	cmp	r0, #0
 8002084:	d101      	bne.n	800208a <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8002086:	480a      	ldr	r0, [pc, #40]	; (80020b0 <_sbrk+0x3c>)
 8002088:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800208a:	6810      	ldr	r0, [r2, #0]
 800208c:	18c3      	adds	r3, r0, r3
 800208e:	428b      	cmp	r3, r1
 8002090:	d906      	bls.n	80020a0 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8002092:	f003 fd2f 	bl	8005af4 <__errno>
 8002096:	230c      	movs	r3, #12
 8002098:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800209a:	2001      	movs	r0, #1
 800209c:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800209e:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80020a0:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80020a2:	e7fc      	b.n	800209e <_sbrk+0x2a>
 80020a4:	00000400 	.word	0x00000400
 80020a8:	20001000 	.word	0x20001000
 80020ac:	200009d0 	.word	0x200009d0
 80020b0:	20000ac8 	.word	0x20000ac8

080020b4 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 80020b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020b6:	b089      	sub	sp, #36	; 0x24
 80020b8:	9005      	str	r0, [sp, #20]
      pDAC = &DAC_UI_Params;
 80020ba:	4825      	ldr	r0, [pc, #148]	; (8002150 <UI_TaskInit+0x9c>)
{
 80020bc:	001d      	movs	r5, r3
      pDAC->_Super = UI_Params;
 80020be:	0003      	movs	r3, r0
      pDAC = &DAC_UI_Params;
 80020c0:	4c24      	ldr	r4, [pc, #144]	; (8002154 <UI_TaskInit+0xa0>)
{
 80020c2:	9207      	str	r2, [sp, #28]
      pDAC->_Super = UI_Params;
 80020c4:	4a24      	ldr	r2, [pc, #144]	; (8002158 <UI_TaskInit+0xa4>)
      pDAC = &DAC_UI_Params;
 80020c6:	6020      	str	r0, [r4, #0]
{
 80020c8:	9106      	str	r1, [sp, #24]
      pDAC->_Super = UI_Params;
 80020ca:	cac2      	ldmia	r2!, {r1, r6, r7}
 80020cc:	c3c2      	stmia	r3!, {r1, r6, r7}
 80020ce:	cac2      	ldmia	r2!, {r1, r6, r7}
 80020d0:	c3c2      	stmia	r3!, {r1, r6, r7}
 80020d2:	cac2      	ldmia	r2!, {r1, r6, r7}
 80020d4:	c3c2      	stmia	r3!, {r1, r6, r7}
 80020d6:	cac2      	ldmia	r2!, {r1, r6, r7}
 80020d8:	c3c2      	stmia	r3!, {r1, r6, r7}

      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 80020da:	9b05      	ldr	r3, [sp, #20]
 80020dc:	9a07      	ldr	r2, [sp, #28]
 80020de:	9906      	ldr	r1, [sp, #24]
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	002b      	movs	r3, r5
 80020e4:	f000 f88b 	bl	80021fe <UI_Init>
      UI_DACInit( &pDAC->_Super ); /* Init DAC */
 80020e8:	6820      	ldr	r0, [r4, #0]
 80020ea:	f000 f9d5 	bl	8002498 <UI_DACInit>
      UI_SetDAC( &pDAC->_Super, DAC_CH0, MC_PROTOCOL_REG_I_A );
 80020ee:	6820      	ldr	r0, [r4, #0]
 80020f0:	2223      	movs	r2, #35	; 0x23
 80020f2:	2100      	movs	r1, #0
 80020f4:	f000 f9dc 	bl	80024b0 <UI_SetDAC>
      UI_SetDAC( &pDAC->_Super, DAC_CH1, MC_PROTOCOL_REG_I_B );
 80020f8:	2101      	movs	r1, #1
 80020fa:	6820      	ldr	r0, [r4, #0]
 80020fc:	2224      	movs	r2, #36	; 0x24
 80020fe:	f000 f9d7 	bl	80024b0 <UI_SetDAC>

    pMCP = &MCP_UI_Params;
 8002102:	4a16      	ldr	r2, [pc, #88]	; (800215c <UI_TaskInit+0xa8>)
 8002104:	4e16      	ldr	r6, [pc, #88]	; (8002160 <UI_TaskInit+0xac>)
    pMCP->_Super = UI_Params;
 8002106:	0013      	movs	r3, r2
 8002108:	4f13      	ldr	r7, [pc, #76]	; (8002158 <UI_TaskInit+0xa4>)
    pMCP = &MCP_UI_Params;
 800210a:	6032      	str	r2, [r6, #0]
    pMCP->_Super = UI_Params;
 800210c:	cf07      	ldmia	r7!, {r0, r1, r2}
 800210e:	c307      	stmia	r3!, {r0, r1, r2}
 8002110:	cf07      	ldmia	r7!, {r0, r1, r2}
 8002112:	c307      	stmia	r3!, {r0, r1, r2}
 8002114:	cf07      	ldmia	r7!, {r0, r1, r2}
 8002116:	c307      	stmia	r3!, {r0, r1, r2}
 8002118:	cf07      	ldmia	r7!, {r0, r1, r2}
 800211a:	c307      	stmia	r3!, {r0, r1, r2}

    UFCP_Init( & pUSART );
 800211c:	4f11      	ldr	r7, [pc, #68]	; (8002164 <UI_TaskInit+0xb0>)
 800211e:	0038      	movs	r0, r7
 8002120:	f003 fbbb 	bl	800589a <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, pDAC, s_fwVer);
 8002124:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002126:	0039      	movs	r1, r7
 8002128:	9302      	str	r3, [sp, #8]
 800212a:	6823      	ldr	r3, [r4, #0]
 800212c:	4a0e      	ldr	r2, [pc, #56]	; (8002168 <UI_TaskInit+0xb4>)
 800212e:	9301      	str	r3, [sp, #4]
 8002130:	4b0e      	ldr	r3, [pc, #56]	; (800216c <UI_TaskInit+0xb8>)
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	6830      	ldr	r0, [r6, #0]
 8002136:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <UI_TaskInit+0xbc>)
 8002138:	f7ff fba0 	bl	800187c <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 800213c:	9b05      	ldr	r3, [sp, #20]
 800213e:	9a07      	ldr	r2, [sp, #28]
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	9906      	ldr	r1, [sp, #24]
 8002144:	002b      	movs	r3, r5
 8002146:	6830      	ldr	r0, [r6, #0]
 8002148:	f000 f859 	bl	80021fe <UI_Init>

}
 800214c:	b009      	add	sp, #36	; 0x24
 800214e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002150:	200000b4 	.word	0x200000b4
 8002154:	20000aa4 	.word	0x20000aa4
 8002158:	200004a8 	.word	0x200004a8
 800215c:	200009d4 	.word	0x200009d4
 8002160:	20000aa8 	.word	0x20000aa8
 8002164:	200004d8 	.word	0x200004d8
 8002168:	08005939 	.word	0x08005939
 800216c:	08005a71 	.word	0x08005a71
 8002170:	08005909 	.word	0x08005909

08002174 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 8002174:	4a0c      	ldr	r2, [pc, #48]	; (80021a8 <UI_Scheduler+0x34>)
 8002176:	8813      	ldrh	r3, [r2, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 800217c:	8813      	ldrh	r3, [r2, #0]
 800217e:	3b01      	subs	r3, #1
 8002180:	b29b      	uxth	r3, r3
 8002182:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 8002184:	4a09      	ldr	r2, [pc, #36]	; (80021ac <UI_Scheduler+0x38>)
 8002186:	8813      	ldrh	r3, [r2, #0]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d903      	bls.n	8002194 <UI_Scheduler+0x20>
  {
    bCOMTimeoutCounter--;
 800218c:	8813      	ldrh	r3, [r2, #0]
 800218e:	3b01      	subs	r3, #1
 8002190:	b29b      	uxth	r3, r3
 8002192:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 8002194:	4a06      	ldr	r2, [pc, #24]	; (80021b0 <UI_Scheduler+0x3c>)
 8002196:	8813      	ldrh	r3, [r2, #0]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d903      	bls.n	80021a4 <UI_Scheduler+0x30>
  {
    bCOMATRTimeCounter--;
 800219c:	8813      	ldrh	r3, [r2, #0]
 800219e:	3b01      	subs	r3, #1
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	8013      	strh	r3, [r2, #0]
  }
}
 80021a4:	4770      	bx	lr
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	20000aa2 	.word	0x20000aa2
 80021ac:	20000aa0 	.word	0x20000aa0
 80021b0:	2000061a 	.word	0x2000061a

080021b4 <UI_DACUpdate>:

__weak void UI_DACUpdate(uint8_t bMotorNbr)
{
 80021b4:	b570      	push	{r4, r5, r6, lr}
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 80021b6:	4d05      	ldr	r5, [pc, #20]	; (80021cc <UI_DACUpdate+0x18>)
{
 80021b8:	0004      	movs	r4, r0
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 80021ba:	6828      	ldr	r0, [r5, #0]
 80021bc:	f000 f832 	bl	8002224 <UI_GetSelectedMC>
 80021c0:	42a0      	cmp	r0, r4
 80021c2:	d102      	bne.n	80021ca <UI_DACUpdate+0x16>
  {
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
 80021c4:	6828      	ldr	r0, [r5, #0]
 80021c6:	f000 f96d 	bl	80024a4 <UI_DACExec>
  }
}
 80021ca:	bd70      	pop	{r4, r5, r6, pc}
 80021cc:	20000aa4 	.word	0x20000aa4

080021d0 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 80021d0:	2200      	movs	r2, #0
 80021d2:	4b01      	ldr	r3, [pc, #4]	; (80021d8 <UI_SerialCommunicationTimeOutStop+0x8>)
 80021d4:	801a      	strh	r2, [r3, #0]
}
 80021d6:	4770      	bx	lr
 80021d8:	20000aa0 	.word	0x20000aa0

080021dc <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 80021dc:	224f      	movs	r2, #79	; 0x4f
 80021de:	4b01      	ldr	r3, [pc, #4]	; (80021e4 <UI_SerialCommunicationTimeOutStart+0x8>)
 80021e0:	801a      	strh	r2, [r3, #0]
}
 80021e2:	4770      	bx	lr
 80021e4:	20000aa0 	.word	0x20000aa0

080021e8 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 80021e8:	b510      	push	{r4, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (MC_GetSTMStateMotor1() == IDLE)
 80021ea:	f7fe fbef 	bl	80009cc <MC_GetSTMStateMotor1>
 80021ee:	2800      	cmp	r0, #0
 80021f0:	d102      	bne.n	80021f8 <UI_HandleStartStopButton_cb+0x10>
  {
    /* Ramp parameters should be tuned for the actual motor */
    MC_StartMotor1();
 80021f2:	f7fe fbdb 	bl	80009ac <MC_StartMotor1>
  else
  {
    MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 80021f6:	bd10      	pop	{r4, pc}
    MC_StopMotor1();
 80021f8:	f7fe fbe0 	bl	80009bc <MC_StopMotor1>
}
 80021fc:	e7fb      	b.n	80021f6 <UI_HandleStartStopButton_cb+0xe>

080021fe <UI_Init>:
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
 80021fe:	6243      	str	r3, [r0, #36]	; 0x24
  pHandle->bSelectedDrive = 0u;
 8002200:	0003      	movs	r3, r0
  pHandle->pMCI = pMCI;
 8002202:	6202      	str	r2, [r0, #32]
  pHandle->bSelectedDrive = 0u;
 8002204:	2200      	movs	r2, #0
 8002206:	332c      	adds	r3, #44	; 0x2c
  pHandle->bDriveNum = bMCNum;
 8002208:	7701      	strb	r1, [r0, #28]
  pHandle->bSelectedDrive = 0u;
 800220a:	701a      	strb	r2, [r3, #0]
  pHandle->pUICfg = pUICfg;
 800220c:	9b00      	ldr	r3, [sp, #0]
 800220e:	6283      	str	r3, [r0, #40]	; 0x28
}
 8002210:	4770      	bx	lr

08002212 <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 8002212:	7f02      	ldrb	r2, [r0, #28]
{
 8002214:	0003      	movs	r3, r0
  {
    retVal = false;
 8002216:	2000      	movs	r0, #0
  if (bSelectMC  >= pHandle->bDriveNum)
 8002218:	428a      	cmp	r2, r1
 800221a:	d902      	bls.n	8002222 <UI_SelectMC+0x10>
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 800221c:	332c      	adds	r3, #44	; 0x2c
 800221e:	7019      	strb	r1, [r3, #0]
  bool retVal = true;
 8002220:	3001      	adds	r0, #1
  }
  return retVal;
}
 8002222:	4770      	bx	lr

08002224 <UI_GetSelectedMC>:
  * @param  pHandle: Pointer on Handle structure of UI component.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
 8002224:	302c      	adds	r0, #44	; 0x2c
 8002226:	7800      	ldrb	r0, [r0, #0]
}
 8002228:	4770      	bx	lr

0800222a <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 800222a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800222c:	0005      	movs	r5, r0
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800222e:	002b      	movs	r3, r5
 8002230:	332c      	adds	r3, #44	; 0x2c
 8002232:	781b      	ldrb	r3, [r3, #0]
{
 8002234:	0014      	movs	r4, r2
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002236:	6a2a      	ldr	r2, [r5, #32]
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	58d6      	ldr	r6, [r2, r3]
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 800223c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
{
 800223e:	0008      	movs	r0, r1
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002240:	58d3      	ldr	r3, [r2, r3]

  bool retVal = true;
  switch (bRegID)
 8002242:	290f      	cmp	r1, #15
 8002244:	d809      	bhi.n	800225a <UI_SetReg+0x30>
 8002246:	f7fd ff69 	bl	800011c <__gnu_thumb1_case_uqi>
 800224a:	0c0e      	.short	0x0c0e
 800224c:	200c2f0c 	.word	0x200c2f0c
 8002250:	52472a25 	.word	0x52472a25
 8002254:	625b5855 	.word	0x625b5855
 8002258:	6865      	.short	0x6865
 800225a:	2941      	cmp	r1, #65	; 0x41
 800225c:	d060      	beq.n	8002320 <UI_SetReg+0xf6>
 800225e:	295b      	cmp	r1, #91	; 0x5b
 8002260:	d008      	beq.n	8002274 <UI_SetReg+0x4a>
 8002262:	2500      	movs	r5, #0
 8002264:	e004      	b.n	8002270 <UI_SetReg+0x46>
  {
  case MC_PROTOCOL_REG_TARGET_MOTOR:
    {
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8002266:	0028      	movs	r0, r5
 8002268:	b2e1      	uxtb	r1, r4
 800226a:	f7ff ffd2 	bl	8002212 <UI_SelectMC>
 800226e:	0005      	movs	r5, r0
    retVal = false;
    break;
  }

  return retVal;
}
 8002270:	0028      	movs	r0, r5
 8002272:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 8002274:	2106      	movs	r1, #6
 8002276:	0020      	movs	r0, r4
 8002278:	f7fd fff8 	bl	800026c <__divsi3>
 800227c:	2200      	movs	r2, #0
 800227e:	b201      	sxth	r1, r0
 8002280:	0030      	movs	r0, r6
 8002282:	f7fe fbb5 	bl	80009f0 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002286:	2501      	movs	r5, #1
    break;
 8002288:	e7f2      	b.n	8002270 <UI_SetReg+0x46>
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 800228a:	6818      	ldr	r0, [r3, #0]
 800228c:	b221      	sxth	r1, r4
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 800228e:	f002 fbb6 	bl	80049fe <PID_SetKP>
    break;
 8002292:	e7f8      	b.n	8002286 <UI_SetReg+0x5c>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	b221      	sxth	r1, r4
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 8002298:	f002 fbb3 	bl	8004a02 <PID_SetKI>
    break;
 800229c:	e7f3      	b.n	8002286 <UI_SetReg+0x5c>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 800229e:	6818      	ldr	r0, [r3, #0]
 80022a0:	b221      	sxth	r1, r4
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 80022a2:	f002 fbbc 	bl	8004a1e <PID_SetKD>
    break;
 80022a6:	e7ee      	b.n	8002286 <UI_SetReg+0x5c>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 80022a8:	b2e4      	uxtb	r4, r4
 80022aa:	2c00      	cmp	r4, #0
 80022ac:	d108      	bne.n	80022c0 <UI_SetReg+0x96>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 80022ae:	0030      	movs	r0, r6
 80022b0:	f7fe fc7c 	bl	8000bac <MCI_GetTeref>
 80022b4:	0022      	movs	r2, r4
 80022b6:	0001      	movs	r1, r0
 80022b8:	0030      	movs	r0, r6
 80022ba:	f7fe fba1 	bl	8000a00 <MCI_ExecTorqueRamp>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 80022be:	e7e2      	b.n	8002286 <UI_SetReg+0x5c>
  bool retVal = true;
 80022c0:	2501      	movs	r5, #1
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 80022c2:	42ac      	cmp	r4, r5
 80022c4:	d1d4      	bne.n	8002270 <UI_SetReg+0x46>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 80022c6:	0030      	movs	r0, r6
 80022c8:	f7fe fc18 	bl	8000afc <MCI_GetMecSpeedRefUnit>
 80022cc:	2200      	movs	r2, #0
 80022ce:	0001      	movs	r1, r0
 80022d0:	0030      	movs	r0, r6
 80022d2:	f7fe fb8d 	bl	80009f0 <MCI_ExecSpeedRamp>
 80022d6:	e7cb      	b.n	8002270 <UI_SetReg+0x46>
      currComp = MCI_GetIqdref(pMCI);
 80022d8:	0030      	movs	r0, r6
 80022da:	f7fe fc3d 	bl	8000b58 <MCI_GetIqdref>
      currComp.q = (int16_t)wValue;
 80022de:	ab01      	add	r3, sp, #4
      currComp = MCI_GetIqdref(pMCI);
 80022e0:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 80022e2:	801c      	strh	r4, [r3, #0]
      MCI_SetCurrentReferences(pMCI,currComp);
 80022e4:	0030      	movs	r0, r6
 80022e6:	9901      	ldr	r1, [sp, #4]
 80022e8:	f7fe fb91 	bl	8000a0e <MCI_SetCurrentReferences>
    break;
 80022ec:	e7cb      	b.n	8002286 <UI_SetReg+0x5c>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 80022ee:	6858      	ldr	r0, [r3, #4]
 80022f0:	b221      	sxth	r1, r4
 80022f2:	e7cc      	b.n	800228e <UI_SetReg+0x64>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 80022f4:	6858      	ldr	r0, [r3, #4]
 80022f6:	b221      	sxth	r1, r4
 80022f8:	e7ce      	b.n	8002298 <UI_SetReg+0x6e>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 80022fa:	6858      	ldr	r0, [r3, #4]
 80022fc:	b221      	sxth	r1, r4
 80022fe:	e7d0      	b.n	80022a2 <UI_SetReg+0x78>
      currComp = MCI_GetIqdref(pMCI);
 8002300:	0030      	movs	r0, r6
 8002302:	f7fe fc29 	bl	8000b58 <MCI_GetIqdref>
      currComp.d = (int16_t)wValue;
 8002306:	ab01      	add	r3, sp, #4
      currComp = MCI_GetIqdref(pMCI);
 8002308:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 800230a:	805c      	strh	r4, [r3, #2]
 800230c:	e7ea      	b.n	80022e4 <UI_SetReg+0xba>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 800230e:	6898      	ldr	r0, [r3, #8]
 8002310:	b221      	sxth	r1, r4
 8002312:	e7bc      	b.n	800228e <UI_SetReg+0x64>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 8002314:	6898      	ldr	r0, [r3, #8]
 8002316:	b221      	sxth	r1, r4
 8002318:	e7be      	b.n	8002298 <UI_SetReg+0x6e>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 800231a:	6898      	ldr	r0, [r3, #8]
 800231c:	b221      	sxth	r1, r4
 800231e:	e7c0      	b.n	80022a2 <UI_SetReg+0x78>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 8002320:	0030      	movs	r0, r6
 8002322:	b221      	sxth	r1, r4
 8002324:	f7fe fc46 	bl	8000bb4 <MCI_SetIdref>
 8002328:	e7ad      	b.n	8002286 <UI_SetReg+0x5c>

0800232a <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 800232a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800232c:	0003      	movs	r3, r0
 800232e:	332c      	adds	r3, #44	; 0x2c
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	6a02      	ldr	r2, [r0, #32]
{
 8002334:	0006      	movs	r6, r0
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002336:	009b      	lsls	r3, r3, #2

  switch (bCmdID)
 8002338:	1e48      	subs	r0, r1, #1
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800233a:	589d      	ldr	r5, [r3, r2]
  switch (bCmdID)
 800233c:	280e      	cmp	r0, #14
 800233e:	d809      	bhi.n	8002354 <UI_ExecCmd+0x2a>
 8002340:	f7fd feec 	bl	800011c <__gnu_thumb1_case_uqi>
 8002344:	1d0b1f1a 	.word	0x1d0b1f1a
 8002348:	2723151d 	.word	0x2723151d
 800234c:	0808082b 	.word	0x0808082b
 8002350:	1f08      	.short	0x1f08
 8002352:	2f          	.byte	0x2f
 8002353:	00          	.byte	0x00
 8002354:	2400      	movs	r4, #0
    retVal = false;
	}
    break;
  }
  return retVal;
}
 8002356:	0020      	movs	r0, r4
 8002358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (MCI_GetSTMState(pMCI) == RUN)
 800235a:	0028      	movs	r0, r5
 800235c:	f7fe fbb3 	bl	8000ac6 <MCI_GetSTMState>
  bool retVal = true;
 8002360:	2401      	movs	r4, #1
      if (MCI_GetSTMState(pMCI) == RUN)
 8002362:	2806      	cmp	r0, #6
 8002364:	d1f7      	bne.n	8002356 <UI_ExecCmd+0x2c>
        MCI_StopRamp(pMCI);
 8002366:	0028      	movs	r0, r5
 8002368:	f7fe fbbc 	bl	8000ae4 <MCI_StopRamp>
 800236c:	e7f3      	b.n	8002356 <UI_ExecCmd+0x2c>
      if (MCI_GetSTMState(pMCI) == IDLE)
 800236e:	0028      	movs	r0, r5
 8002370:	f7fe fba9 	bl	8000ac6 <MCI_GetSTMState>
 8002374:	2800      	cmp	r0, #0
 8002376:	d104      	bne.n	8002382 <UI_ExecCmd+0x58>
        MCI_StartMotor(pMCI);
 8002378:	0028      	movs	r0, r5
 800237a:	f7fe fb52 	bl	8000a22 <MCI_StartMotor>
  bool retVal = true;
 800237e:	2401      	movs	r4, #1
 8002380:	e7e9      	b.n	8002356 <UI_ExecCmd+0x2c>
        MCI_StopMotor(pMCI);
 8002382:	0028      	movs	r0, r5
 8002384:	f7fe fb58 	bl	8000a38 <MCI_StopMotor>
 8002388:	e7f9      	b.n	800237e <UI_ExecCmd+0x54>
      MCI_FaultAcknowledged(pMCI);
 800238a:	0028      	movs	r0, r5
 800238c:	f7fe fb5a 	bl	8000a44 <MCI_FaultAcknowledged>
    break;
 8002390:	e7f5      	b.n	800237e <UI_ExecCmd+0x54>
      MCI_EncoderAlign(pMCI);
 8002392:	0028      	movs	r0, r5
 8002394:	f7fe fb5b 	bl	8000a4e <MCI_EncoderAlign>
    break;
 8002398:	e7f1      	b.n	800237e <UI_ExecCmd+0x54>
      MCI_Clear_Iqdref(pMCI);
 800239a:	0028      	movs	r0, r5
 800239c:	f7fe fc0e 	bl	8000bbc <MCI_Clear_Iqdref>
    break;
 80023a0:	e7ed      	b.n	800237e <UI_ExecCmd+0x54>
    	if (MCI_GetSTMState(pMCI) == IDLE)
 80023a2:	0028      	movs	r0, r5
 80023a4:	f7fe fb8f 	bl	8000ac6 <MCI_GetSTMState>
 80023a8:	362d      	adds	r6, #45	; 0x2d
 80023aa:	0007      	movs	r7, r0
    	        MCI_StartMotor(pMCI);
 80023ac:	0028      	movs	r0, r5
    	if (MCI_GetSTMState(pMCI) == IDLE)
 80023ae:	2f00      	cmp	r7, #0
 80023b0:	d103      	bne.n	80023ba <UI_ExecCmd+0x90>
    	        MCI_StartMotor(pMCI);
 80023b2:	f7fe fb36 	bl	8000a22 <MCI_StartMotor>
    	        pHandle->test = 0;
 80023b6:	7037      	strb	r7, [r6, #0]
 80023b8:	e7e1      	b.n	800237e <UI_ExecCmd+0x54>
    	        pHandle->test = 1;
 80023ba:	2401      	movs	r4, #1
    	        MCI_StopMotor(pMCI);
 80023bc:	f7fe fb3c 	bl	8000a38 <MCI_StopMotor>
    	        pHandle->test = 1;
 80023c0:	7034      	strb	r4, [r6, #0]
 80023c2:	e7c8      	b.n	8002356 <UI_ExecCmd+0x2c>

080023c4 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 80023c4:	b570      	push	{r4, r5, r6, lr}
 80023c6:	0004      	movs	r4, r0
 80023c8:	0008      	movs	r0, r1
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 80023ca:	2106      	movs	r1, #6
{
 80023cc:	0015      	movs	r5, r2
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 80023ce:	f7fd ff4d 	bl	800026c <__divsi3>
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80023d2:	0023      	movs	r3, r4
 80023d4:	332c      	adds	r3, #44	; 0x2c
 80023d6:	781b      	ldrb	r3, [r3, #0]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 80023d8:	b201      	sxth	r1, r0
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80023da:	6a20      	ldr	r0, [r4, #32]
 80023dc:	009b      	lsls	r3, r3, #2
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 80023de:	002a      	movs	r2, r5
 80023e0:	5818      	ldr	r0, [r3, r0]
 80023e2:	f7fe fb05 	bl	80009f0 <MCI_ExecSpeedRamp>
  return true;
}
 80023e6:	2001      	movs	r0, #1
 80023e8:	bd70      	pop	{r4, r5, r6, pc}

080023ea <UI_ExecTorqueRamp>:
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80023ea:	0003      	movs	r3, r0
{
 80023ec:	b510      	push	{r4, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80023ee:	332c      	adds	r3, #44	; 0x2c
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	6a00      	ldr	r0, [r0, #32]
 80023f4:	009b      	lsls	r3, r3, #2

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 80023f6:	5818      	ldr	r0, [r3, r0]
 80023f8:	f7fe fb02 	bl	8000a00 <MCI_ExecTorqueRamp>
  return true;
}
 80023fc:	2001      	movs	r0, #1
 80023fe:	bd10      	pop	{r4, pc}

08002400 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 8002400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002402:	001e      	movs	r6, r3
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002404:	0003      	movs	r3, r0
{
 8002406:	0017      	movs	r7, r2
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002408:	6a42      	ldr	r2, [r0, #36]	; 0x24
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
  }
  else
  {
    hRetVal = false;
 800240a:	2000      	movs	r0, #0
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 800240c:	332c      	adds	r3, #44	; 0x2c
 800240e:	781b      	ldrb	r3, [r3, #0]
{
 8002410:	000c      	movs	r4, r1
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	589b      	ldr	r3, [r3, r2]
 8002416:	695d      	ldr	r5, [r3, #20]
  if (pRevupCtrl)
 8002418:	4285      	cmp	r5, r0
 800241a:	d00f      	beq.n	800243c <UI_GetRevupData+0x3c>
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 800241c:	0028      	movs	r0, r5
 800241e:	f003 fb3d 	bl	8005a9c <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002422:	0021      	movs	r1, r4
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8002424:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002426:	0028      	movs	r0, r5
 8002428:	f003 fb3e 	bl	8005aa8 <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 800242c:	0021      	movs	r1, r4
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 800242e:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002430:	0028      	movs	r0, r5
 8002432:	f003 fb41 	bl	8005ab8 <RUC_GetPhaseFinalTorque>
 8002436:	9b06      	ldr	r3, [sp, #24]
 8002438:	8018      	strh	r0, [r3, #0]
  bool hRetVal = true;
 800243a:	2001      	movs	r0, #1
  }
  return hRetVal;
}
 800243c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800243e <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 800243e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002440:	001d      	movs	r5, r3
 8002442:	ab06      	add	r3, sp, #24
 8002444:	2600      	movs	r6, #0
 8002446:	5f9e      	ldrsh	r6, [r3, r6]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002448:	0003      	movs	r3, r0
{
 800244a:	000c      	movs	r4, r1
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 800244c:	332c      	adds	r3, #44	; 0x2c
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	585b      	ldr	r3, [r3, r1]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8002456:	0021      	movs	r1, r4
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002458:	695f      	ldr	r7, [r3, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 800245a:	0038      	movs	r0, r7
 800245c:	f003 fb0c 	bl	8005a78 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 8002460:	002a      	movs	r2, r5
 8002462:	0038      	movs	r0, r7
 8002464:	0021      	movs	r1, r4
 8002466:	f003 fb0d 	bl	8005a84 <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 800246a:	0038      	movs	r0, r7
 800246c:	0032      	movs	r2, r6
 800246e:	0021      	movs	r1, r4
 8002470:	f003 fb0e 	bl	8005a90 <RUC_SetPhaseFinalTorque>
  return true;
}
 8002474:	2001      	movs	r0, #1
 8002476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002478 <UI_SetCurrentReferences>:
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002478:	0003      	movs	r3, r0
{
 800247a:	b507      	push	{r0, r1, r2, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800247c:	332c      	adds	r3, #44	; 0x2c
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	6a00      	ldr	r0, [r0, #32]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	5818      	ldr	r0, [r3, r0]
  qd_t currComp;
  currComp.q = hIqRef;
 8002486:	ab01      	add	r3, sp, #4
 8002488:	8019      	strh	r1, [r3, #0]
  currComp.d = hIdRef;
 800248a:	805a      	strh	r2, [r3, #2]
  MCI_SetCurrentReferences(pMCI,currComp);
 800248c:	9901      	ldr	r1, [sp, #4]
 800248e:	f7fe fabe 	bl	8000a0e <MCI_SetCurrentReferences>
}
 8002492:	bd07      	pop	{r0, r1, r2, pc}

08002494 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 8002494:	2000      	movs	r0, #0
 8002496:	4770      	bx	lr

08002498 <UI_DACInit>:
  * @param  pHandle: Pointer on Handle structure of DACx UI component.
  * @retval none.
  */
__weak void UI_DACInit(UI_Handle_t *pHandle)
{
  if (pHandle->pFct_DACInit)
 8002498:	6943      	ldr	r3, [r0, #20]
{
 800249a:	b510      	push	{r4, lr}
  if (pHandle->pFct_DACInit)
 800249c:	2b00      	cmp	r3, #0
 800249e:	d000      	beq.n	80024a2 <UI_DACInit+0xa>
  {
	  pHandle->pFct_DACInit(pHandle);
 80024a0:	4798      	blx	r3
  }
}
 80024a2:	bd10      	pop	{r4, pc}

080024a4 <UI_DACExec>:
  * @param  pHandle: Pointer on Handle structure of DACx UI component.
  * @retval none.
  */
void UI_DACExec(UI_Handle_t *pHandle)
{
  if (pHandle->pFct_DACExec)
 80024a4:	6983      	ldr	r3, [r0, #24]
{
 80024a6:	b510      	push	{r4, lr}
  if (pHandle->pFct_DACExec)
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d000      	beq.n	80024ae <UI_DACExec+0xa>
  {
    pHandle->pFct_DACExec(pHandle);
 80024ac:	4798      	blx	r3
  }
}
 80024ae:	bd10      	pop	{r4, pc}

080024b0 <UI_SetDAC>:
  * @retval none.
  */
void UI_SetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                         MC_Protocol_REG_t bVariable)
{
  if (pHandle->pFctDACSetChannelConfig)
 80024b0:	6843      	ldr	r3, [r0, #4]
{
 80024b2:	b510      	push	{r4, lr}
  if (pHandle->pFctDACSetChannelConfig)
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d000      	beq.n	80024ba <UI_SetDAC+0xa>
  {
	  pHandle->pFctDACSetChannelConfig(pHandle, bChannel, bVariable);
 80024b8:	4798      	blx	r3
  }
}
 80024ba:	bd10      	pop	{r4, pc}

080024bc <UI_GetDAC>:
  *         It must be one of the exported UI register (Example: MC_PROTOCOL_REG_I_A).
  */
__weak MC_Protocol_REG_t UI_GetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  MC_Protocol_REG_t retVal = MC_PROTOCOL_REG_UNDEFINED;
  if (pHandle->pFctDACGetChannelConfig)
 80024bc:	6882      	ldr	r2, [r0, #8]
{
 80024be:	0003      	movs	r3, r0
 80024c0:	b510      	push	{r4, lr}
  MC_Protocol_REG_t retVal = MC_PROTOCOL_REG_UNDEFINED;
 80024c2:	2089      	movs	r0, #137	; 0x89
  if (pHandle->pFctDACGetChannelConfig)
 80024c4:	2a00      	cmp	r2, #0
 80024c6:	d001      	beq.n	80024cc <UI_GetDAC+0x10>
  {
    retVal = pHandle->pFctDACGetChannelConfig(pHandle, bChannel);
 80024c8:	0018      	movs	r0, r3
 80024ca:	4790      	blx	r2
  }
  return retVal;
}
 80024cc:	bd10      	pop	{r4, pc}
	...

080024d0 <UI_GetReg>:
{
 80024d0:	b570      	push	{r4, r5, r6, lr}
 80024d2:	0004      	movs	r4, r0
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80024d4:	0023      	movs	r3, r4
 80024d6:	332c      	adds	r3, #44	; 0x2c
 80024d8:	781e      	ldrb	r6, [r3, #0]
{
 80024da:	0008      	movs	r0, r1
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80024dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80024de:	6a21      	ldr	r1, [r4, #32]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80024e0:	00b6      	lsls	r6, r6, #2
 80024e2:	599b      	ldr	r3, [r3, r6]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80024e4:	598d      	ldr	r5, [r1, r6]
{
 80024e6:	b08c      	sub	sp, #48	; 0x30
  if ( success != (bool *) 0 )
 80024e8:	2a00      	cmp	r2, #0
 80024ea:	d100      	bne.n	80024ee <UI_GetReg+0x1e>
 80024ec:	e08f      	b.n	800260e <UI_GetReg+0x13e>
    *success = true;
 80024ee:	2101      	movs	r1, #1
 80024f0:	7011      	strb	r1, [r2, #0]
  switch (bRegID)
 80024f2:	2881      	cmp	r0, #129	; 0x81
 80024f4:	d900      	bls.n	80024f8 <UI_GetReg+0x28>
 80024f6:	e1d5      	b.n	80028a4 <UI_GetReg+0x3d4>
 80024f8:	f7fd fe24 	bl	8000144 <__gnu_thumb1_case_uhi>
 80024fc:	01020085 	.word	0x01020085
 8002500:	012b0106 	.word	0x012b0106
 8002504:	0111010a 	.word	0x0111010a
 8002508:	01190115 	.word	0x01190115
 800250c:	014601bc 	.word	0x014601bc
 8002510:	014a0148 	.word	0x014a0148
 8002514:	014c01c0 	.word	0x014c01c0
 8002518:	0150014e 	.word	0x0150014e
 800251c:	01d401d4 	.word	0x01d401d4
 8002520:	01d401d4 	.word	0x01d401d4
 8002524:	01d401d4 	.word	0x01d401d4
 8002528:	01d401d4 	.word	0x01d401d4
 800252c:	011d01d4 	.word	0x011d01d4
 8002530:	01520121 	.word	0x01520121
 8002534:	015b0156 	.word	0x015b0156
 8002538:	01980125 	.word	0x01980125
 800253c:	01d4019d 	.word	0x01d4019d
 8002540:	01a801a2 	.word	0x01a801a2
 8002544:	01b001ac 	.word	0x01b001ac
 8002548:	019801b4 	.word	0x019801b4
 800254c:	01bc019d 	.word	0x01bc019d
 8002550:	01c401c0 	.word	0x01c401c0
 8002554:	01cc01c8 	.word	0x01cc01c8
 8002558:	016a01d0 	.word	0x016a01d0
 800255c:	01d4017d 	.word	0x01d4017d
 8002560:	01d401d4 	.word	0x01d401d4
 8002564:	01d401d4 	.word	0x01d401d4
 8002568:	01d401d4 	.word	0x01d401d4
 800256c:	01d401d4 	.word	0x01d401d4
 8002570:	01d401d4 	.word	0x01d401d4
 8002574:	015d01d4 	.word	0x015d01d4
 8002578:	01900163 	.word	0x01900163
 800257c:	01c00194 	.word	0x01c00194
 8002580:	01d401d4 	.word	0x01d401d4
 8002584:	01d401d4 	.word	0x01d401d4
 8002588:	01d401d4 	.word	0x01d401d4
 800258c:	01d401d4 	.word	0x01d401d4
 8002590:	01d401d4 	.word	0x01d401d4
 8002594:	01d401d4 	.word	0x01d401d4
 8002598:	01d401d4 	.word	0x01d401d4
 800259c:	01d401d4 	.word	0x01d401d4
 80025a0:	01d401d4 	.word	0x01d401d4
 80025a4:	01d401d4 	.word	0x01d401d4
 80025a8:	01d401d4 	.word	0x01d401d4
 80025ac:	01d401d4 	.word	0x01d401d4
 80025b0:	012f01d4 	.word	0x012f01d4
 80025b4:	01d401d4 	.word	0x01d401d4
 80025b8:	01d401d4 	.word	0x01d401d4
 80025bc:	01d401d4 	.word	0x01d401d4
 80025c0:	01d401d4 	.word	0x01d401d4
 80025c4:	01d401d4 	.word	0x01d401d4
 80025c8:	01d401d4 	.word	0x01d401d4
 80025cc:	01d401d4 	.word	0x01d401d4
 80025d0:	01d401d4 	.word	0x01d401d4
 80025d4:	01d401d4 	.word	0x01d401d4
 80025d8:	0142013e 	.word	0x0142013e
 80025dc:	01d40082 	.word	0x01d40082
 80025e0:	01290129 	.word	0x01290129
 80025e4:	01d401d4 	.word	0x01d401d4
 80025e8:	01d401d4 	.word	0x01d401d4
 80025ec:	01d401d4 	.word	0x01d401d4
 80025f0:	01d401d4 	.word	0x01d401d4
 80025f4:	01d401d4 	.word	0x01d401d4
 80025f8:	01d401d4 	.word	0x01d401d4
 80025fc:	016101d4 	.word	0x016101d4
      bRetVal = (int32_t)(MC_UID);
 8002600:	489a      	ldr	r0, [pc, #616]	; (800286c <UI_GetReg+0x39c>)
}
 8002602:	b00c      	add	sp, #48	; 0x30
 8002604:	bd70      	pop	{r4, r5, r6, pc}
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 8002606:	0020      	movs	r0, r4
 8002608:	f7ff fe0c 	bl	8002224 <UI_GetSelectedMC>
    break;
 800260c:	e7f9      	b.n	8002602 <UI_GetReg+0x132>
  switch (bRegID)
 800260e:	2873      	cmp	r0, #115	; 0x73
 8002610:	d900      	bls.n	8002614 <UI_GetReg+0x144>
 8002612:	e0d4      	b.n	80027be <UI_GetReg+0x2ee>
 8002614:	f7fd fd8c 	bl	8000130 <__gnu_thumb1_case_shi>
 8002618:	0074fff7 	.word	0x0074fff7
 800261c:	009d0078 	.word	0x009d0078
 8002620:	0083007c 	.word	0x0083007c
 8002624:	008b0087 	.word	0x008b0087
 8002628:	00b8012e 	.word	0x00b8012e
 800262c:	00bc00ba 	.word	0x00bc00ba
 8002630:	00be0132 	.word	0x00be0132
 8002634:	00c200c0 	.word	0x00c200c0
 8002638:	00d300d3 	.word	0x00d300d3
 800263c:	00d300d3 	.word	0x00d300d3
 8002640:	00d300d3 	.word	0x00d300d3
 8002644:	00d300d3 	.word	0x00d300d3
 8002648:	008f00d3 	.word	0x008f00d3
 800264c:	00c40093 	.word	0x00c40093
 8002650:	00cd00c8 	.word	0x00cd00c8
 8002654:	010a0097 	.word	0x010a0097
 8002658:	00d3010f 	.word	0x00d3010f
 800265c:	011a0114 	.word	0x011a0114
 8002660:	0122011e 	.word	0x0122011e
 8002664:	010a0126 	.word	0x010a0126
 8002668:	012e010f 	.word	0x012e010f
 800266c:	01360132 	.word	0x01360132
 8002670:	013e013a 	.word	0x013e013a
 8002674:	00dc0142 	.word	0x00dc0142
 8002678:	00d300ef 	.word	0x00d300ef
 800267c:	00d300d3 	.word	0x00d300d3
 8002680:	00d300d3 	.word	0x00d300d3
 8002684:	00d300d3 	.word	0x00d300d3
 8002688:	00d300d3 	.word	0x00d300d3
 800268c:	00d300d3 	.word	0x00d300d3
 8002690:	00cf00d3 	.word	0x00cf00d3
 8002694:	010200d5 	.word	0x010200d5
 8002698:	01320106 	.word	0x01320106
 800269c:	00d300d3 	.word	0x00d300d3
 80026a0:	00d300d3 	.word	0x00d300d3
 80026a4:	00d300d3 	.word	0x00d300d3
 80026a8:	00d300d3 	.word	0x00d300d3
 80026ac:	00d300d3 	.word	0x00d300d3
 80026b0:	00d300d3 	.word	0x00d300d3
 80026b4:	00d300d3 	.word	0x00d300d3
 80026b8:	00d300d3 	.word	0x00d300d3
 80026bc:	00d300d3 	.word	0x00d300d3
 80026c0:	00d300d3 	.word	0x00d300d3
 80026c4:	00d300d3 	.word	0x00d300d3
 80026c8:	00d300d3 	.word	0x00d300d3
 80026cc:	00a100d3 	.word	0x00a100d3
 80026d0:	00d300d3 	.word	0x00d300d3
 80026d4:	00d300d3 	.word	0x00d300d3
 80026d8:	00d300d3 	.word	0x00d300d3
 80026dc:	00d300d3 	.word	0x00d300d3
 80026e0:	00d300d3 	.word	0x00d300d3
 80026e4:	00d300d3 	.word	0x00d300d3
 80026e8:	00d300d3 	.word	0x00d300d3
 80026ec:	00d300d3 	.word	0x00d300d3
 80026f0:	00d300d3 	.word	0x00d300d3
 80026f4:	00b400b0 	.word	0x00b400b0
 80026f8:	00d3fff4 	.word	0x00d3fff4
 80026fc:	009b009b 	.word	0x009b009b
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8002700:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002702:	f003 f8c5 	bl	8005890 <STM_GetFaultState>
	break;
 8002706:	e77c      	b.n	8002602 <UI_GetReg+0x132>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8002708:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800270a:	f003 f8b5 	bl	8005878 <STM_GetState>
	break;
 800270e:	e778      	b.n	8002602 <UI_GetReg+0x132>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8002710:	0028      	movs	r0, r5
 8002712:	f7fe f9f3 	bl	8000afc <MCI_GetMecSpeedRefUnit>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 8002716:	0003      	movs	r3, r0
 8002718:	2006      	movs	r0, #6
 800271a:	4358      	muls	r0, r3
    break;
 800271c:	e771      	b.n	8002602 <UI_GetReg+0x132>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 800271e:	6818      	ldr	r0, [r3, #0]
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 8002720:	f002 f971 	bl	8004a06 <PID_GetKP>
    break;
 8002724:	e76d      	b.n	8002602 <UI_GetReg+0x132>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 8002726:	6818      	ldr	r0, [r3, #0]
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 8002728:	f002 f970 	bl	8004a0c <PID_GetKI>
    break;
 800272c:	e769      	b.n	8002602 <UI_GetReg+0x132>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 800272e:	6818      	ldr	r0, [r3, #0]
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 8002730:	f002 f977 	bl	8004a22 <PID_GetKD>
    break;
 8002734:	e765      	b.n	8002602 <UI_GetReg+0x132>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 8002736:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002738:	f001 fcf2 	bl	8004120 <VBS_GetAvBusVoltage_V>
    break;
 800273c:	e761      	b.n	8002602 <UI_GetReg+0x132>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 800273e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002740:	f002 f942 	bl	80049c8 <NTC_GetAvTemp_C>
    break;
 8002744:	e75d      	b.n	8002602 <UI_GetReg+0x132>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 8002746:	0028      	movs	r0, r5
 8002748:	f7fe f9d1 	bl	8000aee <MCI_GetAvrgMecSpeedUnit>
 800274c:	e7e3      	b.n	8002716 <UI_GetReg+0x246>
      bRetVal = CTRBDID;
 800274e:	4848      	ldr	r0, [pc, #288]	; (8002870 <UI_GetReg+0x3a0>)
 8002750:	e757      	b.n	8002602 <UI_GetReg+0x132>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8002752:	0028      	movs	r0, r5
 8002754:	f7fe f9bc 	bl	8000ad0 <MCI_GetControlMode>
    break;
 8002758:	e753      	b.n	8002602 <UI_GetReg+0x132>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 800275a:	0028      	movs	r0, r5
 800275c:	f7fe f9b8 	bl	8000ad0 <MCI_GetControlMode>
 8002760:	2406      	movs	r4, #6
 8002762:	2801      	cmp	r0, #1
 8002764:	d104      	bne.n	8002770 <UI_GetReg+0x2a0>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8002766:	0028      	movs	r0, r5
 8002768:	f7fe f9b4 	bl	8000ad4 <MCI_GetLastRampFinalSpeed>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 800276c:	4360      	muls	r0, r4
 800276e:	e748      	b.n	8002602 <UI_GetReg+0x132>
 8002770:	0028      	movs	r0, r5
 8002772:	f7fe f9c3 	bl	8000afc <MCI_GetMecSpeedRefUnit>
 8002776:	e7f9      	b.n	800276c <UI_GetReg+0x29c>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	f002 f94c 	bl	8004a16 <PID_GetKPDivisor>
    break;
 800277e:	e740      	b.n	8002602 <UI_GetReg+0x132>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 8002780:	6818      	ldr	r0, [r3, #0]
 8002782:	f002 f94a 	bl	8004a1a <PID_GetKIDivisor>
    break;
 8002786:	e73c      	b.n	8002602 <UI_GetReg+0x132>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 8002788:	6858      	ldr	r0, [r3, #4]
 800278a:	e7c9      	b.n	8002720 <UI_GetReg+0x250>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 800278c:	6858      	ldr	r0, [r3, #4]
 800278e:	e7cb      	b.n	8002728 <UI_GetReg+0x258>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 8002790:	6858      	ldr	r0, [r3, #4]
 8002792:	e7cd      	b.n	8002730 <UI_GetReg+0x260>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 8002794:	6898      	ldr	r0, [r3, #8]
 8002796:	e7c3      	b.n	8002720 <UI_GetReg+0x250>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 8002798:	6898      	ldr	r0, [r3, #8]
 800279a:	e7c5      	b.n	8002728 <UI_GetReg+0x258>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 800279c:	6898      	ldr	r0, [r3, #8]
 800279e:	e7c7      	b.n	8002730 <UI_GetReg+0x260>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 80027a0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80027a2:	f002 f8ca 	bl	800493a <MPM_GetAvrgElMotorPowerW>
    break;
 80027a6:	e72c      	b.n	8002602 <UI_GetReg+0x132>
      MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH0);
 80027a8:	2100      	movs	r1, #0
      MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH1);
 80027aa:	0020      	movs	r0, r4
 80027ac:	f7ff fe86 	bl	80024bc <UI_GetDAC>
    break;
 80027b0:	e727      	b.n	8002602 <UI_GetReg+0x132>
      MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH1);
 80027b2:	2101      	movs	r1, #1
 80027b4:	e7f9      	b.n	80027aa <UI_GetReg+0x2da>
      if (pHandle->pFctDACGetUserChannelValue)
 80027b6:	6923      	ldr	r3, [r4, #16]
        bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 0);
 80027b8:	2100      	movs	r1, #0
      if (pHandle->pFctDACGetUserChannelValue)
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d105      	bne.n	80027ca <UI_GetReg+0x2fa>
        bRetVal = (uint32_t) 0;
 80027be:	2000      	movs	r0, #0
 80027c0:	e71f      	b.n	8002602 <UI_GetReg+0x132>
      if (pHandle->pFctDACGetUserChannelValue)
 80027c2:	6923      	ldr	r3, [r4, #16]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0fa      	beq.n	80027be <UI_GetReg+0x2ee>
        bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 1);
 80027c8:	2101      	movs	r1, #1
 80027ca:	0020      	movs	r0, r4
 80027cc:	4798      	blx	r3
 80027ce:	e718      	b.n	8002602 <UI_GetReg+0x132>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80027d0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 80027d2:	2000      	movs	r0, #0
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80027d4:	5992      	ldr	r2, [r2, r6]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80027d6:	0f11      	lsrs	r1, r2, #28
 80027d8:	3901      	subs	r1, #1
 80027da:	2901      	cmp	r1, #1
 80027dc:	d800      	bhi.n	80027e0 <UI_GetReg+0x310>
        pSPD = pMCT->pSpeedSensorMain;
 80027de:	6998      	ldr	r0, [r3, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80027e0:	0112      	lsls	r2, r2, #4
 80027e2:	0f12      	lsrs	r2, r2, #28
 80027e4:	3a01      	subs	r2, #1
 80027e6:	2a01      	cmp	r2, #1
 80027e8:	d800      	bhi.n	80027ec <UI_GetReg+0x31c>
        pSPD = pMCT->pSpeedSensorAux;
 80027ea:	69d8      	ldr	r0, [r3, #28]
      if (pSPD != MC_NULL)
 80027ec:	2800      	cmp	r0, #0
 80027ee:	d0e6      	beq.n	80027be <UI_GetReg+0x2ee>
        bRetVal = SPD_GetElAngle(pSPD);
 80027f0:	f002 feb6 	bl	8005560 <SPD_GetElAngle>
 80027f4:	e705      	b.n	8002602 <UI_GetReg+0x132>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80027f6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 80027f8:	2000      	movs	r0, #0
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80027fa:	5992      	ldr	r2, [r2, r6]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80027fc:	0f11      	lsrs	r1, r2, #28
 80027fe:	3901      	subs	r1, #1
 8002800:	2901      	cmp	r1, #1
 8002802:	d800      	bhi.n	8002806 <UI_GetReg+0x336>
        pSPD = pMCT->pSpeedSensorMain;
 8002804:	6998      	ldr	r0, [r3, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002806:	0112      	lsls	r2, r2, #4
 8002808:	0f12      	lsrs	r2, r2, #28
 800280a:	3a01      	subs	r2, #1
 800280c:	2a01      	cmp	r2, #1
 800280e:	d800      	bhi.n	8002812 <UI_GetReg+0x342>
        pSPD = pMCT->pSpeedSensorAux;
 8002810:	69d8      	ldr	r0, [r3, #28]
      if (pSPD != MC_NULL)
 8002812:	2800      	cmp	r0, #0
 8002814:	d0d3      	beq.n	80027be <UI_GetReg+0x2ee>
        bRetVal = SPD_GetS16Speed(pSPD);
 8002816:	f002 fed8 	bl	80055ca <SPD_GetS16Speed>
 800281a:	e6f2      	b.n	8002602 <UI_GetReg+0x132>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 800281c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800281e:	f002 ff82 	bl	8005726 <STC_GetMaxAppPositiveMecSpeedUnit>
 8002822:	e778      	b.n	8002716 <UI_GetReg+0x246>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 8002824:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002826:	f002 ff80 	bl	800572a <STC_GetMinAppNegativeMecSpeedUnit>
 800282a:	e774      	b.n	8002716 <UI_GetReg+0x246>
      bRetVal = MCI_GetIqd(pMCI).q;
 800282c:	0028      	movs	r0, r5
 800282e:	f7fe f985 	bl	8000b3c <MCI_GetIqd>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 8002832:	b200      	sxth	r0, r0
    break;
 8002834:	e6e5      	b.n	8002602 <UI_GetReg+0x132>
      bRetVal = MCI_GetIqd(pMCI).d;
 8002836:	0028      	movs	r0, r5
 8002838:	f7fe f980 	bl	8000b3c <MCI_GetIqd>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 800283c:	1400      	asrs	r0, r0, #16
    break;
 800283e:	e6e0      	b.n	8002602 <UI_GetReg+0x132>
      if (pMCT->pRevupCtrl)
 8002840:	6958      	ldr	r0, [r3, #20]
 8002842:	2800      	cmp	r0, #0
 8002844:	d0bb      	beq.n	80027be <UI_GetReg+0x2ee>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 8002846:	f003 f93f 	bl	8005ac8 <RUC_GetNumberOfPhases>
 800284a:	e6da      	b.n	8002602 <UI_GetReg+0x132>
      bRetVal = MCI_GetIab(pMCI).a;
 800284c:	0028      	movs	r0, r5
 800284e:	f7fe f95a 	bl	8000b06 <MCI_GetIab>
 8002852:	e7ee      	b.n	8002832 <UI_GetReg+0x362>
      bRetVal = MCI_GetIab(pMCI).b;
 8002854:	0028      	movs	r0, r5
 8002856:	f7fe f956 	bl	8000b06 <MCI_GetIab>
 800285a:	e7ef      	b.n	800283c <UI_GetReg+0x36c>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 800285c:	0028      	movs	r0, r5
 800285e:	f7fe f95f 	bl	8000b20 <MCI_GetIalphabeta>
 8002862:	e7e6      	b.n	8002832 <UI_GetReg+0x362>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 8002864:	0028      	movs	r0, r5
 8002866:	f7fe f95b 	bl	8000b20 <MCI_GetIalphabeta>
 800286a:	e7e7      	b.n	800283c <UI_GetReg+0x36c>
 800286c:	34a6847a 	.word	0x34a6847a
 8002870:	0000271a 	.word	0x0000271a
      bRetVal = MCI_GetIqdref(pMCI).q;
 8002874:	0028      	movs	r0, r5
 8002876:	f7fe f96f 	bl	8000b58 <MCI_GetIqdref>
 800287a:	e7da      	b.n	8002832 <UI_GetReg+0x362>
      bRetVal = MCI_GetIqdref(pMCI).d;
 800287c:	0028      	movs	r0, r5
 800287e:	f7fe f96b 	bl	8000b58 <MCI_GetIqdref>
 8002882:	e7db      	b.n	800283c <UI_GetReg+0x36c>
      bRetVal = MCI_GetVqd(pMCI).q;
 8002884:	0028      	movs	r0, r5
 8002886:	f7fe f975 	bl	8000b74 <MCI_GetVqd>
 800288a:	e7d2      	b.n	8002832 <UI_GetReg+0x362>
      bRetVal = MCI_GetVqd(pMCI).d;
 800288c:	0028      	movs	r0, r5
 800288e:	f7fe f971 	bl	8000b74 <MCI_GetVqd>
 8002892:	e7d3      	b.n	800283c <UI_GetReg+0x36c>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 8002894:	0028      	movs	r0, r5
 8002896:	f7fe f97b 	bl	8000b90 <MCI_GetValphabeta>
 800289a:	e7ca      	b.n	8002832 <UI_GetReg+0x362>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 800289c:	0028      	movs	r0, r5
 800289e:	f7fe f977 	bl	8000b90 <MCI_GetValphabeta>
 80028a2:	e7cb      	b.n	800283c <UI_GetReg+0x36c>
        *success = false;
 80028a4:	2000      	movs	r0, #0
 80028a6:	7010      	strb	r0, [r2, #0]
  return bRetVal;
 80028a8:	e6ab      	b.n	8002602 <UI_GetReg+0x132>
 80028aa:	46c0      	nop			; (mov r8, r8)

080028ac <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80028ac:	4770      	bx	lr
	...

080028b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028b0:	b570      	push	{r4, r5, r6, lr}
 80028b2:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028b4:	20fa      	movs	r0, #250	; 0xfa
 80028b6:	4b0d      	ldr	r3, [pc, #52]	; (80028ec <HAL_InitTick+0x3c>)
 80028b8:	0080      	lsls	r0, r0, #2
 80028ba:	7819      	ldrb	r1, [r3, #0]
 80028bc:	f7fd fc4c 	bl	8000158 <__udivsi3>
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_InitTick+0x40>)
 80028c2:	0001      	movs	r1, r0
 80028c4:	6818      	ldr	r0, [r3, #0]
 80028c6:	f7fd fc47 	bl	8000158 <__udivsi3>
 80028ca:	f000 f9ad 	bl	8002c28 <HAL_SYSTICK_Config>
 80028ce:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 80028d0:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028d2:	2c00      	cmp	r4, #0
 80028d4:	d109      	bne.n	80028ea <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028d6:	2d03      	cmp	r5, #3
 80028d8:	d807      	bhi.n	80028ea <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028da:	3802      	subs	r0, #2
 80028dc:	0022      	movs	r2, r4
 80028de:	0029      	movs	r1, r5
 80028e0:	f000 f96c 	bl	8002bbc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028e4:	0020      	movs	r0, r4
 80028e6:	4b03      	ldr	r3, [pc, #12]	; (80028f4 <HAL_InitTick+0x44>)
 80028e8:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 80028ea:	bd70      	pop	{r4, r5, r6, pc}
 80028ec:	20000620 	.word	0x20000620
 80028f0:	2000061c 	.word	0x2000061c
 80028f4:	20000624 	.word	0x20000624

080028f8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028f8:	2310      	movs	r3, #16
 80028fa:	4a06      	ldr	r2, [pc, #24]	; (8002914 <HAL_Init+0x1c>)
{
 80028fc:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028fe:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002900:	2002      	movs	r0, #2
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002902:	430b      	orrs	r3, r1
 8002904:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002906:	f7ff ffd3 	bl	80028b0 <HAL_InitTick>
  HAL_MspInit();
 800290a:	f7ff f96b 	bl	8001be4 <HAL_MspInit>
}
 800290e:	2000      	movs	r0, #0
 8002910:	bd10      	pop	{r4, pc}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	40022000 	.word	0x40022000

08002918 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002918:	4a03      	ldr	r2, [pc, #12]	; (8002928 <HAL_IncTick+0x10>)
 800291a:	4b04      	ldr	r3, [pc, #16]	; (800292c <HAL_IncTick+0x14>)
 800291c:	6811      	ldr	r1, [r2, #0]
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	185b      	adds	r3, r3, r1
 8002922:	6013      	str	r3, [r2, #0]
}
 8002924:	4770      	bx	lr
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	20000aac 	.word	0x20000aac
 800292c:	20000620 	.word	0x20000620

08002930 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002930:	4b01      	ldr	r3, [pc, #4]	; (8002938 <HAL_GetTick+0x8>)
 8002932:	6818      	ldr	r0, [r3, #0]
}
 8002934:	4770      	bx	lr
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	20000aac 	.word	0x20000aac

0800293c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800293c:	b570      	push	{r4, r5, r6, lr}
 800293e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002940:	f7ff fff6 	bl	8002930 <HAL_GetTick>
 8002944:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002946:	1c63      	adds	r3, r4, #1
 8002948:	d002      	beq.n	8002950 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800294a:	4b04      	ldr	r3, [pc, #16]	; (800295c <HAL_Delay+0x20>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002950:	f7ff ffee 	bl	8002930 <HAL_GetTick>
 8002954:	1b40      	subs	r0, r0, r5
 8002956:	42a0      	cmp	r0, r4
 8002958:	d3fa      	bcc.n	8002950 <HAL_Delay+0x14>
  {
  }
}
 800295a:	bd70      	pop	{r4, r5, r6, pc}
 800295c:	20000620 	.word	0x20000620

08002960 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002962:	0004      	movs	r4, r0
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 8002964:	2001      	movs	r0, #1
  if(hadc == NULL)
 8002966:	2c00      	cmp	r4, #0
 8002968:	d100      	bne.n	800296c <HAL_ADC_Init+0xc>
 800296a:	e080      	b.n	8002a6e <HAL_ADC_Init+0x10e>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800296c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800296e:	2b00      	cmp	r3, #0
 8002970:	d106      	bne.n	8002980 <HAL_ADC_Init+0x20>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002972:	0022      	movs	r2, r4
 8002974:	3234      	adds	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8002976:	63e3      	str	r3, [r4, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002978:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 800297a:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 800297c:	f7ff f94a 	bl	8001c14 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002980:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002982:	06db      	lsls	r3, r3, #27
 8002984:	d500      	bpl.n	8002988 <HAL_ADC_Init+0x28>
 8002986:	e087      	b.n	8002a98 <HAL_ADC_Init+0x138>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002988:	6823      	ldr	r3, [r4, #0]
 800298a:	2204      	movs	r2, #4
 800298c:	6899      	ldr	r1, [r3, #8]
 800298e:	0008      	movs	r0, r1
 8002990:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002992:	4211      	tst	r1, r2
 8002994:	d000      	beq.n	8002998 <HAL_ADC_Init+0x38>
 8002996:	e07f      	b.n	8002a98 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002998:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800299a:	4942      	ldr	r1, [pc, #264]	; (8002aa4 <HAL_ADC_Init+0x144>)
 800299c:	4011      	ands	r1, r2
 800299e:	2202      	movs	r2, #2
 80029a0:	430a      	orrs	r2, r1
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80029a2:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 80029a4:	63a2      	str	r2, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	400a      	ands	r2, r1
 80029aa:	2a01      	cmp	r2, #1
 80029ac:	d105      	bne.n	80029ba <HAL_ADC_Init+0x5a>
 80029ae:	6819      	ldr	r1, [r3, #0]
 80029b0:	4211      	tst	r1, r2
 80029b2:	d10e      	bne.n	80029d2 <HAL_ADC_Init+0x72>
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	0412      	lsls	r2, r2, #16
 80029b8:	d40b      	bmi.n	80029d2 <HAL_ADC_Init+0x72>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80029ba:	2118      	movs	r1, #24
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	438a      	bics	r2, r1
 80029c0:	68a1      	ldr	r1, [r4, #8]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80029c6:	6919      	ldr	r1, [r3, #16]
 80029c8:	6862      	ldr	r2, [r4, #4]
 80029ca:	0089      	lsls	r1, r1, #2
 80029cc:	0889      	lsrs	r1, r1, #2
 80029ce:	4311      	orrs	r1, r2
 80029d0:	6119      	str	r1, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80029d2:	68da      	ldr	r2, [r3, #12]
 80029d4:	4934      	ldr	r1, [pc, #208]	; (8002aa8 <HAL_ADC_Init+0x148>)
 80029d6:	400a      	ands	r2, r1
 80029d8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80029da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029dc:	7e26      	ldrb	r6, [r4, #24]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80029de:	1e57      	subs	r7, r2, #1
 80029e0:	1e7a      	subs	r2, r7, #1
 80029e2:	4197      	sbcs	r7, r2
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80029e4:	7e61      	ldrb	r1, [r4, #25]
 80029e6:	68e2      	ldr	r2, [r4, #12]
 80029e8:	03c9      	lsls	r1, r1, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029ea:	03b6      	lsls	r6, r6, #14
 80029ec:	430e      	orrs	r6, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80029ee:	7ea5      	ldrb	r5, [r4, #26]
 80029f0:	4316      	orrs	r6, r2
                 hadc->Init.DataAlign                                             |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80029f2:	6922      	ldr	r2, [r4, #16]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80029f4:	0369      	lsls	r1, r5, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80029f6:	033f      	lsls	r7, r7, #12
 80029f8:	430e      	orrs	r6, r1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80029fa:	2a02      	cmp	r2, #2
 80029fc:	d100      	bne.n	8002a00 <HAL_ADC_Init+0xa0>
 80029fe:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002a00:	1d62      	adds	r2, r4, #5
 8002a02:	7fd2      	ldrb	r2, [r2, #31]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a04:	7ee1      	ldrb	r1, [r4, #27]
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002a06:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002a08:	4332      	orrs	r2, r6
 8002a0a:	433a      	orrs	r2, r7
 8002a0c:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a0e:	2901      	cmp	r1, #1
 8002a10:	d104      	bne.n	8002a1c <HAL_ADC_Init+0xbc>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a12:	2d00      	cmp	r5, #0
 8002a14:	d12c      	bne.n	8002a70 <HAL_ADC_Init+0x110>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002a16:	2180      	movs	r1, #128	; 0x80
 8002a18:	0249      	lsls	r1, r1, #9
 8002a1a:	430a      	orrs	r2, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a1c:	20c2      	movs	r0, #194	; 0xc2
 8002a1e:	69e1      	ldr	r1, [r4, #28]
 8002a20:	30ff      	adds	r0, #255	; 0xff
 8002a22:	4281      	cmp	r1, r0
 8002a24:	d002      	beq.n	8002a2c <HAL_ADC_Init+0xcc>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002a26:	6a20      	ldr	r0, [r4, #32]
 8002a28:	4301      	orrs	r1, r0
 8002a2a:	430a      	orrs	r2, r1
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002a2c:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002a2e:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002a30:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002a32:	4311      	orrs	r1, r2
 8002a34:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002a36:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002a38:	4281      	cmp	r1, r0
 8002a3a:	d002      	beq.n	8002a42 <HAL_ADC_Init+0xe2>
 8002a3c:	1e48      	subs	r0, r1, #1
 8002a3e:	2806      	cmp	r0, #6
 8002a40:	d807      	bhi.n	8002a52 <HAL_ADC_Init+0xf2>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002a42:	2507      	movs	r5, #7
 8002a44:	6958      	ldr	r0, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002a46:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002a48:	43a8      	bics	r0, r5
 8002a4a:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002a4c:	6958      	ldr	r0, [r3, #20]
 8002a4e:	4301      	orrs	r1, r0
 8002a50:	6159      	str	r1, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	4915      	ldr	r1, [pc, #84]	; (8002aac <HAL_ADC_Init+0x14c>)
 8002a56:	400b      	ands	r3, r1
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d111      	bne.n	8002a80 <HAL_ADC_Init+0x120>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a5c:	2000      	movs	r0, #0
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002a5e:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8002a60:	63e0      	str	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8002a62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a64:	4393      	bics	r3, r2
 8002a66:	001a      	movs	r2, r3
 8002a68:	2301      	movs	r3, #1
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	63a3      	str	r3, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8002a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a70:	2020      	movs	r0, #32
 8002a72:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8002a74:	4328      	orrs	r0, r5
 8002a76:	63a0      	str	r0, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a78:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002a7a:	4301      	orrs	r1, r0
 8002a7c:	63e1      	str	r1, [r4, #60]	; 0x3c
 8002a7e:	e7cd      	b.n	8002a1c <HAL_ADC_Init+0xbc>
      ADC_STATE_CLR_SET(hadc->State,
 8002a80:	2212      	movs	r2, #18
 8002a82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a84:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8002a86:	4393      	bics	r3, r2
 8002a88:	001a      	movs	r2, r3
 8002a8a:	2310      	movs	r3, #16
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002a92:	4303      	orrs	r3, r0
 8002a94:	63e3      	str	r3, [r4, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 8002a96:	e7ea      	b.n	8002a6e <HAL_ADC_Init+0x10e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a98:	2310      	movs	r3, #16
 8002a9a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8002a9c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	63a3      	str	r3, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8002aa2:	e7e4      	b.n	8002a6e <HAL_ADC_Init+0x10e>
 8002aa4:	fffffefd 	.word	0xfffffefd
 8002aa8:	fffe0219 	.word	0xfffe0219
 8002aac:	833fffe7 	.word	0x833fffe7

08002ab0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8002ab2:	2200      	movs	r2, #0
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ab4:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8002ab6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002ab8:	3434      	adds	r4, #52	; 0x34
 8002aba:	7822      	ldrb	r2, [r4, #0]
{
 8002abc:	0003      	movs	r3, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002abe:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  __HAL_LOCK(hadc);
 8002ac0:	2002      	movs	r0, #2
 8002ac2:	2a01      	cmp	r2, #1
 8002ac4:	d02b      	beq.n	8002b1e <HAL_ADC_ConfigChannel+0x6e>
 8002ac6:	3801      	subs	r0, #1
 8002ac8:	7020      	strb	r0, [r4, #0]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	6896      	ldr	r6, [r2, #8]
 8002ace:	0776      	lsls	r6, r6, #29
 8002ad0:	d461      	bmi.n	8002b96 <HAL_ADC_ConfigChannel+0xe6>
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002ad2:	680b      	ldr	r3, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 8002ad4:	4f32      	ldr	r7, [pc, #200]	; (8002ba0 <HAL_ADC_ConfigChannel+0xf0>)
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002ad6:	4098      	lsls	r0, r3
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ad8:	001e      	movs	r6, r3
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002ada:	4684      	mov	ip, r0
    if (sConfig->Rank != ADC_RANK_NONE)
 8002adc:	6848      	ldr	r0, [r1, #4]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ade:	3e10      	subs	r6, #16
    if (sConfig->Rank != ADC_RANK_NONE)
 8002ae0:	42b8      	cmp	r0, r7
 8002ae2:	d040      	beq.n	8002b66 <HAL_ADC_ConfigChannel+0xb6>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002ae4:	4660      	mov	r0, ip
 8002ae6:	6a97      	ldr	r7, [r2, #40]	; 0x28
 8002ae8:	4338      	orrs	r0, r7
 8002aea:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002aec:	2080      	movs	r0, #128	; 0x80
 8002aee:	0540      	lsls	r0, r0, #21
 8002af0:	4285      	cmp	r5, r0
 8002af2:	d00f      	beq.n	8002b14 <HAL_ADC_ConfigChannel+0x64>
 8002af4:	3d01      	subs	r5, #1
 8002af6:	2d06      	cmp	r5, #6
 8002af8:	d90c      	bls.n	8002b14 <HAL_ADC_ConfigChannel+0x64>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002afa:	2007      	movs	r0, #7
 8002afc:	6955      	ldr	r5, [r2, #20]
 8002afe:	6889      	ldr	r1, [r1, #8]
 8002b00:	4005      	ands	r5, r0
 8002b02:	42a9      	cmp	r1, r5
 8002b04:	d006      	beq.n	8002b14 <HAL_ADC_ConfigChannel+0x64>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002b06:	6955      	ldr	r5, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002b08:	4001      	ands	r1, r0
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002b0a:	4385      	bics	r5, r0
 8002b0c:	6155      	str	r5, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002b0e:	6955      	ldr	r5, [r2, #20]
 8002b10:	4329      	orrs	r1, r5
 8002b12:	6151      	str	r1, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b14:	2e02      	cmp	r6, #2
 8002b16:	d903      	bls.n	8002b20 <HAL_ADC_ConfigChannel+0x70>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b18:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	7023      	strb	r3, [r4, #0]
  
  /* Return function status */
  return tmp_hal_status;
}
 8002b1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002b20:	4820      	ldr	r0, [pc, #128]	; (8002ba4 <HAL_ADC_ConfigChannel+0xf4>)
 8002b22:	6801      	ldr	r1, [r0, #0]
 8002b24:	2b10      	cmp	r3, #16
 8002b26:	d01b      	beq.n	8002b60 <HAL_ADC_ConfigChannel+0xb0>
 8002b28:	001a      	movs	r2, r3
 8002b2a:	3a11      	subs	r2, #17
 8002b2c:	4255      	negs	r5, r2
 8002b2e:	416a      	adcs	r2, r5
 8002b30:	4d1d      	ldr	r5, [pc, #116]	; (8002ba8 <HAL_ADC_ConfigChannel+0xf8>)
 8002b32:	4252      	negs	r2, r2
 8002b34:	402a      	ands	r2, r5
 8002b36:	2580      	movs	r5, #128	; 0x80
 8002b38:	046d      	lsls	r5, r5, #17
 8002b3a:	1952      	adds	r2, r2, r5
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	6002      	str	r2, [r0, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b40:	2b10      	cmp	r3, #16
 8002b42:	d1e9      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x68>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b44:	4b19      	ldr	r3, [pc, #100]	; (8002bac <HAL_ADC_ConfigChannel+0xfc>)
 8002b46:	491a      	ldr	r1, [pc, #104]	; (8002bb0 <HAL_ADC_ConfigChannel+0x100>)
 8002b48:	6818      	ldr	r0, [r3, #0]
 8002b4a:	f7fd fb05 	bl	8000158 <__udivsi3>
 8002b4e:	230a      	movs	r3, #10
 8002b50:	4343      	muls	r3, r0
            wait_loop_index--;
 8002b52:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002b54:	9b01      	ldr	r3, [sp, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0de      	beq.n	8002b18 <HAL_ADC_ConfigChannel+0x68>
            wait_loop_index--;
 8002b5a:	9b01      	ldr	r3, [sp, #4]
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	e7f8      	b.n	8002b52 <HAL_ADC_ConfigChannel+0xa2>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002b60:	2280      	movs	r2, #128	; 0x80
 8002b62:	0412      	lsls	r2, r2, #16
 8002b64:	e7ea      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x8c>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002b66:	4660      	mov	r0, ip
 8002b68:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002b6a:	4381      	bics	r1, r0
 8002b6c:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b6e:	2e02      	cmp	r6, #2
 8002b70:	d8d2      	bhi.n	8002b18 <HAL_ADC_ConfigChannel+0x68>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002b72:	4a0c      	ldr	r2, [pc, #48]	; (8002ba4 <HAL_ADC_ConfigChannel+0xf4>)
 8002b74:	6811      	ldr	r1, [r2, #0]
 8002b76:	2b10      	cmp	r3, #16
 8002b78:	d00b      	beq.n	8002b92 <HAL_ADC_ConfigChannel+0xe2>
 8002b7a:	3b11      	subs	r3, #17
 8002b7c:	4258      	negs	r0, r3
 8002b7e:	4143      	adcs	r3, r0
 8002b80:	20c0      	movs	r0, #192	; 0xc0
 8002b82:	425b      	negs	r3, r3
 8002b84:	0400      	lsls	r0, r0, #16
 8002b86:	4003      	ands	r3, r0
 8002b88:	480a      	ldr	r0, [pc, #40]	; (8002bb4 <HAL_ADC_ConfigChannel+0x104>)
 8002b8a:	181b      	adds	r3, r3, r0
 8002b8c:	400b      	ands	r3, r1
 8002b8e:	6013      	str	r3, [r2, #0]
 8002b90:	e7c2      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x68>
 8002b92:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <HAL_ADC_ConfigChannel+0x108>)
 8002b94:	e7fa      	b.n	8002b8c <HAL_ADC_ConfigChannel+0xdc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b96:	2220      	movs	r2, #32
 8002b98:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	639a      	str	r2, [r3, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8002b9e:	e7bc      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x6a>
 8002ba0:	00001001 	.word	0x00001001
 8002ba4:	40012708 	.word	0x40012708
 8002ba8:	ff400000 	.word	0xff400000
 8002bac:	2000061c 	.word	0x2000061c
 8002bb0:	000f4240 	.word	0x000f4240
 8002bb4:	feffffff 	.word	0xfeffffff
 8002bb8:	ff7fffff 	.word	0xff7fffff

08002bbc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bbc:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bbe:	25ff      	movs	r5, #255	; 0xff
 8002bc0:	2403      	movs	r4, #3
 8002bc2:	002a      	movs	r2, r5
 8002bc4:	4004      	ands	r4, r0
 8002bc6:	00e4      	lsls	r4, r4, #3
 8002bc8:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002bca:	0189      	lsls	r1, r1, #6
 8002bcc:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bce:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002bd0:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bd2:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8002bd4:	2800      	cmp	r0, #0
 8002bd6:	db0a      	blt.n	8002bee <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bd8:	24c0      	movs	r4, #192	; 0xc0
 8002bda:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <HAL_NVIC_SetPriority+0x4c>)
 8002bdc:	0880      	lsrs	r0, r0, #2
 8002bde:	0080      	lsls	r0, r0, #2
 8002be0:	18c0      	adds	r0, r0, r3
 8002be2:	00a4      	lsls	r4, r4, #2
 8002be4:	5903      	ldr	r3, [r0, r4]
 8002be6:	401a      	ands	r2, r3
 8002be8:	4311      	orrs	r1, r2
 8002bea:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8002bec:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bee:	200f      	movs	r0, #15
 8002bf0:	4003      	ands	r3, r0
 8002bf2:	3b08      	subs	r3, #8
 8002bf4:	4805      	ldr	r0, [pc, #20]	; (8002c0c <HAL_NVIC_SetPriority+0x50>)
 8002bf6:	089b      	lsrs	r3, r3, #2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	181b      	adds	r3, r3, r0
 8002bfc:	69d8      	ldr	r0, [r3, #28]
 8002bfe:	4002      	ands	r2, r0
 8002c00:	4311      	orrs	r1, r2
 8002c02:	61d9      	str	r1, [r3, #28]
 8002c04:	e7f2      	b.n	8002bec <HAL_NVIC_SetPriority+0x30>
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	e000e100 	.word	0xe000e100
 8002c0c:	e000ed00 	.word	0xe000ed00

08002c10 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002c10:	2800      	cmp	r0, #0
 8002c12:	db05      	blt.n	8002c20 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c14:	231f      	movs	r3, #31
 8002c16:	4018      	ands	r0, r3
 8002c18:	3b1e      	subs	r3, #30
 8002c1a:	4083      	lsls	r3, r0
 8002c1c:	4a01      	ldr	r2, [pc, #4]	; (8002c24 <HAL_NVIC_EnableIRQ+0x14>)
 8002c1e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002c20:	4770      	bx	lr
 8002c22:	46c0      	nop			; (mov r8, r8)
 8002c24:	e000e100 	.word	0xe000e100

08002c28 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c28:	2280      	movs	r2, #128	; 0x80
 8002c2a:	1e43      	subs	r3, r0, #1
 8002c2c:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c2e:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d20d      	bcs.n	8002c50 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c34:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c36:	4a07      	ldr	r2, [pc, #28]	; (8002c54 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c38:	4807      	ldr	r0, [pc, #28]	; (8002c58 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c3a:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c3c:	6a03      	ldr	r3, [r0, #32]
 8002c3e:	0609      	lsls	r1, r1, #24
 8002c40:	021b      	lsls	r3, r3, #8
 8002c42:	0a1b      	lsrs	r3, r3, #8
 8002c44:	430b      	orrs	r3, r1
 8002c46:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c48:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c4a:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c4c:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c4e:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002c50:	4770      	bx	lr
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	e000e010 	.word	0xe000e010
 8002c58:	e000ed00 	.word	0xe000ed00

08002c5c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002c5c:	4770      	bx	lr

08002c5e <HAL_SYSTICK_IRQHandler>:
{
 8002c5e:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8002c60:	f7ff fffc 	bl	8002c5c <HAL_SYSTICK_Callback>
}
 8002c64:	bd10      	pop	{r4, pc}
	...

08002c68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002c68:	b570      	push	{r4, r5, r6, lr}
 8002c6a:	0004      	movs	r4, r0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
  {
    return HAL_ERROR;
 8002c6c:	2001      	movs	r0, #1
  if(NULL == hdma)
 8002c6e:	2c00      	cmp	r4, #0
 8002c70:	d024      	beq.n	8002cbc <HAL_DMA_Init+0x54>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c72:	2302      	movs	r3, #2
 8002c74:	1ca5      	adds	r5, r4, #2
 8002c76:	77eb      	strb	r3, [r5, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c78:	6820      	ldr	r0, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c7a:	4b11      	ldr	r3, [pc, #68]	; (8002cc0 <HAL_DMA_Init+0x58>)
  tmp = hdma->Instance->CCR;
 8002c7c:	6802      	ldr	r2, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c7e:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c80:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8002c82:	6863      	ldr	r3, [r4, #4]
 8002c84:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c86:	68e1      	ldr	r1, [r4, #12]
 8002c88:	430b      	orrs	r3, r1
 8002c8a:	6921      	ldr	r1, [r4, #16]
 8002c8c:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c8e:	6961      	ldr	r1, [r4, #20]
 8002c90:	430b      	orrs	r3, r1
 8002c92:	69a1      	ldr	r1, [r4, #24]
 8002c94:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c96:	69e1      	ldr	r1, [r4, #28]
 8002c98:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8002c9a:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002c9c:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c9e:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <HAL_DMA_Init+0x5c>)
 8002ca0:	2114      	movs	r1, #20
 8002ca2:	18c0      	adds	r0, r0, r3
 8002ca4:	f7fd fa58 	bl	8000158 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8002ca8:	4b07      	ldr	r3, [pc, #28]	; (8002cc8 <HAL_DMA_Init+0x60>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002caa:	0080      	lsls	r0, r0, #2
 8002cac:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002cae:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cb0:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002cb2:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cb4:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8002cb6:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 8002cb8:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 8002cba:	77e0      	strb	r0, [r4, #31]
}  
 8002cbc:	bd70      	pop	{r4, r5, r6, pc}
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	ffffc00f 	.word	0xffffc00f
 8002cc4:	bffdfff8 	.word	0xbffdfff8
 8002cc8:	40020000 	.word	0x40020000

08002ccc <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8002ccc:	2300      	movs	r3, #0
{
 8002cce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cd0:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cd2:	680a      	ldr	r2, [r1, #0]
 8002cd4:	0014      	movs	r4, r2
 8002cd6:	40dc      	lsrs	r4, r3
 8002cd8:	d101      	bne.n	8002cde <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 8002cda:	b007      	add	sp, #28
 8002cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cde:	2501      	movs	r5, #1
 8002ce0:	0014      	movs	r4, r2
 8002ce2:	409d      	lsls	r5, r3
 8002ce4:	402c      	ands	r4, r5
 8002ce6:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 8002ce8:	422a      	tst	r2, r5
 8002cea:	d100      	bne.n	8002cee <HAL_GPIO_Init+0x22>
 8002cec:	e091      	b.n	8002e12 <HAL_GPIO_Init+0x146>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002cee:	684a      	ldr	r2, [r1, #4]
 8002cf0:	005e      	lsls	r6, r3, #1
 8002cf2:	4694      	mov	ip, r2
 8002cf4:	2203      	movs	r2, #3
 8002cf6:	4664      	mov	r4, ip
 8002cf8:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002cfa:	2403      	movs	r4, #3
 8002cfc:	40b4      	lsls	r4, r6
 8002cfe:	43e4      	mvns	r4, r4
 8002d00:	9402      	str	r4, [sp, #8]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d02:	1e54      	subs	r4, r2, #1
 8002d04:	2c01      	cmp	r4, #1
 8002d06:	d82a      	bhi.n	8002d5e <HAL_GPIO_Init+0x92>
        temp = GPIOx->OSPEEDR;
 8002d08:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d0a:	9c02      	ldr	r4, [sp, #8]
 8002d0c:	4027      	ands	r7, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d0e:	68cc      	ldr	r4, [r1, #12]
 8002d10:	40b4      	lsls	r4, r6
 8002d12:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 8002d14:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8002d16:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d18:	2701      	movs	r7, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d1a:	43ac      	bics	r4, r5
 8002d1c:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d1e:	4664      	mov	r4, ip
 8002d20:	0924      	lsrs	r4, r4, #4
 8002d22:	403c      	ands	r4, r7
 8002d24:	409c      	lsls	r4, r3
 8002d26:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8002d28:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8002d2a:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002d2c:	9c02      	ldr	r4, [sp, #8]
 8002d2e:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d30:	688c      	ldr	r4, [r1, #8]
 8002d32:	40b4      	lsls	r4, r6
 8002d34:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8002d36:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d38:	2a02      	cmp	r2, #2
 8002d3a:	d112      	bne.n	8002d62 <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3u];
 8002d3c:	08dc      	lsrs	r4, r3, #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d3e:	2507      	movs	r5, #7
 8002d40:	00a4      	lsls	r4, r4, #2
 8002d42:	1904      	adds	r4, r0, r4
        temp = GPIOx->AFR[position >> 3u];
 8002d44:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d46:	9403      	str	r4, [sp, #12]
 8002d48:	240f      	movs	r4, #15
 8002d4a:	401d      	ands	r5, r3
 8002d4c:	00ad      	lsls	r5, r5, #2
 8002d4e:	40ac      	lsls	r4, r5
 8002d50:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d52:	690c      	ldr	r4, [r1, #16]
 8002d54:	40ac      	lsls	r4, r5
 8002d56:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3u] = temp;
 8002d58:	9c03      	ldr	r4, [sp, #12]
 8002d5a:	6227      	str	r7, [r4, #32]
 8002d5c:	e001      	b.n	8002d62 <HAL_GPIO_Init+0x96>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d5e:	2a03      	cmp	r2, #3
 8002d60:	d1e3      	bne.n	8002d2a <HAL_GPIO_Init+0x5e>
      temp = GPIOx->MODER;
 8002d62:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002d64:	9d02      	ldr	r5, [sp, #8]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d66:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002d68:	4025      	ands	r5, r4
 8002d6a:	002c      	movs	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d6c:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8002d6e:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d70:	24c0      	movs	r4, #192	; 0xc0
 8002d72:	4662      	mov	r2, ip
 8002d74:	02a4      	lsls	r4, r4, #10
 8002d76:	4222      	tst	r2, r4
 8002d78:	d04b      	beq.n	8002e12 <HAL_GPIO_Init+0x146>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d7a:	2501      	movs	r5, #1
 8002d7c:	4a26      	ldr	r2, [pc, #152]	; (8002e18 <HAL_GPIO_Init+0x14c>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d7e:	2790      	movs	r7, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d80:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d82:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d84:	432c      	orrs	r4, r5
 8002d86:	6194      	str	r4, [r2, #24]
 8002d88:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002d8a:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d8c:	402a      	ands	r2, r5
 8002d8e:	9205      	str	r2, [sp, #20]
 8002d90:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002d92:	4a22      	ldr	r2, [pc, #136]	; (8002e1c <HAL_GPIO_Init+0x150>)
 8002d94:	00a4      	lsls	r4, r4, #2
 8002d96:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d98:	220f      	movs	r2, #15
 8002d9a:	3502      	adds	r5, #2
 8002d9c:	401d      	ands	r5, r3
 8002d9e:	00ad      	lsls	r5, r5, #2
 8002da0:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8002da2:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002da4:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002da6:	2200      	movs	r2, #0
 8002da8:	42b8      	cmp	r0, r7
 8002daa:	d008      	beq.n	8002dbe <HAL_GPIO_Init+0xf2>
 8002dac:	4f1c      	ldr	r7, [pc, #112]	; (8002e20 <HAL_GPIO_Init+0x154>)
 8002dae:	3201      	adds	r2, #1
 8002db0:	42b8      	cmp	r0, r7
 8002db2:	d004      	beq.n	8002dbe <HAL_GPIO_Init+0xf2>
 8002db4:	4f1b      	ldr	r7, [pc, #108]	; (8002e24 <HAL_GPIO_Init+0x158>)
 8002db6:	3201      	adds	r2, #1
 8002db8:	42b8      	cmp	r0, r7
 8002dba:	d000      	beq.n	8002dbe <HAL_GPIO_Init+0xf2>
 8002dbc:	3203      	adds	r2, #3
 8002dbe:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dc0:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002dc2:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002dc4:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8002dc6:	4a18      	ldr	r2, [pc, #96]	; (8002e28 <HAL_GPIO_Init+0x15c>)
        temp &= ~(iocurrent);
 8002dc8:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR;
 8002dca:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8002dcc:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(iocurrent);
 8002dce:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8002dd0:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dd2:	03ff      	lsls	r7, r7, #15
 8002dd4:	d401      	bmi.n	8002dda <HAL_GPIO_Init+0x10e>
        temp &= ~(iocurrent);
 8002dd6:	0035      	movs	r5, r6
 8002dd8:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dda:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 8002ddc:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8002dde:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8002de0:	9d01      	ldr	r5, [sp, #4]
 8002de2:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002de4:	03bf      	lsls	r7, r7, #14
 8002de6:	d401      	bmi.n	8002dec <HAL_GPIO_Init+0x120>
        temp &= ~(iocurrent);
 8002de8:	0035      	movs	r5, r6
 8002dea:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dec:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8002dee:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8002df0:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8002df2:	9d01      	ldr	r5, [sp, #4]
 8002df4:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002df6:	02ff      	lsls	r7, r7, #11
 8002df8:	d401      	bmi.n	8002dfe <HAL_GPIO_Init+0x132>
        temp &= ~(iocurrent);
 8002dfa:	0035      	movs	r5, r6
 8002dfc:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002dfe:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8002e00:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8002e02:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8002e04:	9e01      	ldr	r6, [sp, #4]
 8002e06:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e08:	02bf      	lsls	r7, r7, #10
 8002e0a:	d401      	bmi.n	8002e10 <HAL_GPIO_Init+0x144>
        temp &= ~(iocurrent);
 8002e0c:	4025      	ands	r5, r4
 8002e0e:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8002e10:	60d6      	str	r6, [r2, #12]
    position++;
 8002e12:	3301      	adds	r3, #1
 8002e14:	e75d      	b.n	8002cd2 <HAL_GPIO_Init+0x6>
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	40010000 	.word	0x40010000
 8002e20:	48000400 	.word	0x48000400
 8002e24:	48000800 	.word	0x48000800
 8002e28:	40010400 	.word	0x40010400

08002e2c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e2c:	2a00      	cmp	r2, #0
 8002e2e:	d001      	beq.n	8002e34 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e30:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e32:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e34:	6281      	str	r1, [r0, #40]	; 0x28
}
 8002e36:	e7fc      	b.n	8002e32 <HAL_GPIO_WritePin+0x6>

08002e38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e3a:	0004      	movs	r4, r0
 8002e3c:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e3e:	2800      	cmp	r0, #0
 8002e40:	d045      	beq.n	8002ece <HAL_RCC_OscConfig+0x96>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e42:	6803      	ldr	r3, [r0, #0]
 8002e44:	07db      	lsls	r3, r3, #31
 8002e46:	d42f      	bmi.n	8002ea8 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e48:	6823      	ldr	r3, [r4, #0]
 8002e4a:	079b      	lsls	r3, r3, #30
 8002e4c:	d500      	bpl.n	8002e50 <HAL_RCC_OscConfig+0x18>
 8002e4e:	e081      	b.n	8002f54 <HAL_RCC_OscConfig+0x11c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e50:	6823      	ldr	r3, [r4, #0]
 8002e52:	071b      	lsls	r3, r3, #28
 8002e54:	d500      	bpl.n	8002e58 <HAL_RCC_OscConfig+0x20>
 8002e56:	e0bc      	b.n	8002fd2 <HAL_RCC_OscConfig+0x19a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e58:	6823      	ldr	r3, [r4, #0]
 8002e5a:	075b      	lsls	r3, r3, #29
 8002e5c:	d500      	bpl.n	8002e60 <HAL_RCC_OscConfig+0x28>
 8002e5e:	e0df      	b.n	8003020 <HAL_RCC_OscConfig+0x1e8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002e60:	6823      	ldr	r3, [r4, #0]
 8002e62:	06db      	lsls	r3, r3, #27
 8002e64:	d51a      	bpl.n	8002e9c <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002e66:	6962      	ldr	r2, [r4, #20]
 8002e68:	2304      	movs	r3, #4
 8002e6a:	4db5      	ldr	r5, [pc, #724]	; (8003140 <HAL_RCC_OscConfig+0x308>)
 8002e6c:	2a01      	cmp	r2, #1
 8002e6e:	d000      	beq.n	8002e72 <HAL_RCC_OscConfig+0x3a>
 8002e70:	e14a      	b.n	8003108 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002e72:	6b69      	ldr	r1, [r5, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002e74:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8002e76:	430b      	orrs	r3, r1
 8002e78:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8002e7a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002e80:	f7ff fd56 	bl	8002930 <HAL_GetTick>
 8002e84:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002e86:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002e88:	423b      	tst	r3, r7
 8002e8a:	d100      	bne.n	8002e8e <HAL_RCC_OscConfig+0x56>
 8002e8c:	e135      	b.n	80030fa <HAL_RCC_OscConfig+0x2c2>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002e8e:	21f8      	movs	r1, #248	; 0xf8
 8002e90:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002e92:	69a3      	ldr	r3, [r4, #24]
 8002e94:	438a      	bics	r2, r1
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	636b      	str	r3, [r5, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e9c:	6a23      	ldr	r3, [r4, #32]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d000      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x6c>
 8002ea2:	e159      	b.n	8003158 <HAL_RCC_OscConfig+0x320>
        }
      }
    }
  }

  return HAL_OK;
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	e02a      	b.n	8002efe <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002ea8:	210c      	movs	r1, #12
 8002eaa:	4da5      	ldr	r5, [pc, #660]	; (8003140 <HAL_RCC_OscConfig+0x308>)
 8002eac:	686a      	ldr	r2, [r5, #4]
 8002eae:	400a      	ands	r2, r1
 8002eb0:	2a04      	cmp	r2, #4
 8002eb2:	d006      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x8a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002eb4:	686b      	ldr	r3, [r5, #4]
 8002eb6:	400b      	ands	r3, r1
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d10a      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x9a>
 8002ebc:	686b      	ldr	r3, [r5, #4]
 8002ebe:	03db      	lsls	r3, r3, #15
 8002ec0:	d507      	bpl.n	8002ed2 <HAL_RCC_OscConfig+0x9a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec2:	682b      	ldr	r3, [r5, #0]
 8002ec4:	039b      	lsls	r3, r3, #14
 8002ec6:	d5bf      	bpl.n	8002e48 <HAL_RCC_OscConfig+0x10>
 8002ec8:	6863      	ldr	r3, [r4, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1bc      	bne.n	8002e48 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8002ece:	2001      	movs	r0, #1
 8002ed0:	e015      	b.n	8002efe <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed2:	6863      	ldr	r3, [r4, #4]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d114      	bne.n	8002f02 <HAL_RCC_OscConfig+0xca>
 8002ed8:	2380      	movs	r3, #128	; 0x80
 8002eda:	682a      	ldr	r2, [r5, #0]
 8002edc:	025b      	lsls	r3, r3, #9
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002ee2:	f7ff fd25 	bl	8002930 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee6:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8002ee8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eea:	02bf      	lsls	r7, r7, #10
 8002eec:	682b      	ldr	r3, [r5, #0]
 8002eee:	423b      	tst	r3, r7
 8002ef0:	d1aa      	bne.n	8002e48 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ef2:	f7ff fd1d 	bl	8002930 <HAL_GetTick>
 8002ef6:	1b80      	subs	r0, r0, r6
 8002ef8:	2864      	cmp	r0, #100	; 0x64
 8002efa:	d9f7      	bls.n	8002eec <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
 8002efc:	2003      	movs	r0, #3
}
 8002efe:	b005      	add	sp, #20
 8002f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d116      	bne.n	8002f34 <HAL_RCC_OscConfig+0xfc>
 8002f06:	682b      	ldr	r3, [r5, #0]
 8002f08:	4a8e      	ldr	r2, [pc, #568]	; (8003144 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0a:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	602b      	str	r3, [r5, #0]
 8002f10:	682b      	ldr	r3, [r5, #0]
 8002f12:	4a8d      	ldr	r2, [pc, #564]	; (8003148 <HAL_RCC_OscConfig+0x310>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f14:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f16:	4013      	ands	r3, r2
 8002f18:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002f1a:	f7ff fd09 	bl	8002930 <HAL_GetTick>
 8002f1e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f20:	682b      	ldr	r3, [r5, #0]
 8002f22:	423b      	tst	r3, r7
 8002f24:	d100      	bne.n	8002f28 <HAL_RCC_OscConfig+0xf0>
 8002f26:	e78f      	b.n	8002e48 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f28:	f7ff fd02 	bl	8002930 <HAL_GetTick>
 8002f2c:	1b80      	subs	r0, r0, r6
 8002f2e:	2864      	cmp	r0, #100	; 0x64
 8002f30:	d9f6      	bls.n	8002f20 <HAL_RCC_OscConfig+0xe8>
 8002f32:	e7e3      	b.n	8002efc <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f34:	2b05      	cmp	r3, #5
 8002f36:	d105      	bne.n	8002f44 <HAL_RCC_OscConfig+0x10c>
 8002f38:	2380      	movs	r3, #128	; 0x80
 8002f3a:	682a      	ldr	r2, [r5, #0]
 8002f3c:	02db      	lsls	r3, r3, #11
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	602b      	str	r3, [r5, #0]
 8002f42:	e7c9      	b.n	8002ed8 <HAL_RCC_OscConfig+0xa0>
 8002f44:	682b      	ldr	r3, [r5, #0]
 8002f46:	4a7f      	ldr	r2, [pc, #508]	; (8003144 <HAL_RCC_OscConfig+0x30c>)
 8002f48:	4013      	ands	r3, r2
 8002f4a:	602b      	str	r3, [r5, #0]
 8002f4c:	682b      	ldr	r3, [r5, #0]
 8002f4e:	4a7e      	ldr	r2, [pc, #504]	; (8003148 <HAL_RCC_OscConfig+0x310>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	e7c5      	b.n	8002ee0 <HAL_RCC_OscConfig+0xa8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002f54:	220c      	movs	r2, #12
 8002f56:	4d7a      	ldr	r5, [pc, #488]	; (8003140 <HAL_RCC_OscConfig+0x308>)
 8002f58:	686b      	ldr	r3, [r5, #4]
 8002f5a:	4213      	tst	r3, r2
 8002f5c:	d006      	beq.n	8002f6c <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002f5e:	686b      	ldr	r3, [r5, #4]
 8002f60:	4013      	ands	r3, r2
 8002f62:	2b08      	cmp	r3, #8
 8002f64:	d110      	bne.n	8002f88 <HAL_RCC_OscConfig+0x150>
 8002f66:	686b      	ldr	r3, [r5, #4]
 8002f68:	03db      	lsls	r3, r3, #15
 8002f6a:	d40d      	bmi.n	8002f88 <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f6c:	682b      	ldr	r3, [r5, #0]
 8002f6e:	079b      	lsls	r3, r3, #30
 8002f70:	d502      	bpl.n	8002f78 <HAL_RCC_OscConfig+0x140>
 8002f72:	68e3      	ldr	r3, [r4, #12]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d1aa      	bne.n	8002ece <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f78:	21f8      	movs	r1, #248	; 0xf8
 8002f7a:	682a      	ldr	r2, [r5, #0]
 8002f7c:	6923      	ldr	r3, [r4, #16]
 8002f7e:	438a      	bics	r2, r1
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	4313      	orrs	r3, r2
 8002f84:	602b      	str	r3, [r5, #0]
 8002f86:	e763      	b.n	8002e50 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f88:	68e2      	ldr	r2, [r4, #12]
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	2a00      	cmp	r2, #0
 8002f8e:	d00f      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 8002f90:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f92:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8002f94:	4313      	orrs	r3, r2
 8002f96:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002f98:	f7ff fcca 	bl	8002930 <HAL_GetTick>
 8002f9c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9e:	682b      	ldr	r3, [r5, #0]
 8002fa0:	423b      	tst	r3, r7
 8002fa2:	d1e9      	bne.n	8002f78 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fa4:	f7ff fcc4 	bl	8002930 <HAL_GetTick>
 8002fa8:	1b80      	subs	r0, r0, r6
 8002faa:	2802      	cmp	r0, #2
 8002fac:	d9f7      	bls.n	8002f9e <HAL_RCC_OscConfig+0x166>
 8002fae:	e7a5      	b.n	8002efc <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_HSI_DISABLE();
 8002fb0:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb2:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8002fb4:	439a      	bics	r2, r3
 8002fb6:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8002fb8:	f7ff fcba 	bl	8002930 <HAL_GetTick>
 8002fbc:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fbe:	682b      	ldr	r3, [r5, #0]
 8002fc0:	423b      	tst	r3, r7
 8002fc2:	d100      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x18e>
 8002fc4:	e744      	b.n	8002e50 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fc6:	f7ff fcb3 	bl	8002930 <HAL_GetTick>
 8002fca:	1b80      	subs	r0, r0, r6
 8002fcc:	2802      	cmp	r0, #2
 8002fce:	d9f6      	bls.n	8002fbe <HAL_RCC_OscConfig+0x186>
 8002fd0:	e794      	b.n	8002efc <HAL_RCC_OscConfig+0xc4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fd2:	69e2      	ldr	r2, [r4, #28]
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	4d5a      	ldr	r5, [pc, #360]	; (8003140 <HAL_RCC_OscConfig+0x308>)
 8002fd8:	2a00      	cmp	r2, #0
 8002fda:	d010      	beq.n	8002ffe <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 8002fdc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fde:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8002fe4:	f7ff fca4 	bl	8002930 <HAL_GetTick>
 8002fe8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002fec:	423b      	tst	r3, r7
 8002fee:	d000      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x1ba>
 8002ff0:	e732      	b.n	8002e58 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ff2:	f7ff fc9d 	bl	8002930 <HAL_GetTick>
 8002ff6:	1b80      	subs	r0, r0, r6
 8002ff8:	2802      	cmp	r0, #2
 8002ffa:	d9f6      	bls.n	8002fea <HAL_RCC_OscConfig+0x1b2>
 8002ffc:	e77e      	b.n	8002efc <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_LSI_DISABLE();
 8002ffe:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003000:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8003002:	439a      	bics	r2, r3
 8003004:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8003006:	f7ff fc93 	bl	8002930 <HAL_GetTick>
 800300a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800300c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800300e:	423b      	tst	r3, r7
 8003010:	d100      	bne.n	8003014 <HAL_RCC_OscConfig+0x1dc>
 8003012:	e721      	b.n	8002e58 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003014:	f7ff fc8c 	bl	8002930 <HAL_GetTick>
 8003018:	1b80      	subs	r0, r0, r6
 800301a:	2802      	cmp	r0, #2
 800301c:	d9f6      	bls.n	800300c <HAL_RCC_OscConfig+0x1d4>
 800301e:	e76d      	b.n	8002efc <HAL_RCC_OscConfig+0xc4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003020:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003022:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003024:	4d46      	ldr	r5, [pc, #280]	; (8003140 <HAL_RCC_OscConfig+0x308>)
 8003026:	0552      	lsls	r2, r2, #21
 8003028:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 800302a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800302c:	4213      	tst	r3, r2
 800302e:	d108      	bne.n	8003042 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003030:	69eb      	ldr	r3, [r5, #28]
 8003032:	4313      	orrs	r3, r2
 8003034:	61eb      	str	r3, [r5, #28]
 8003036:	69eb      	ldr	r3, [r5, #28]
 8003038:	4013      	ands	r3, r2
 800303a:	9303      	str	r3, [sp, #12]
 800303c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800303e:	2301      	movs	r3, #1
 8003040:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003042:	2780      	movs	r7, #128	; 0x80
 8003044:	4e41      	ldr	r6, [pc, #260]	; (800314c <HAL_RCC_OscConfig+0x314>)
 8003046:	007f      	lsls	r7, r7, #1
 8003048:	6833      	ldr	r3, [r6, #0]
 800304a:	423b      	tst	r3, r7
 800304c:	d006      	beq.n	800305c <HAL_RCC_OscConfig+0x224>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800304e:	68a3      	ldr	r3, [r4, #8]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d113      	bne.n	800307c <HAL_RCC_OscConfig+0x244>
 8003054:	6a2a      	ldr	r2, [r5, #32]
 8003056:	4313      	orrs	r3, r2
 8003058:	622b      	str	r3, [r5, #32]
 800305a:	e030      	b.n	80030be <HAL_RCC_OscConfig+0x286>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800305c:	6833      	ldr	r3, [r6, #0]
 800305e:	433b      	orrs	r3, r7
 8003060:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003062:	f7ff fc65 	bl	8002930 <HAL_GetTick>
 8003066:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003068:	6833      	ldr	r3, [r6, #0]
 800306a:	423b      	tst	r3, r7
 800306c:	d1ef      	bne.n	800304e <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800306e:	f7ff fc5f 	bl	8002930 <HAL_GetTick>
 8003072:	9b01      	ldr	r3, [sp, #4]
 8003074:	1ac0      	subs	r0, r0, r3
 8003076:	2864      	cmp	r0, #100	; 0x64
 8003078:	d9f6      	bls.n	8003068 <HAL_RCC_OscConfig+0x230>
 800307a:	e73f      	b.n	8002efc <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800307c:	2201      	movs	r2, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d114      	bne.n	80030ac <HAL_RCC_OscConfig+0x274>
 8003082:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003084:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003086:	4393      	bics	r3, r2
 8003088:	622b      	str	r3, [r5, #32]
 800308a:	6a2b      	ldr	r3, [r5, #32]
 800308c:	3203      	adds	r2, #3
 800308e:	4393      	bics	r3, r2
 8003090:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8003092:	f7ff fc4d 	bl	8002930 <HAL_GetTick>
 8003096:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003098:	6a2b      	ldr	r3, [r5, #32]
 800309a:	423b      	tst	r3, r7
 800309c:	d016      	beq.n	80030cc <HAL_RCC_OscConfig+0x294>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800309e:	f7ff fc47 	bl	8002930 <HAL_GetTick>
 80030a2:	4b2b      	ldr	r3, [pc, #172]	; (8003150 <HAL_RCC_OscConfig+0x318>)
 80030a4:	1b80      	subs	r0, r0, r6
 80030a6:	4298      	cmp	r0, r3
 80030a8:	d9f6      	bls.n	8003098 <HAL_RCC_OscConfig+0x260>
 80030aa:	e727      	b.n	8002efc <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030ac:	2b05      	cmp	r3, #5
 80030ae:	d116      	bne.n	80030de <HAL_RCC_OscConfig+0x2a6>
 80030b0:	6a29      	ldr	r1, [r5, #32]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	430b      	orrs	r3, r1
 80030b6:	622b      	str	r3, [r5, #32]
 80030b8:	6a2b      	ldr	r3, [r5, #32]
 80030ba:	431a      	orrs	r2, r3
 80030bc:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 80030be:	f7ff fc37 	bl	8002930 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c2:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 80030c4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c6:	6a2b      	ldr	r3, [r5, #32]
 80030c8:	423b      	tst	r3, r7
 80030ca:	d00f      	beq.n	80030ec <HAL_RCC_OscConfig+0x2b4>
    if(pwrclkchanged == SET)
 80030cc:	9b00      	ldr	r3, [sp, #0]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d000      	beq.n	80030d4 <HAL_RCC_OscConfig+0x29c>
 80030d2:	e6c5      	b.n	8002e60 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80030d4:	69eb      	ldr	r3, [r5, #28]
 80030d6:	4a1f      	ldr	r2, [pc, #124]	; (8003154 <HAL_RCC_OscConfig+0x31c>)
 80030d8:	4013      	ands	r3, r2
 80030da:	61eb      	str	r3, [r5, #28]
 80030dc:	e6c0      	b.n	8002e60 <HAL_RCC_OscConfig+0x28>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030de:	6a2b      	ldr	r3, [r5, #32]
 80030e0:	4393      	bics	r3, r2
 80030e2:	2204      	movs	r2, #4
 80030e4:	622b      	str	r3, [r5, #32]
 80030e6:	6a2b      	ldr	r3, [r5, #32]
 80030e8:	4393      	bics	r3, r2
 80030ea:	e7b5      	b.n	8003058 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ec:	f7ff fc20 	bl	8002930 <HAL_GetTick>
 80030f0:	4b17      	ldr	r3, [pc, #92]	; (8003150 <HAL_RCC_OscConfig+0x318>)
 80030f2:	1b80      	subs	r0, r0, r6
 80030f4:	4298      	cmp	r0, r3
 80030f6:	d9e6      	bls.n	80030c6 <HAL_RCC_OscConfig+0x28e>
 80030f8:	e700      	b.n	8002efc <HAL_RCC_OscConfig+0xc4>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80030fa:	f7ff fc19 	bl	8002930 <HAL_GetTick>
 80030fe:	1b80      	subs	r0, r0, r6
 8003100:	2802      	cmp	r0, #2
 8003102:	d800      	bhi.n	8003106 <HAL_RCC_OscConfig+0x2ce>
 8003104:	e6bf      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e>
 8003106:	e6f9      	b.n	8002efc <HAL_RCC_OscConfig+0xc4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003108:	3205      	adds	r2, #5
 800310a:	d103      	bne.n	8003114 <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSI14ADC_ENABLE();
 800310c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800310e:	439a      	bics	r2, r3
 8003110:	636a      	str	r2, [r5, #52]	; 0x34
 8003112:	e6bc      	b.n	8002e8e <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 8003114:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003116:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8003118:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 800311a:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 800311c:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 800311e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003120:	4393      	bics	r3, r2
 8003122:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8003124:	f7ff fc04 	bl	8002930 <HAL_GetTick>
 8003128:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800312a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800312c:	423b      	tst	r3, r7
 800312e:	d100      	bne.n	8003132 <HAL_RCC_OscConfig+0x2fa>
 8003130:	e6b4      	b.n	8002e9c <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003132:	f7ff fbfd 	bl	8002930 <HAL_GetTick>
 8003136:	1b80      	subs	r0, r0, r6
 8003138:	2802      	cmp	r0, #2
 800313a:	d9f6      	bls.n	800312a <HAL_RCC_OscConfig+0x2f2>
 800313c:	e6de      	b.n	8002efc <HAL_RCC_OscConfig+0xc4>
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	40021000 	.word	0x40021000
 8003144:	fffeffff 	.word	0xfffeffff
 8003148:	fffbffff 	.word	0xfffbffff
 800314c:	40007000 	.word	0x40007000
 8003150:	00001388 	.word	0x00001388
 8003154:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003158:	210c      	movs	r1, #12
 800315a:	4d34      	ldr	r5, [pc, #208]	; (800322c <HAL_RCC_OscConfig+0x3f4>)
 800315c:	686a      	ldr	r2, [r5, #4]
 800315e:	400a      	ands	r2, r1
 8003160:	2a08      	cmp	r2, #8
 8003162:	d047      	beq.n	80031f4 <HAL_RCC_OscConfig+0x3bc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003164:	4a32      	ldr	r2, [pc, #200]	; (8003230 <HAL_RCC_OscConfig+0x3f8>)
 8003166:	2b02      	cmp	r3, #2
 8003168:	d132      	bne.n	80031d0 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_DISABLE();
 800316a:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800316c:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800316e:	4013      	ands	r3, r2
 8003170:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003172:	f7ff fbdd 	bl	8002930 <HAL_GetTick>
 8003176:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003178:	04bf      	lsls	r7, r7, #18
 800317a:	682b      	ldr	r3, [r5, #0]
 800317c:	423b      	tst	r3, r7
 800317e:	d121      	bne.n	80031c4 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003180:	220f      	movs	r2, #15
 8003182:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003184:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003186:	4393      	bics	r3, r2
 8003188:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800318a:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800318c:	4313      	orrs	r3, r2
 800318e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8003190:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003192:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003194:	686a      	ldr	r2, [r5, #4]
 8003196:	430b      	orrs	r3, r1
 8003198:	4926      	ldr	r1, [pc, #152]	; (8003234 <HAL_RCC_OscConfig+0x3fc>)
 800319a:	400a      	ands	r2, r1
 800319c:	4313      	orrs	r3, r2
 800319e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80031a0:	2380      	movs	r3, #128	; 0x80
 80031a2:	682a      	ldr	r2, [r5, #0]
 80031a4:	045b      	lsls	r3, r3, #17
 80031a6:	4313      	orrs	r3, r2
 80031a8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80031aa:	f7ff fbc1 	bl	8002930 <HAL_GetTick>
 80031ae:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031b0:	682b      	ldr	r3, [r5, #0]
 80031b2:	4233      	tst	r3, r6
 80031b4:	d000      	beq.n	80031b8 <HAL_RCC_OscConfig+0x380>
 80031b6:	e675      	b.n	8002ea4 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b8:	f7ff fbba 	bl	8002930 <HAL_GetTick>
 80031bc:	1b00      	subs	r0, r0, r4
 80031be:	2802      	cmp	r0, #2
 80031c0:	d9f6      	bls.n	80031b0 <HAL_RCC_OscConfig+0x378>
 80031c2:	e69b      	b.n	8002efc <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c4:	f7ff fbb4 	bl	8002930 <HAL_GetTick>
 80031c8:	1b80      	subs	r0, r0, r6
 80031ca:	2802      	cmp	r0, #2
 80031cc:	d9d5      	bls.n	800317a <HAL_RCC_OscConfig+0x342>
 80031ce:	e695      	b.n	8002efc <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_PLL_DISABLE();
 80031d0:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031d2:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80031d4:	4013      	ands	r3, r2
 80031d6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80031d8:	f7ff fbaa 	bl	8002930 <HAL_GetTick>
 80031dc:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031de:	04b6      	lsls	r6, r6, #18
 80031e0:	682b      	ldr	r3, [r5, #0]
 80031e2:	4233      	tst	r3, r6
 80031e4:	d100      	bne.n	80031e8 <HAL_RCC_OscConfig+0x3b0>
 80031e6:	e65d      	b.n	8002ea4 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e8:	f7ff fba2 	bl	8002930 <HAL_GetTick>
 80031ec:	1b00      	subs	r0, r0, r4
 80031ee:	2802      	cmp	r0, #2
 80031f0:	d9f6      	bls.n	80031e0 <HAL_RCC_OscConfig+0x3a8>
 80031f2:	e683      	b.n	8002efc <HAL_RCC_OscConfig+0xc4>
        return HAL_ERROR;
 80031f4:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d100      	bne.n	80031fc <HAL_RCC_OscConfig+0x3c4>
 80031fa:	e680      	b.n	8002efe <HAL_RCC_OscConfig+0xc6>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fc:	2180      	movs	r1, #128	; 0x80
        pll_config  = RCC->CFGR;
 80031fe:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003200:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003202:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 8003204:	6aea      	ldr	r2, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003206:	4019      	ands	r1, r3
 8003208:	4281      	cmp	r1, r0
 800320a:	d000      	beq.n	800320e <HAL_RCC_OscConfig+0x3d6>
 800320c:	e65f      	b.n	8002ece <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800320e:	210f      	movs	r1, #15
 8003210:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003212:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003214:	428a      	cmp	r2, r1
 8003216:	d000      	beq.n	800321a <HAL_RCC_OscConfig+0x3e2>
 8003218:	e659      	b.n	8002ece <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800321a:	22f0      	movs	r2, #240	; 0xf0
 800321c:	0392      	lsls	r2, r2, #14
 800321e:	4013      	ands	r3, r2
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003220:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003222:	4293      	cmp	r3, r2
 8003224:	d100      	bne.n	8003228 <HAL_RCC_OscConfig+0x3f0>
 8003226:	e63d      	b.n	8002ea4 <HAL_RCC_OscConfig+0x6c>
 8003228:	e651      	b.n	8002ece <HAL_RCC_OscConfig+0x96>
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	40021000 	.word	0x40021000
 8003230:	feffffff 	.word	0xfeffffff
 8003234:	ffc2ffff 	.word	0xffc2ffff

08003238 <HAL_RCC_EnableCSS>:
  *         the Cortex-M0 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8003238:	2380      	movs	r3, #128	; 0x80
 800323a:	4a03      	ldr	r2, [pc, #12]	; (8003248 <HAL_RCC_EnableCSS+0x10>)
 800323c:	031b      	lsls	r3, r3, #12
 800323e:	6811      	ldr	r1, [r2, #0]
 8003240:	430b      	orrs	r3, r1
 8003242:	6013      	str	r3, [r2, #0]
}
 8003244:	4770      	bx	lr
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	40021000 	.word	0x40021000

0800324c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800324c:	b570      	push	{r4, r5, r6, lr}
 800324e:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003250:	2210      	movs	r2, #16
 8003252:	4912      	ldr	r1, [pc, #72]	; (800329c <HAL_RCC_GetSysClockFreq+0x50>)
 8003254:	4668      	mov	r0, sp
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003256:	ad04      	add	r5, sp, #16
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003258:	f002 fc76 	bl	8005b48 <memcpy>
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800325c:	2210      	movs	r2, #16
 800325e:	0028      	movs	r0, r5
 8003260:	490f      	ldr	r1, [pc, #60]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x54>)
 8003262:	f002 fc71 	bl	8005b48 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003266:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8003268:	4e0e      	ldr	r6, [pc, #56]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x58>)
 800326a:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800326c:	401a      	ands	r2, r3
 800326e:	2a08      	cmp	r2, #8
 8003270:	d111      	bne.n	8003296 <HAL_RCC_GetSysClockFreq+0x4a>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003272:	200f      	movs	r0, #15
 8003274:	466a      	mov	r2, sp
 8003276:	0c99      	lsrs	r1, r3, #18
 8003278:	4001      	ands	r1, r0
 800327a:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800327c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800327e:	4002      	ands	r2, r0
 8003280:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003282:	03db      	lsls	r3, r3, #15
 8003284:	d505      	bpl.n	8003292 <HAL_RCC_GetSysClockFreq+0x46>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003286:	4808      	ldr	r0, [pc, #32]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x5c>)
 8003288:	f7fc ff66 	bl	8000158 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800328c:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800328e:	b008      	add	sp, #32
 8003290:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003292:	4806      	ldr	r0, [pc, #24]	; (80032ac <HAL_RCC_GetSysClockFreq+0x60>)
 8003294:	e7fa      	b.n	800328c <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = HSE_VALUE;
 8003296:	4804      	ldr	r0, [pc, #16]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8003298:	e7f9      	b.n	800328e <HAL_RCC_GetSysClockFreq+0x42>
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	08006700 	.word	0x08006700
 80032a0:	08006711 	.word	0x08006711
 80032a4:	40021000 	.word	0x40021000
 80032a8:	007a1200 	.word	0x007a1200
 80032ac:	003d0900 	.word	0x003d0900

080032b0 <HAL_RCC_ClockConfig>:
{
 80032b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032b2:	0004      	movs	r4, r0
 80032b4:	000e      	movs	r6, r1
  if(RCC_ClkInitStruct == NULL)
 80032b6:	2800      	cmp	r0, #0
 80032b8:	d101      	bne.n	80032be <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 80032ba:	2001      	movs	r0, #1
}
 80032bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032be:	2201      	movs	r2, #1
 80032c0:	4d37      	ldr	r5, [pc, #220]	; (80033a0 <HAL_RCC_ClockConfig+0xf0>)
 80032c2:	682b      	ldr	r3, [r5, #0]
 80032c4:	4013      	ands	r3, r2
 80032c6:	428b      	cmp	r3, r1
 80032c8:	d31c      	bcc.n	8003304 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ca:	6821      	ldr	r1, [r4, #0]
 80032cc:	078b      	lsls	r3, r1, #30
 80032ce:	d422      	bmi.n	8003316 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032d0:	07cb      	lsls	r3, r1, #31
 80032d2:	d42f      	bmi.n	8003334 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032d4:	2301      	movs	r3, #1
 80032d6:	682a      	ldr	r2, [r5, #0]
 80032d8:	401a      	ands	r2, r3
 80032da:	42b2      	cmp	r2, r6
 80032dc:	d851      	bhi.n	8003382 <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032de:	6823      	ldr	r3, [r4, #0]
 80032e0:	4d30      	ldr	r5, [pc, #192]	; (80033a4 <HAL_RCC_ClockConfig+0xf4>)
 80032e2:	075b      	lsls	r3, r3, #29
 80032e4:	d454      	bmi.n	8003390 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80032e6:	f7ff ffb1 	bl	800324c <HAL_RCC_GetSysClockFreq>
 80032ea:	686b      	ldr	r3, [r5, #4]
 80032ec:	4a2e      	ldr	r2, [pc, #184]	; (80033a8 <HAL_RCC_ClockConfig+0xf8>)
 80032ee:	061b      	lsls	r3, r3, #24
 80032f0:	0f1b      	lsrs	r3, r3, #28
 80032f2:	5cd3      	ldrb	r3, [r2, r3]
 80032f4:	40d8      	lsrs	r0, r3
 80032f6:	4b2d      	ldr	r3, [pc, #180]	; (80033ac <HAL_RCC_ClockConfig+0xfc>)
 80032f8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80032fa:	2002      	movs	r0, #2
 80032fc:	f7ff fad8 	bl	80028b0 <HAL_InitTick>
  return HAL_OK;
 8003300:	2000      	movs	r0, #0
 8003302:	e7db      	b.n	80032bc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003304:	682b      	ldr	r3, [r5, #0]
 8003306:	4393      	bics	r3, r2
 8003308:	430b      	orrs	r3, r1
 800330a:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800330c:	682b      	ldr	r3, [r5, #0]
 800330e:	4013      	ands	r3, r2
 8003310:	428b      	cmp	r3, r1
 8003312:	d1d2      	bne.n	80032ba <HAL_RCC_ClockConfig+0xa>
 8003314:	e7d9      	b.n	80032ca <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003316:	4a23      	ldr	r2, [pc, #140]	; (80033a4 <HAL_RCC_ClockConfig+0xf4>)
 8003318:	074b      	lsls	r3, r1, #29
 800331a:	d504      	bpl.n	8003326 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800331c:	23e0      	movs	r3, #224	; 0xe0
 800331e:	6850      	ldr	r0, [r2, #4]
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	4303      	orrs	r3, r0
 8003324:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003326:	20f0      	movs	r0, #240	; 0xf0
 8003328:	6853      	ldr	r3, [r2, #4]
 800332a:	4383      	bics	r3, r0
 800332c:	68a0      	ldr	r0, [r4, #8]
 800332e:	4303      	orrs	r3, r0
 8003330:	6053      	str	r3, [r2, #4]
 8003332:	e7cd      	b.n	80032d0 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003334:	4f1b      	ldr	r7, [pc, #108]	; (80033a4 <HAL_RCC_ClockConfig+0xf4>)
 8003336:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003338:	683b      	ldr	r3, [r7, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800333a:	2a01      	cmp	r2, #1
 800333c:	d119      	bne.n	8003372 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333e:	039b      	lsls	r3, r3, #14
 8003340:	d5bb      	bpl.n	80032ba <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003342:	2103      	movs	r1, #3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	438b      	bics	r3, r1
 8003348:	4313      	orrs	r3, r2
 800334a:	607b      	str	r3, [r7, #4]
    tickstart = HAL_GetTick();
 800334c:	f7ff faf0 	bl	8002930 <HAL_GetTick>
 8003350:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003352:	230c      	movs	r3, #12
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	401a      	ands	r2, r3
 8003358:	6863      	ldr	r3, [r4, #4]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	429a      	cmp	r2, r3
 800335e:	d0b9      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003360:	f7ff fae6 	bl	8002930 <HAL_GetTick>
 8003364:	9b01      	ldr	r3, [sp, #4]
 8003366:	1ac0      	subs	r0, r0, r3
 8003368:	4b11      	ldr	r3, [pc, #68]	; (80033b0 <HAL_RCC_ClockConfig+0x100>)
 800336a:	4298      	cmp	r0, r3
 800336c:	d9f1      	bls.n	8003352 <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 800336e:	2003      	movs	r0, #3
 8003370:	e7a4      	b.n	80032bc <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003372:	2a02      	cmp	r2, #2
 8003374:	d102      	bne.n	800337c <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003376:	019b      	lsls	r3, r3, #6
 8003378:	d4e3      	bmi.n	8003342 <HAL_RCC_ClockConfig+0x92>
 800337a:	e79e      	b.n	80032ba <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800337c:	079b      	lsls	r3, r3, #30
 800337e:	d4e0      	bmi.n	8003342 <HAL_RCC_ClockConfig+0x92>
 8003380:	e79b      	b.n	80032ba <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003382:	682a      	ldr	r2, [r5, #0]
 8003384:	439a      	bics	r2, r3
 8003386:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003388:	682a      	ldr	r2, [r5, #0]
 800338a:	421a      	tst	r2, r3
 800338c:	d0a7      	beq.n	80032de <HAL_RCC_ClockConfig+0x2e>
 800338e:	e794      	b.n	80032ba <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003390:	686b      	ldr	r3, [r5, #4]
 8003392:	4a08      	ldr	r2, [pc, #32]	; (80033b4 <HAL_RCC_ClockConfig+0x104>)
 8003394:	4013      	ands	r3, r2
 8003396:	68e2      	ldr	r2, [r4, #12]
 8003398:	4313      	orrs	r3, r2
 800339a:	606b      	str	r3, [r5, #4]
 800339c:	e7a3      	b.n	80032e6 <HAL_RCC_ClockConfig+0x36>
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	40022000 	.word	0x40022000
 80033a4:	40021000 	.word	0x40021000
 80033a8:	080066e8 	.word	0x080066e8
 80033ac:	2000061c 	.word	0x2000061c
 80033b0:	00001388 	.word	0x00001388
 80033b4:	fffff8ff 	.word	0xfffff8ff

080033b8 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80033b8:	4b01      	ldr	r3, [pc, #4]	; (80033c0 <HAL_RCC_GetHCLKFreq+0x8>)
 80033ba:	6818      	ldr	r0, [r3, #0]
}
 80033bc:	4770      	bx	lr
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	2000061c 	.word	0x2000061c

080033c4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80033c4:	4b04      	ldr	r3, [pc, #16]	; (80033d8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80033c6:	4a05      	ldr	r2, [pc, #20]	; (80033dc <HAL_RCC_GetPCLK1Freq+0x18>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	055b      	lsls	r3, r3, #21
 80033cc:	0f5b      	lsrs	r3, r3, #29
 80033ce:	5cd3      	ldrb	r3, [r2, r3]
 80033d0:	4a03      	ldr	r2, [pc, #12]	; (80033e0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80033d2:	6810      	ldr	r0, [r2, #0]
 80033d4:	40d8      	lsrs	r0, r3
}    
 80033d6:	4770      	bx	lr
 80033d8:	40021000 	.word	0x40021000
 80033dc:	080066f8 	.word	0x080066f8
 80033e0:	2000061c 	.word	0x2000061c

080033e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033e4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033e6:	6803      	ldr	r3, [r0, #0]
{
 80033e8:	0005      	movs	r5, r0
 80033ea:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033ec:	03db      	lsls	r3, r3, #15
 80033ee:	d52a      	bpl.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x62>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033f0:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80033f2:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033f4:	4c38      	ldr	r4, [pc, #224]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 80033f6:	0552      	lsls	r2, r2, #21
 80033f8:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80033fa:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033fc:	4213      	tst	r3, r2
 80033fe:	d108      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003400:	69e3      	ldr	r3, [r4, #28]
 8003402:	4313      	orrs	r3, r2
 8003404:	61e3      	str	r3, [r4, #28]
 8003406:	69e3      	ldr	r3, [r4, #28]
 8003408:	4013      	ands	r3, r2
 800340a:	9303      	str	r3, [sp, #12]
 800340c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800340e:	2301      	movs	r3, #1
 8003410:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003412:	2780      	movs	r7, #128	; 0x80
 8003414:	4e31      	ldr	r6, [pc, #196]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8003416:	007f      	lsls	r7, r7, #1
 8003418:	6833      	ldr	r3, [r6, #0]
 800341a:	423b      	tst	r3, r7
 800341c:	d028      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800341e:	6a22      	ldr	r2, [r4, #32]
 8003420:	23c0      	movs	r3, #192	; 0xc0
 8003422:	0011      	movs	r1, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4e2e      	ldr	r6, [pc, #184]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8003428:	4019      	ands	r1, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800342a:	421a      	tst	r2, r3
 800342c:	d132      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xb0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800342e:	6a23      	ldr	r3, [r4, #32]
 8003430:	401e      	ands	r6, r3
 8003432:	686b      	ldr	r3, [r5, #4]
 8003434:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003436:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003438:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 800343a:	2b01      	cmp	r3, #1
 800343c:	d103      	bne.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800343e:	69e3      	ldr	r3, [r4, #28]
 8003440:	4a28      	ldr	r2, [pc, #160]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8003442:	4013      	ands	r3, r2
 8003444:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003446:	682a      	ldr	r2, [r5, #0]
 8003448:	07d3      	lsls	r3, r2, #31
 800344a:	d506      	bpl.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800344c:	2003      	movs	r0, #3
 800344e:	4922      	ldr	r1, [pc, #136]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8003450:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003452:	4383      	bics	r3, r0
 8003454:	68a8      	ldr	r0, [r5, #8]
 8003456:	4303      	orrs	r3, r0
 8003458:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800345a:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800345c:	0693      	lsls	r3, r2, #26
 800345e:	d517      	bpl.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xac>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003460:	2110      	movs	r1, #16
 8003462:	4a1d      	ldr	r2, [pc, #116]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8003464:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003466:	438b      	bics	r3, r1
 8003468:	68e9      	ldr	r1, [r5, #12]
 800346a:	430b      	orrs	r3, r1
 800346c:	6313      	str	r3, [r2, #48]	; 0x30
 800346e:	e00f      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xac>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003470:	6833      	ldr	r3, [r6, #0]
 8003472:	433b      	orrs	r3, r7
 8003474:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003476:	f7ff fa5b 	bl	8002930 <HAL_GetTick>
 800347a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347c:	6833      	ldr	r3, [r6, #0]
 800347e:	423b      	tst	r3, r7
 8003480:	d1cd      	bne.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003482:	f7ff fa55 	bl	8002930 <HAL_GetTick>
 8003486:	9b01      	ldr	r3, [sp, #4]
 8003488:	1ac0      	subs	r0, r0, r3
 800348a:	2864      	cmp	r0, #100	; 0x64
 800348c:	d9f6      	bls.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x98>
          return HAL_TIMEOUT;
 800348e:	2003      	movs	r0, #3
}
 8003490:	b005      	add	sp, #20
 8003492:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003494:	686a      	ldr	r2, [r5, #4]
 8003496:	4013      	ands	r3, r2
 8003498:	428b      	cmp	r3, r1
 800349a:	d0c8      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x4a>
      __HAL_RCC_BACKUPRESET_FORCE();
 800349c:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800349e:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80034a0:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034a2:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 80034a4:	025b      	lsls	r3, r3, #9
 80034a6:	4303      	orrs	r3, r0
 80034a8:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034aa:	6a23      	ldr	r3, [r4, #32]
 80034ac:	480e      	ldr	r0, [pc, #56]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x104>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034ae:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034b0:	4003      	ands	r3, r0
 80034b2:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 80034b4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034b6:	07d3      	lsls	r3, r2, #31
 80034b8:	d5b9      	bpl.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x4a>
        tickstart = HAL_GetTick();
 80034ba:	f7ff fa39 	bl	8002930 <HAL_GetTick>
 80034be:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c0:	2202      	movs	r2, #2
 80034c2:	6a23      	ldr	r3, [r4, #32]
 80034c4:	4213      	tst	r3, r2
 80034c6:	d1b2      	bne.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c8:	f7ff fa32 	bl	8002930 <HAL_GetTick>
 80034cc:	4b07      	ldr	r3, [pc, #28]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80034ce:	1bc0      	subs	r0, r0, r7
 80034d0:	4298      	cmp	r0, r3
 80034d2:	d9f5      	bls.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80034d4:	e7db      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xaa>
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	40021000 	.word	0x40021000
 80034dc:	40007000 	.word	0x40007000
 80034e0:	fffffcff 	.word	0xfffffcff
 80034e4:	efffffff 	.word	0xefffffff
 80034e8:	fffeffff 	.word	0xfffeffff
 80034ec:	00001388 	.word	0x00001388

080034f0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034f0:	2201      	movs	r2, #1
 80034f2:	6a03      	ldr	r3, [r0, #32]
{
 80034f4:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034f6:	4393      	bics	r3, r2
 80034f8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034fa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034fc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034fe:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003500:	3272      	adds	r2, #114	; 0x72
 8003502:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003504:	680a      	ldr	r2, [r1, #0]
 8003506:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003508:	2202      	movs	r2, #2
 800350a:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800350c:	688a      	ldr	r2, [r1, #8]
 800350e:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003510:	4a11      	ldr	r2, [pc, #68]	; (8003558 <TIM_OC1_SetConfig+0x68>)
 8003512:	4290      	cmp	r0, r2
 8003514:	d005      	beq.n	8003522 <TIM_OC1_SetConfig+0x32>
 8003516:	4e11      	ldr	r6, [pc, #68]	; (800355c <TIM_OC1_SetConfig+0x6c>)
 8003518:	42b0      	cmp	r0, r6
 800351a:	d002      	beq.n	8003522 <TIM_OC1_SetConfig+0x32>
 800351c:	4e10      	ldr	r6, [pc, #64]	; (8003560 <TIM_OC1_SetConfig+0x70>)
 800351e:	42b0      	cmp	r0, r6
 8003520:	d113      	bne.n	800354a <TIM_OC1_SetConfig+0x5a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003522:	2608      	movs	r6, #8
 8003524:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003526:	68ce      	ldr	r6, [r1, #12]
 8003528:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800352a:	2604      	movs	r6, #4
 800352c:	43b3      	bics	r3, r6
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800352e:	4290      	cmp	r0, r2
 8003530:	d005      	beq.n	800353e <TIM_OC1_SetConfig+0x4e>
 8003532:	4a0a      	ldr	r2, [pc, #40]	; (800355c <TIM_OC1_SetConfig+0x6c>)
 8003534:	4290      	cmp	r0, r2
 8003536:	d002      	beq.n	800353e <TIM_OC1_SetConfig+0x4e>
 8003538:	4a09      	ldr	r2, [pc, #36]	; (8003560 <TIM_OC1_SetConfig+0x70>)
 800353a:	4290      	cmp	r0, r2
 800353c:	d105      	bne.n	800354a <TIM_OC1_SetConfig+0x5a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800353e:	4a09      	ldr	r2, [pc, #36]	; (8003564 <TIM_OC1_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003540:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003542:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003544:	694c      	ldr	r4, [r1, #20]
 8003546:	4334      	orrs	r4, r6
 8003548:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800354a:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800354c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800354e:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003550:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003552:	6203      	str	r3, [r0, #32]
}
 8003554:	bd70      	pop	{r4, r5, r6, pc}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	40012c00 	.word	0x40012c00
 800355c:	40014400 	.word	0x40014400
 8003560:	40014800 	.word	0x40014800
 8003564:	fffffcff 	.word	0xfffffcff

08003568 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003568:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800356a:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800356c:	6a03      	ldr	r3, [r0, #32]
 800356e:	4a16      	ldr	r2, [pc, #88]	; (80035c8 <TIM_OC3_SetConfig+0x60>)
 8003570:	4013      	ands	r3, r2
 8003572:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003574:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003576:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8003578:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800357a:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800357c:	680d      	ldr	r5, [r1, #0]
 800357e:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003580:	4d12      	ldr	r5, [pc, #72]	; (80035cc <TIM_OC3_SetConfig+0x64>)
 8003582:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003584:	688d      	ldr	r5, [r1, #8]
 8003586:	022d      	lsls	r5, r5, #8
 8003588:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800358a:	4d11      	ldr	r5, [pc, #68]	; (80035d0 <TIM_OC3_SetConfig+0x68>)
 800358c:	42a8      	cmp	r0, r5
 800358e:	d10e      	bne.n	80035ae <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003590:	4d10      	ldr	r5, [pc, #64]	; (80035d4 <TIM_OC3_SetConfig+0x6c>)
 8003592:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003594:	68cb      	ldr	r3, [r1, #12]
 8003596:	021b      	lsls	r3, r3, #8
 8003598:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800359a:	4d0f      	ldr	r5, [pc, #60]	; (80035d8 <TIM_OC3_SetConfig+0x70>)
 800359c:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800359e:	4d0f      	ldr	r5, [pc, #60]	; (80035dc <TIM_OC3_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035a0:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035a2:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035a4:	698a      	ldr	r2, [r1, #24]
 80035a6:	4332      	orrs	r2, r6
 80035a8:	0112      	lsls	r2, r2, #4
 80035aa:	432a      	orrs	r2, r5
 80035ac:	e005      	b.n	80035ba <TIM_OC3_SetConfig+0x52>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ae:	4d0c      	ldr	r5, [pc, #48]	; (80035e0 <TIM_OC3_SetConfig+0x78>)
 80035b0:	42a8      	cmp	r0, r5
 80035b2:	d0f4      	beq.n	800359e <TIM_OC3_SetConfig+0x36>
 80035b4:	4d0b      	ldr	r5, [pc, #44]	; (80035e4 <TIM_OC3_SetConfig+0x7c>)
 80035b6:	42a8      	cmp	r0, r5
 80035b8:	d0f1      	beq.n	800359e <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ba:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035bc:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80035be:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80035c0:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c2:	6203      	str	r3, [r0, #32]
}
 80035c4:	bd70      	pop	{r4, r5, r6, pc}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	fffffeff 	.word	0xfffffeff
 80035cc:	fffffdff 	.word	0xfffffdff
 80035d0:	40012c00 	.word	0x40012c00
 80035d4:	fffff7ff 	.word	0xfffff7ff
 80035d8:	fffffbff 	.word	0xfffffbff
 80035dc:	ffffcfff 	.word	0xffffcfff
 80035e0:	40014400 	.word	0x40014400
 80035e4:	40014800 	.word	0x40014800

080035e8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035e8:	6a03      	ldr	r3, [r0, #32]
 80035ea:	4a12      	ldr	r2, [pc, #72]	; (8003634 <TIM_OC4_SetConfig+0x4c>)
{
 80035ec:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035ee:	4013      	ands	r3, r2
 80035f0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035f2:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035f4:	4c10      	ldr	r4, [pc, #64]	; (8003638 <TIM_OC4_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 80035f6:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80035f8:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035fa:	4025      	ands	r5, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035fc:	680c      	ldr	r4, [r1, #0]
 80035fe:	0224      	lsls	r4, r4, #8
 8003600:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003602:	4c0e      	ldr	r4, [pc, #56]	; (800363c <TIM_OC4_SetConfig+0x54>)
 8003604:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003606:	688c      	ldr	r4, [r1, #8]
 8003608:	0324      	lsls	r4, r4, #12
 800360a:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800360c:	4c0c      	ldr	r4, [pc, #48]	; (8003640 <TIM_OC4_SetConfig+0x58>)
 800360e:	42a0      	cmp	r0, r4
 8003610:	d005      	beq.n	800361e <TIM_OC4_SetConfig+0x36>
 8003612:	4c0c      	ldr	r4, [pc, #48]	; (8003644 <TIM_OC4_SetConfig+0x5c>)
 8003614:	42a0      	cmp	r0, r4
 8003616:	d002      	beq.n	800361e <TIM_OC4_SetConfig+0x36>
 8003618:	4c0b      	ldr	r4, [pc, #44]	; (8003648 <TIM_OC4_SetConfig+0x60>)
 800361a:	42a0      	cmp	r0, r4
 800361c:	d104      	bne.n	8003628 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800361e:	4c0b      	ldr	r4, [pc, #44]	; (800364c <TIM_OC4_SetConfig+0x64>)
 8003620:	4023      	ands	r3, r4

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003622:	694c      	ldr	r4, [r1, #20]
 8003624:	01a4      	lsls	r4, r4, #6
 8003626:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003628:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800362a:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800362c:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800362e:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003630:	6202      	str	r2, [r0, #32]
}
 8003632:	bd30      	pop	{r4, r5, pc}
 8003634:	ffffefff 	.word	0xffffefff
 8003638:	ffff8cff 	.word	0xffff8cff
 800363c:	ffffdfff 	.word	0xffffdfff
 8003640:	40012c00 	.word	0x40012c00
 8003644:	40014400 	.word	0x40014400
 8003648:	40014800 	.word	0x40014800
 800364c:	ffffbfff 	.word	0xffffbfff

08003650 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003650:	4a1d      	ldr	r2, [pc, #116]	; (80036c8 <TIM_Base_SetConfig+0x78>)
{
 8003652:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8003654:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003656:	4290      	cmp	r0, r2
 8003658:	d006      	beq.n	8003668 <TIM_Base_SetConfig+0x18>
 800365a:	2480      	movs	r4, #128	; 0x80
 800365c:	05e4      	lsls	r4, r4, #23
 800365e:	42a0      	cmp	r0, r4
 8003660:	d002      	beq.n	8003668 <TIM_Base_SetConfig+0x18>
 8003662:	4c1a      	ldr	r4, [pc, #104]	; (80036cc <TIM_Base_SetConfig+0x7c>)
 8003664:	42a0      	cmp	r0, r4
 8003666:	d10c      	bne.n	8003682 <TIM_Base_SetConfig+0x32>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003668:	2470      	movs	r4, #112	; 0x70
 800366a:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 800366c:	684c      	ldr	r4, [r1, #4]
 800366e:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003670:	4290      	cmp	r0, r2
 8003672:	d00f      	beq.n	8003694 <TIM_Base_SetConfig+0x44>
 8003674:	2480      	movs	r4, #128	; 0x80
 8003676:	05e4      	lsls	r4, r4, #23
 8003678:	42a0      	cmp	r0, r4
 800367a:	d00b      	beq.n	8003694 <TIM_Base_SetConfig+0x44>
 800367c:	4c13      	ldr	r4, [pc, #76]	; (80036cc <TIM_Base_SetConfig+0x7c>)
 800367e:	42a0      	cmp	r0, r4
 8003680:	d008      	beq.n	8003694 <TIM_Base_SetConfig+0x44>
 8003682:	4c13      	ldr	r4, [pc, #76]	; (80036d0 <TIM_Base_SetConfig+0x80>)
 8003684:	42a0      	cmp	r0, r4
 8003686:	d005      	beq.n	8003694 <TIM_Base_SetConfig+0x44>
 8003688:	4c12      	ldr	r4, [pc, #72]	; (80036d4 <TIM_Base_SetConfig+0x84>)
 800368a:	42a0      	cmp	r0, r4
 800368c:	d002      	beq.n	8003694 <TIM_Base_SetConfig+0x44>
 800368e:	4c12      	ldr	r4, [pc, #72]	; (80036d8 <TIM_Base_SetConfig+0x88>)
 8003690:	42a0      	cmp	r0, r4
 8003692:	d103      	bne.n	800369c <TIM_Base_SetConfig+0x4c>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003694:	4c11      	ldr	r4, [pc, #68]	; (80036dc <TIM_Base_SetConfig+0x8c>)
 8003696:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003698:	68cc      	ldr	r4, [r1, #12]
 800369a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800369c:	2480      	movs	r4, #128	; 0x80
 800369e:	43a3      	bics	r3, r4
 80036a0:	694c      	ldr	r4, [r1, #20]
 80036a2:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 80036a4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036a6:	688b      	ldr	r3, [r1, #8]
 80036a8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80036aa:	680b      	ldr	r3, [r1, #0]
 80036ac:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036ae:	4290      	cmp	r0, r2
 80036b0:	d005      	beq.n	80036be <TIM_Base_SetConfig+0x6e>
 80036b2:	4b08      	ldr	r3, [pc, #32]	; (80036d4 <TIM_Base_SetConfig+0x84>)
 80036b4:	4298      	cmp	r0, r3
 80036b6:	d002      	beq.n	80036be <TIM_Base_SetConfig+0x6e>
 80036b8:	4b07      	ldr	r3, [pc, #28]	; (80036d8 <TIM_Base_SetConfig+0x88>)
 80036ba:	4298      	cmp	r0, r3
 80036bc:	d101      	bne.n	80036c2 <TIM_Base_SetConfig+0x72>
    TIMx->RCR = Structure->RepetitionCounter;
 80036be:	690b      	ldr	r3, [r1, #16]
 80036c0:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80036c2:	2301      	movs	r3, #1
 80036c4:	6143      	str	r3, [r0, #20]
}
 80036c6:	bd10      	pop	{r4, pc}
 80036c8:	40012c00 	.word	0x40012c00
 80036cc:	40000400 	.word	0x40000400
 80036d0:	40002000 	.word	0x40002000
 80036d4:	40014400 	.word	0x40014400
 80036d8:	40014800 	.word	0x40014800
 80036dc:	fffffcff 	.word	0xfffffcff

080036e0 <HAL_TIM_Base_Init>:
{
 80036e0:	b570      	push	{r4, r5, r6, lr}
 80036e2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80036e4:	2001      	movs	r0, #1
  if (htim == NULL)
 80036e6:	2c00      	cmp	r4, #0
 80036e8:	d021      	beq.n	800372e <HAL_TIM_Base_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 80036ea:	0025      	movs	r5, r4
 80036ec:	353d      	adds	r5, #61	; 0x3d
 80036ee:	782b      	ldrb	r3, [r5, #0]
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d105      	bne.n	8003702 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80036f6:	0023      	movs	r3, r4
 80036f8:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80036fa:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80036fc:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 80036fe:	f7fe fb1b 	bl	8001d38 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003702:	2302      	movs	r3, #2
 8003704:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003706:	6820      	ldr	r0, [r4, #0]
 8003708:	1d21      	adds	r1, r4, #4
 800370a:	f7ff ffa1 	bl	8003650 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800370e:	0022      	movs	r2, r4
 8003710:	2301      	movs	r3, #1
  return HAL_OK;
 8003712:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003714:	3246      	adds	r2, #70	; 0x46
 8003716:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003718:	3445      	adds	r4, #69	; 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800371a:	3a08      	subs	r2, #8
 800371c:	7013      	strb	r3, [r2, #0]
 800371e:	7053      	strb	r3, [r2, #1]
 8003720:	7093      	strb	r3, [r2, #2]
 8003722:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003724:	7113      	strb	r3, [r2, #4]
 8003726:	7153      	strb	r3, [r2, #5]
 8003728:	7193      	strb	r3, [r2, #6]
 800372a:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 800372c:	702b      	strb	r3, [r5, #0]
}
 800372e:	bd70      	pop	{r4, r5, r6, pc}

08003730 <HAL_TIM_PWM_Init>:
{
 8003730:	b570      	push	{r4, r5, r6, lr}
 8003732:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003734:	2001      	movs	r0, #1
  if (htim == NULL)
 8003736:	2c00      	cmp	r4, #0
 8003738:	d021      	beq.n	800377e <HAL_TIM_PWM_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 800373a:	0025      	movs	r5, r4
 800373c:	353d      	adds	r5, #61	; 0x3d
 800373e:	782b      	ldrb	r3, [r5, #0]
 8003740:	b2da      	uxtb	r2, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d105      	bne.n	8003752 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8003746:	0023      	movs	r3, r4
 8003748:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800374a:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800374c:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 800374e:	f7fe fac1 	bl	8001cd4 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003752:	2302      	movs	r3, #2
 8003754:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003756:	6820      	ldr	r0, [r4, #0]
 8003758:	1d21      	adds	r1, r4, #4
 800375a:	f7ff ff79 	bl	8003650 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800375e:	0022      	movs	r2, r4
 8003760:	2301      	movs	r3, #1
  return HAL_OK;
 8003762:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003764:	3246      	adds	r2, #70	; 0x46
 8003766:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003768:	3445      	adds	r4, #69	; 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800376a:	3a08      	subs	r2, #8
 800376c:	7013      	strb	r3, [r2, #0]
 800376e:	7053      	strb	r3, [r2, #1]
 8003770:	7093      	strb	r3, [r2, #2]
 8003772:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003774:	7113      	strb	r3, [r2, #4]
 8003776:	7153      	strb	r3, [r2, #5]
 8003778:	7193      	strb	r3, [r2, #6]
 800377a:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 800377c:	702b      	strb	r3, [r5, #0]
}
 800377e:	bd70      	pop	{r4, r5, r6, pc}

08003780 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003780:	2210      	movs	r2, #16
 8003782:	6a03      	ldr	r3, [r0, #32]
{
 8003784:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003786:	4393      	bics	r3, r2
 8003788:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800378a:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800378c:	4c15      	ldr	r4, [pc, #84]	; (80037e4 <TIM_OC2_SetConfig+0x64>)
  tmpcr2 =  TIMx->CR2;
 800378e:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003790:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003792:	4025      	ands	r5, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003794:	680c      	ldr	r4, [r1, #0]
 8003796:	0224      	lsls	r4, r4, #8
 8003798:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 800379a:	2420      	movs	r4, #32
 800379c:	43a2      	bics	r2, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800379e:	688c      	ldr	r4, [r1, #8]
 80037a0:	0124      	lsls	r4, r4, #4
 80037a2:	4322      	orrs	r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037a4:	4c10      	ldr	r4, [pc, #64]	; (80037e8 <TIM_OC2_SetConfig+0x68>)
 80037a6:	42a0      	cmp	r0, r4
 80037a8:	d10f      	bne.n	80037ca <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 80037aa:	2480      	movs	r4, #128	; 0x80
 80037ac:	43a2      	bics	r2, r4
 80037ae:	0014      	movs	r4, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037b0:	68ca      	ldr	r2, [r1, #12]
 80037b2:	0112      	lsls	r2, r2, #4
 80037b4:	4322      	orrs	r2, r4
    tmpccer &= ~TIM_CCER_CC2NE;
 80037b6:	2440      	movs	r4, #64	; 0x40
 80037b8:	43a2      	bics	r2, r4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037ba:	4e0c      	ldr	r6, [pc, #48]	; (80037ec <TIM_OC2_SetConfig+0x6c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037bc:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037be:	401e      	ands	r6, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037c0:	698b      	ldr	r3, [r1, #24]
 80037c2:	4323      	orrs	r3, r4
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4333      	orrs	r3, r6
 80037c8:	e005      	b.n	80037d6 <TIM_OC2_SetConfig+0x56>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ca:	4c09      	ldr	r4, [pc, #36]	; (80037f0 <TIM_OC2_SetConfig+0x70>)
 80037cc:	42a0      	cmp	r0, r4
 80037ce:	d0f4      	beq.n	80037ba <TIM_OC2_SetConfig+0x3a>
 80037d0:	4c08      	ldr	r4, [pc, #32]	; (80037f4 <TIM_OC2_SetConfig+0x74>)
 80037d2:	42a0      	cmp	r0, r4
 80037d4:	d0f1      	beq.n	80037ba <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 80037d6:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80037d8:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80037da:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80037dc:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80037de:	6202      	str	r2, [r0, #32]
}
 80037e0:	bd70      	pop	{r4, r5, r6, pc}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	ffff8cff 	.word	0xffff8cff
 80037e8:	40012c00 	.word	0x40012c00
 80037ec:	fffff3ff 	.word	0xfffff3ff
 80037f0:	40014400 	.word	0x40014400
 80037f4:	40014800 	.word	0x40014800

080037f8 <HAL_TIM_PWM_ConfigChannel>:
{
 80037f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80037fa:	0007      	movs	r7, r0
 80037fc:	373c      	adds	r7, #60	; 0x3c
 80037fe:	783b      	ldrb	r3, [r7, #0]
{
 8003800:	0004      	movs	r4, r0
 8003802:	000e      	movs	r6, r1
 8003804:	0015      	movs	r5, r2
  __HAL_LOCK(htim);
 8003806:	2002      	movs	r0, #2
 8003808:	2b01      	cmp	r3, #1
 800380a:	d00a      	beq.n	8003822 <HAL_TIM_PWM_ConfigChannel+0x2a>
 800380c:	3801      	subs	r0, #1
 800380e:	7038      	strb	r0, [r7, #0]
  switch (Channel)
 8003810:	2a08      	cmp	r2, #8
 8003812:	d03d      	beq.n	8003890 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003814:	d806      	bhi.n	8003824 <HAL_TIM_PWM_ConfigChannel+0x2c>
 8003816:	2a00      	cmp	r2, #0
 8003818:	d017      	beq.n	800384a <HAL_TIM_PWM_ConfigChannel+0x52>
 800381a:	2a04      	cmp	r2, #4
 800381c:	d027      	beq.n	800386e <HAL_TIM_PWM_ConfigChannel+0x76>
  __HAL_UNLOCK(htim);
 800381e:	2300      	movs	r3, #0
 8003820:	703b      	strb	r3, [r7, #0]
}
 8003822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 8003824:	2a0c      	cmp	r2, #12
 8003826:	d1fa      	bne.n	800381e <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003828:	6820      	ldr	r0, [r4, #0]
 800382a:	f7ff fedd 	bl	80035e8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800382e:	2280      	movs	r2, #128	; 0x80
 8003830:	6823      	ldr	r3, [r4, #0]
 8003832:	0112      	lsls	r2, r2, #4
 8003834:	69d9      	ldr	r1, [r3, #28]
 8003836:	430a      	orrs	r2, r1
 8003838:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800383a:	69da      	ldr	r2, [r3, #28]
 800383c:	491c      	ldr	r1, [pc, #112]	; (80038b0 <HAL_TIM_PWM_ConfigChannel+0xb8>)
 800383e:	400a      	ands	r2, r1
 8003840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003842:	6932      	ldr	r2, [r6, #16]
 8003844:	69d9      	ldr	r1, [r3, #28]
 8003846:	0212      	lsls	r2, r2, #8
 8003848:	e02f      	b.n	80038aa <HAL_TIM_PWM_ConfigChannel+0xb2>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800384a:	6820      	ldr	r0, [r4, #0]
 800384c:	f7ff fe50 	bl	80034f0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003850:	2208      	movs	r2, #8
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	6999      	ldr	r1, [r3, #24]
 8003856:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003858:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800385a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800385c:	699a      	ldr	r2, [r3, #24]
 800385e:	438a      	bics	r2, r1
 8003860:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003862:	699a      	ldr	r2, [r3, #24]
 8003864:	6931      	ldr	r1, [r6, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003866:	430a      	orrs	r2, r1
 8003868:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800386a:	2000      	movs	r0, #0
      break;
 800386c:	e7d7      	b.n	800381e <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800386e:	6820      	ldr	r0, [r4, #0]
 8003870:	f7ff ff86 	bl	8003780 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003874:	2280      	movs	r2, #128	; 0x80
 8003876:	6823      	ldr	r3, [r4, #0]
 8003878:	0112      	lsls	r2, r2, #4
 800387a:	6999      	ldr	r1, [r3, #24]
 800387c:	430a      	orrs	r2, r1
 800387e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003880:	699a      	ldr	r2, [r3, #24]
 8003882:	490b      	ldr	r1, [pc, #44]	; (80038b0 <HAL_TIM_PWM_ConfigChannel+0xb8>)
 8003884:	400a      	ands	r2, r1
 8003886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003888:	6932      	ldr	r2, [r6, #16]
 800388a:	6999      	ldr	r1, [r3, #24]
 800388c:	0212      	lsls	r2, r2, #8
 800388e:	e7ea      	b.n	8003866 <HAL_TIM_PWM_ConfigChannel+0x6e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003890:	6820      	ldr	r0, [r4, #0]
 8003892:	f7ff fe69 	bl	8003568 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003896:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003898:	6823      	ldr	r3, [r4, #0]
 800389a:	69da      	ldr	r2, [r3, #28]
 800389c:	4315      	orrs	r5, r2
 800389e:	61dd      	str	r5, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038a0:	69da      	ldr	r2, [r3, #28]
 80038a2:	438a      	bics	r2, r1
 80038a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038a6:	69da      	ldr	r2, [r3, #28]
 80038a8:	6931      	ldr	r1, [r6, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038aa:	430a      	orrs	r2, r1
 80038ac:	61da      	str	r2, [r3, #28]
 80038ae:	e7dc      	b.n	800386a <HAL_TIM_PWM_ConfigChannel+0x72>
 80038b0:	fffffbff 	.word	0xfffffbff

080038b4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80038b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038b6:	2601      	movs	r6, #1
 80038b8:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80038ba:	4f10      	ldr	r7, [pc, #64]	; (80038fc <TIM_TI1_SetConfig+0x48>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038bc:	43b4      	bics	r4, r6
 80038be:	6204      	str	r4, [r0, #32]
{
 80038c0:	0015      	movs	r5, r2
  tmpccmr1 = TIMx->CCMR1;
 80038c2:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80038c4:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80038c6:	42b8      	cmp	r0, r7
 80038c8:	d014      	beq.n	80038f4 <TIM_TI1_SetConfig+0x40>
 80038ca:	2780      	movs	r7, #128	; 0x80
 80038cc:	05ff      	lsls	r7, r7, #23
 80038ce:	42b8      	cmp	r0, r7
 80038d0:	d010      	beq.n	80038f4 <TIM_TI1_SetConfig+0x40>
 80038d2:	4f0b      	ldr	r7, [pc, #44]	; (8003900 <TIM_TI1_SetConfig+0x4c>)
 80038d4:	42b8      	cmp	r0, r7
 80038d6:	d00d      	beq.n	80038f4 <TIM_TI1_SetConfig+0x40>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_ICSelection;
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80038d8:	4332      	orrs	r2, r6
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038da:	25f0      	movs	r5, #240	; 0xf0
 80038dc:	43aa      	bics	r2, r5
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	350f      	adds	r5, #15
 80038e2:	402b      	ands	r3, r5
 80038e4:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038e6:	230a      	movs	r3, #10
 80038e8:	439c      	bics	r4, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80038ea:	4019      	ands	r1, r3
 80038ec:	4321      	orrs	r1, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038ee:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80038f0:	6201      	str	r1, [r0, #32]
}
 80038f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80038f4:	2603      	movs	r6, #3
 80038f6:	43b2      	bics	r2, r6
    tmpccmr1 |= TIM_ICSelection;
 80038f8:	432a      	orrs	r2, r5
 80038fa:	e7ee      	b.n	80038da <TIM_TI1_SetConfig+0x26>
 80038fc:	40012c00 	.word	0x40012c00
 8003900:	40000400 	.word	0x40000400

08003904 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003904:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003906:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003908:	4d03      	ldr	r5, [pc, #12]	; (8003918 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800390a:	430a      	orrs	r2, r1
 800390c:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800390e:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003910:	4313      	orrs	r3, r2
 8003912:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003914:	6083      	str	r3, [r0, #8]
}
 8003916:	bd30      	pop	{r4, r5, pc}
 8003918:	ffff00ff 	.word	0xffff00ff

0800391c <HAL_TIM_ConfigClockSource>:
{
 800391c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800391e:	0005      	movs	r5, r0
 8003920:	2302      	movs	r3, #2
 8003922:	353c      	adds	r5, #60	; 0x3c
{
 8003924:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8003926:	7828      	ldrb	r0, [r5, #0]
 8003928:	001a      	movs	r2, r3
 800392a:	2801      	cmp	r0, #1
 800392c:	d01d      	beq.n	800396a <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 800392e:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 8003930:	2701      	movs	r7, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003932:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 8003934:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003936:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8003938:	6820      	ldr	r0, [r4, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800393a:	4a49      	ldr	r2, [pc, #292]	; (8003a60 <HAL_TIM_ConfigClockSource+0x144>)
  tmpsmcr = htim->Instance->SMCR;
 800393c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800393e:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8003940:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003942:	680b      	ldr	r3, [r1, #0]
 8003944:	2b60      	cmp	r3, #96	; 0x60
 8003946:	d059      	beq.n	80039fc <HAL_TIM_ConfigClockSource+0xe0>
 8003948:	d835      	bhi.n	80039b6 <HAL_TIM_ConfigClockSource+0x9a>
 800394a:	2b40      	cmp	r3, #64	; 0x40
 800394c:	d100      	bne.n	8003950 <HAL_TIM_ConfigClockSource+0x34>
 800394e:	e06e      	b.n	8003a2e <HAL_TIM_ConfigClockSource+0x112>
 8003950:	d815      	bhi.n	800397e <HAL_TIM_ConfigClockSource+0x62>
 8003952:	2b20      	cmp	r3, #32
 8003954:	d00d      	beq.n	8003972 <HAL_TIM_ConfigClockSource+0x56>
 8003956:	d80a      	bhi.n	800396e <HAL_TIM_ConfigClockSource+0x52>
 8003958:	2210      	movs	r2, #16
 800395a:	0019      	movs	r1, r3
 800395c:	4391      	bics	r1, r2
 800395e:	d008      	beq.n	8003972 <HAL_TIM_ConfigClockSource+0x56>
 8003960:	003a      	movs	r2, r7
  htim->State = HAL_TIM_STATE_READY;
 8003962:	2301      	movs	r3, #1
 8003964:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8003966:	2300      	movs	r3, #0
 8003968:	702b      	strb	r3, [r5, #0]
}
 800396a:	0010      	movs	r0, r2
 800396c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 800396e:	2b30      	cmp	r3, #48	; 0x30
 8003970:	d1f6      	bne.n	8003960 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr &= ~TIM_SMCR_TS;
 8003972:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8003974:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003976:	438a      	bics	r2, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003978:	4313      	orrs	r3, r2
 800397a:	2207      	movs	r2, #7
 800397c:	e018      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x94>
  switch (sClockSourceConfig->ClockSource)
 800397e:	2b50      	cmp	r3, #80	; 0x50
 8003980:	d1ee      	bne.n	8003960 <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003982:	68ca      	ldr	r2, [r1, #12]
 8003984:	684c      	ldr	r4, [r1, #4]
  tmpccer = TIMx->CCER;
 8003986:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003988:	6a03      	ldr	r3, [r0, #32]
 800398a:	43bb      	bics	r3, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800398c:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800398e:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003990:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003992:	43bb      	bics	r3, r7
 8003994:	001f      	movs	r7, r3
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003996:	0113      	lsls	r3, r2, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003998:	220a      	movs	r2, #10
 800399a:	4391      	bics	r1, r2
 800399c:	000a      	movs	r2, r1
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800399e:	433b      	orrs	r3, r7
  tmpccer |= TIM_ICPolarity;
 80039a0:	4322      	orrs	r2, r4
  TIMx->CCMR1 = tmpccmr1;
 80039a2:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80039a4:	6202      	str	r2, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 80039a6:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80039a8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80039aa:	4393      	bics	r3, r2
 80039ac:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039ae:	2357      	movs	r3, #87	; 0x57
 80039b0:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 80039b2:	6083      	str	r3, [r0, #8]
 80039b4:	e016      	b.n	80039e4 <HAL_TIM_ConfigClockSource+0xc8>
  switch (sClockSourceConfig->ClockSource)
 80039b6:	2280      	movs	r2, #128	; 0x80
 80039b8:	0152      	lsls	r2, r2, #5
 80039ba:	4694      	mov	ip, r2
  HAL_StatusTypeDef status = HAL_OK;
 80039bc:	2200      	movs	r2, #0
  switch (sClockSourceConfig->ClockSource)
 80039be:	4563      	cmp	r3, ip
 80039c0:	d0cf      	beq.n	8003962 <HAL_TIM_ConfigClockSource+0x46>
 80039c2:	2280      	movs	r2, #128	; 0x80
 80039c4:	0192      	lsls	r2, r2, #6
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d00e      	beq.n	80039e8 <HAL_TIM_ConfigClockSource+0xcc>
 80039ca:	003a      	movs	r2, r7
 80039cc:	2b70      	cmp	r3, #112	; 0x70
 80039ce:	d1c8      	bne.n	8003962 <HAL_TIM_ConfigClockSource+0x46>
      TIM_ETR_SetConfig(htim->Instance,
 80039d0:	68cb      	ldr	r3, [r1, #12]
 80039d2:	684a      	ldr	r2, [r1, #4]
 80039d4:	6889      	ldr	r1, [r1, #8]
 80039d6:	f7ff ff95 	bl	8003904 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039da:	2377      	movs	r3, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 80039dc:	6822      	ldr	r2, [r4, #0]
 80039de:	6891      	ldr	r1, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039e0:	430b      	orrs	r3, r1
 80039e2:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80039e4:	2200      	movs	r2, #0
}
 80039e6:	e7bc      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x46>
      TIM_ETR_SetConfig(htim->Instance,
 80039e8:	68cb      	ldr	r3, [r1, #12]
 80039ea:	684a      	ldr	r2, [r1, #4]
 80039ec:	6889      	ldr	r1, [r1, #8]
 80039ee:	f7ff ff89 	bl	8003904 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039f2:	2380      	movs	r3, #128	; 0x80
 80039f4:	6822      	ldr	r2, [r4, #0]
 80039f6:	01db      	lsls	r3, r3, #7
 80039f8:	6891      	ldr	r1, [r2, #8]
 80039fa:	e7f1      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0xc4>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039fc:	684a      	ldr	r2, [r1, #4]
 80039fe:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a00:	2110      	movs	r1, #16
 8003a02:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a04:	4c17      	ldr	r4, [pc, #92]	; (8003a64 <HAL_TIM_ConfigClockSource+0x148>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a06:	438b      	bics	r3, r1
 8003a08:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a0a:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 8003a0c:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a0e:	4021      	ands	r1, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a10:	24a0      	movs	r4, #160	; 0xa0
 8003a12:	43a3      	bics	r3, r4
 8003a14:	001c      	movs	r4, r3
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a16:	0113      	lsls	r3, r2, #4
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a18:	2270      	movs	r2, #112	; 0x70
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a1a:	033f      	lsls	r7, r7, #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a1c:	4323      	orrs	r3, r4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a1e:	4339      	orrs	r1, r7
  TIMx->CCMR1 = tmpccmr1 ;
 8003a20:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 8003a22:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003a24:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a26:	4393      	bics	r3, r2
 8003a28:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a2a:	2367      	movs	r3, #103	; 0x67
 8003a2c:	e7c0      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x94>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a2e:	68ca      	ldr	r2, [r1, #12]
 8003a30:	684c      	ldr	r4, [r1, #4]
  tmpccer = TIMx->CCER;
 8003a32:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a34:	6a03      	ldr	r3, [r0, #32]
 8003a36:	43bb      	bics	r3, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a38:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a3a:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a3c:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a3e:	43bb      	bics	r3, r7
 8003a40:	001f      	movs	r7, r3
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a42:	0113      	lsls	r3, r2, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a44:	220a      	movs	r2, #10
 8003a46:	4391      	bics	r1, r2
 8003a48:	000a      	movs	r2, r1
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a4a:	433b      	orrs	r3, r7
  tmpccer |= TIM_ICPolarity;
 8003a4c:	4322      	orrs	r2, r4
  TIMx->CCMR1 = tmpccmr1;
 8003a4e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003a50:	6202      	str	r2, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a52:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8003a54:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a56:	4393      	bics	r3, r2
 8003a58:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a5a:	2347      	movs	r3, #71	; 0x47
 8003a5c:	e7a8      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x94>
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	ffff0088 	.word	0xffff0088
 8003a64:	ffff0fff 	.word	0xffff0fff

08003a68 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a68:	231f      	movs	r3, #31
{
 8003a6a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a6c:	2401      	movs	r4, #1
 8003a6e:	4019      	ands	r1, r3
 8003a70:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a72:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8003a74:	6a03      	ldr	r3, [r0, #32]
 8003a76:	43a3      	bics	r3, r4
 8003a78:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a7a:	6a03      	ldr	r3, [r0, #32]
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	6202      	str	r2, [r0, #32]
}
 8003a80:	bd10      	pop	{r4, pc}
	...

08003a84 <HAL_TIM_OC_Start>:
{
 8003a84:	b510      	push	{r4, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a86:	0003      	movs	r3, r0
{
 8003a88:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a8a:	2900      	cmp	r1, #0
 8003a8c:	d105      	bne.n	8003a9a <HAL_TIM_OC_Start+0x16>
    return HAL_ERROR;
 8003a8e:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a90:	333e      	adds	r3, #62	; 0x3e
 8003a92:	781a      	ldrb	r2, [r3, #0]
 8003a94:	4282      	cmp	r2, r0
 8003a96:	d018      	beq.n	8003aca <HAL_TIM_OC_Start+0x46>
}
 8003a98:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a9a:	2904      	cmp	r1, #4
 8003a9c:	d10f      	bne.n	8003abe <HAL_TIM_OC_Start+0x3a>
 8003a9e:	333f      	adds	r3, #63	; 0x3f
 8003aa0:	781b      	ldrb	r3, [r3, #0]
    return HAL_ERROR;
 8003aa2:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	1e5a      	subs	r2, r3, #1
 8003aa8:	4193      	sbcs	r3, r2
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1f3      	bne.n	8003a98 <HAL_TIM_OC_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	0022      	movs	r2, r4
 8003ab4:	2904      	cmp	r1, #4
 8003ab6:	d123      	bne.n	8003b00 <HAL_TIM_OC_Start+0x7c>
 8003ab8:	323f      	adds	r2, #63	; 0x3f
 8003aba:	7013      	strb	r3, [r2, #0]
 8003abc:	e007      	b.n	8003ace <HAL_TIM_OC_Start+0x4a>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003abe:	2908      	cmp	r1, #8
 8003ac0:	d101      	bne.n	8003ac6 <HAL_TIM_OC_Start+0x42>
 8003ac2:	3340      	adds	r3, #64	; 0x40
 8003ac4:	e7ec      	b.n	8003aa0 <HAL_TIM_OC_Start+0x1c>
 8003ac6:	3341      	adds	r3, #65	; 0x41
 8003ac8:	e7ea      	b.n	8003aa0 <HAL_TIM_OC_Start+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aca:	2202      	movs	r2, #2
 8003acc:	701a      	strb	r2, [r3, #0]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ace:	2201      	movs	r2, #1
 8003ad0:	6820      	ldr	r0, [r4, #0]
 8003ad2:	f7ff ffc9 	bl	8003a68 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ad6:	6823      	ldr	r3, [r4, #0]
 8003ad8:	4914      	ldr	r1, [pc, #80]	; (8003b2c <HAL_TIM_OC_Start+0xa8>)
 8003ada:	428b      	cmp	r3, r1
 8003adc:	d016      	beq.n	8003b0c <HAL_TIM_OC_Start+0x88>
 8003ade:	4a14      	ldr	r2, [pc, #80]	; (8003b30 <HAL_TIM_OC_Start+0xac>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d013      	beq.n	8003b0c <HAL_TIM_OC_Start+0x88>
 8003ae4:	4a13      	ldr	r2, [pc, #76]	; (8003b34 <HAL_TIM_OC_Start+0xb0>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d010      	beq.n	8003b0c <HAL_TIM_OC_Start+0x88>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aea:	2280      	movs	r2, #128	; 0x80
 8003aec:	05d2      	lsls	r2, r2, #23
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d114      	bne.n	8003b1c <HAL_TIM_OC_Start+0x98>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003af2:	2107      	movs	r1, #7
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af8:	2a06      	cmp	r2, #6
 8003afa:	d112      	bne.n	8003b22 <HAL_TIM_OC_Start+0x9e>
  return HAL_OK;
 8003afc:	2000      	movs	r0, #0
 8003afe:	e7cb      	b.n	8003a98 <HAL_TIM_OC_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b00:	2908      	cmp	r1, #8
 8003b02:	d101      	bne.n	8003b08 <HAL_TIM_OC_Start+0x84>
 8003b04:	3240      	adds	r2, #64	; 0x40
 8003b06:	e7d8      	b.n	8003aba <HAL_TIM_OC_Start+0x36>
 8003b08:	3241      	adds	r2, #65	; 0x41
 8003b0a:	e7d6      	b.n	8003aba <HAL_TIM_OC_Start+0x36>
    __HAL_TIM_MOE_ENABLE(htim);
 8003b0c:	2280      	movs	r2, #128	; 0x80
 8003b0e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8003b10:	0212      	lsls	r2, r2, #8
 8003b12:	4302      	orrs	r2, r0
 8003b14:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b16:	428b      	cmp	r3, r1
 8003b18:	d1e7      	bne.n	8003aea <HAL_TIM_OC_Start+0x66>
 8003b1a:	e7ea      	b.n	8003af2 <HAL_TIM_OC_Start+0x6e>
 8003b1c:	4a06      	ldr	r2, [pc, #24]	; (8003b38 <HAL_TIM_OC_Start+0xb4>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d0e7      	beq.n	8003af2 <HAL_TIM_OC_Start+0x6e>
      __HAL_TIM_ENABLE(htim);
 8003b22:	2201      	movs	r2, #1
 8003b24:	6819      	ldr	r1, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	e7e7      	b.n	8003afc <HAL_TIM_OC_Start+0x78>
 8003b2c:	40012c00 	.word	0x40012c00
 8003b30:	40014400 	.word	0x40014400
 8003b34:	40014800 	.word	0x40014800
 8003b38:	40000400 	.word	0x40000400

08003b3c <HAL_TIM_PWM_Start>:
 8003b3c:	b510      	push	{r4, lr}
 8003b3e:	f7ff ffa1 	bl	8003a84 <HAL_TIM_OC_Start>
 8003b42:	bd10      	pop	{r4, pc}

08003b44 <HAL_TIMEx_HallSensor_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8003b44:	4770      	bx	lr

08003b46 <HAL_TIMEx_HallSensor_Init>:
{
 8003b46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b48:	0004      	movs	r4, r0
 8003b4a:	000e      	movs	r6, r1
    return HAL_ERROR;
 8003b4c:	2001      	movs	r0, #1
{
 8003b4e:	b08b      	sub	sp, #44	; 0x2c
  if (htim == NULL)
 8003b50:	2c00      	cmp	r4, #0
 8003b52:	d058      	beq.n	8003c06 <HAL_TIMEx_HallSensor_Init+0xc0>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003b54:	0023      	movs	r3, r4
 8003b56:	333d      	adds	r3, #61	; 0x3d
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d105      	bne.n	8003b6e <HAL_TIMEx_HallSensor_Init+0x28>
    htim->Lock = HAL_UNLOCKED;
 8003b62:	0023      	movs	r3, r4
 8003b64:	333c      	adds	r3, #60	; 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 8003b66:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8003b68:	701a      	strb	r2, [r3, #0]
    HAL_TIMEx_HallSensor_MspInit(htim);
 8003b6a:	f7ff ffeb 	bl	8003b44 <HAL_TIMEx_HallSensor_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003b6e:	2302      	movs	r3, #2
 8003b70:	9a00      	ldr	r2, [sp, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b72:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8003b74:	7013      	strb	r3, [r2, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b76:	6820      	ldr	r0, [r4, #0]
 8003b78:	f7ff fd6a 	bl	8003650 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8003b7c:	6820      	ldr	r0, [r4, #0]
 8003b7e:	2203      	movs	r2, #3
 8003b80:	68b3      	ldr	r3, [r6, #8]
 8003b82:	6831      	ldr	r1, [r6, #0]
 8003b84:	f7ff fe96 	bl	80038b4 <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003b88:	220c      	movs	r2, #12
 8003b8a:	6820      	ldr	r0, [r4, #0]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8003b8c:	2770      	movs	r7, #112	; 0x70
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003b8e:	6983      	ldr	r3, [r0, #24]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8003b90:	2500      	movs	r5, #0
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003b92:	4393      	bics	r3, r2
 8003b94:	6183      	str	r3, [r0, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8003b96:	6983      	ldr	r3, [r0, #24]
 8003b98:	6872      	ldr	r2, [r6, #4]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8003b9a:	a903      	add	r1, sp, #12
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	6183      	str	r3, [r0, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8003ba0:	2380      	movs	r3, #128	; 0x80
 8003ba2:	6842      	ldr	r2, [r0, #4]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8003ba4:	9703      	str	r7, [sp, #12]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	6043      	str	r3, [r0, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8003baa:	6883      	ldr	r3, [r0, #8]
 8003bac:	43bb      	bics	r3, r7
 8003bae:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8003bb0:	2340      	movs	r3, #64	; 0x40
 8003bb2:	6882      	ldr	r2, [r0, #8]
 8003bb4:	4313      	orrs	r3, r2
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003bb6:	2207      	movs	r2, #7
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8003bb8:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003bba:	6883      	ldr	r3, [r0, #8]
 8003bbc:	4393      	bics	r3, r2
 8003bbe:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8003bc0:	2304      	movs	r3, #4
 8003bc2:	6882      	ldr	r2, [r0, #8]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	6083      	str	r3, [r0, #8]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8003bc8:	68f3      	ldr	r3, [r6, #12]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8003bca:	9507      	str	r5, [sp, #28]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8003bcc:	9301      	str	r3, [sp, #4]
 8003bce:	9304      	str	r3, [sp, #16]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003bd0:	9508      	str	r5, [sp, #32]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003bd2:	9509      	str	r5, [sp, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003bd4:	9506      	str	r5, [sp, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003bd6:	9505      	str	r5, [sp, #20]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8003bd8:	f7ff fdd2 	bl	8003780 <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003bdc:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8003bde:	0028      	movs	r0, r5
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	43ba      	bics	r2, r7
 8003be4:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8003be6:	2250      	movs	r2, #80	; 0x50
 8003be8:	6859      	ldr	r1, [r3, #4]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	605a      	str	r2, [r3, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bee:	0022      	movs	r2, r4
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	3246      	adds	r2, #70	; 0x46
 8003bf4:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003bf6:	3a08      	subs	r2, #8
 8003bf8:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003bfa:	7053      	strb	r3, [r2, #1]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003bfc:	7113      	strb	r3, [r2, #4]
  htim->State = HAL_TIM_STATE_READY;
 8003bfe:	9a00      	ldr	r2, [sp, #0]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c00:	3443      	adds	r4, #67	; 0x43
 8003c02:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8003c04:	7013      	strb	r3, [r2, #0]
}
 8003c06:	b00b      	add	sp, #44	; 0x2c
 8003c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003c0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c0c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c0e:	0004      	movs	r4, r0
 8003c10:	2202      	movs	r2, #2
 8003c12:	343c      	adds	r4, #60	; 0x3c
 8003c14:	7825      	ldrb	r5, [r4, #0]
{
 8003c16:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8003c18:	0010      	movs	r0, r2
 8003c1a:	2d01      	cmp	r5, #1
 8003c1c:	d01d      	beq.n	8003c5a <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c1e:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c20:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8003c22:	353d      	adds	r5, #61	; 0x3d
 8003c24:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003c2a:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c2c:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c2e:	680e      	ldr	r6, [r1, #0]
 8003c30:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c32:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c34:	4809      	ldr	r0, [pc, #36]	; (8003c5c <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8003c36:	4283      	cmp	r3, r0
 8003c38:	d006      	beq.n	8003c48 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8003c3a:	2080      	movs	r0, #128	; 0x80
 8003c3c:	05c0      	lsls	r0, r0, #23
 8003c3e:	4283      	cmp	r3, r0
 8003c40:	d002      	beq.n	8003c48 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8003c42:	4807      	ldr	r0, [pc, #28]	; (8003c60 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8003c44:	4283      	cmp	r3, r0
 8003c46:	d104      	bne.n	8003c52 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c48:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c4a:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c4c:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c4e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c52:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8003c54:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003c56:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8003c58:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8003c5a:	bd70      	pop	{r4, r5, r6, pc}
 8003c5c:	40012c00 	.word	0x40012c00
 8003c60:	40000400 	.word	0x40000400

08003c64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c64:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c66:	0004      	movs	r4, r0
 8003c68:	343c      	adds	r4, #60	; 0x3c
 8003c6a:	7823      	ldrb	r3, [r4, #0]
{
 8003c6c:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8003c6e:	2002      	movs	r0, #2
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d01c      	beq.n	8003cae <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c74:	68c8      	ldr	r0, [r1, #12]
 8003c76:	4b0e      	ldr	r3, [pc, #56]	; (8003cb0 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c78:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c7a:	4003      	ands	r3, r0
 8003c7c:	6888      	ldr	r0, [r1, #8]
 8003c7e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c80:	480c      	ldr	r0, [pc, #48]	; (8003cb4 <HAL_TIMEx_ConfigBreakDeadTime+0x50>)
 8003c82:	4003      	ands	r3, r0
 8003c84:	6848      	ldr	r0, [r1, #4]
 8003c86:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c88:	480b      	ldr	r0, [pc, #44]	; (8003cb8 <HAL_TIMEx_ConfigBreakDeadTime+0x54>)
 8003c8a:	4003      	ands	r3, r0
 8003c8c:	6808      	ldr	r0, [r1, #0]
 8003c8e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c90:	480a      	ldr	r0, [pc, #40]	; (8003cbc <HAL_TIMEx_ConfigBreakDeadTime+0x58>)
 8003c92:	4003      	ands	r3, r0
 8003c94:	6908      	ldr	r0, [r1, #16]
 8003c96:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c98:	4809      	ldr	r0, [pc, #36]	; (8003cc0 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 8003c9a:	4003      	ands	r3, r0
 8003c9c:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c9e:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ca0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ca2:	4808      	ldr	r0, [pc, #32]	; (8003cc4 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 8003ca4:	4003      	ands	r3, r0

  __HAL_UNLOCK(htim);
 8003ca6:	2000      	movs	r0, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ca8:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8003caa:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8003cac:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8003cae:	bd10      	pop	{r4, pc}
 8003cb0:	fffffcff 	.word	0xfffffcff
 8003cb4:	fffffbff 	.word	0xfffffbff
 8003cb8:	fffff7ff 	.word	0xfffff7ff
 8003cbc:	ffffefff 	.word	0xffffefff
 8003cc0:	ffffdfff 	.word	0xffffdfff
 8003cc4:	ffffbfff 	.word	0xffffbfff

08003cc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cc8:	b570      	push	{r4, r5, r6, lr}
 8003cca:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ccc:	6925      	ldr	r5, [r4, #16]
 8003cce:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cd0:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cd2:	432a      	orrs	r2, r5
 8003cd4:	6965      	ldr	r5, [r4, #20]
 8003cd6:	69c3      	ldr	r3, [r0, #28]
 8003cd8:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cda:	6808      	ldr	r0, [r1, #0]
 8003cdc:	4d39      	ldr	r5, [pc, #228]	; (8003dc4 <UART_SetConfig+0xfc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cde:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ce0:	4028      	ands	r0, r5
 8003ce2:	4302      	orrs	r2, r0
 8003ce4:	600a      	str	r2, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ce6:	684a      	ldr	r2, [r1, #4]
 8003ce8:	4837      	ldr	r0, [pc, #220]	; (8003dc8 <UART_SetConfig+0x100>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 8003cea:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cec:	4002      	ands	r2, r0
 8003cee:	68e0      	ldr	r0, [r4, #12]
 8003cf0:	4302      	orrs	r2, r0
 8003cf2:	604a      	str	r2, [r1, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8003cf4:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cf6:	6888      	ldr	r0, [r1, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8003cf8:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cfa:	4d34      	ldr	r5, [pc, #208]	; (8003dcc <UART_SetConfig+0x104>)
 8003cfc:	4028      	ands	r0, r5
 8003cfe:	4302      	orrs	r2, r0
 8003d00:	608a      	str	r2, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d02:	2103      	movs	r1, #3
 8003d04:	4a32      	ldr	r2, [pc, #200]	; (8003dd0 <UART_SetConfig+0x108>)
 8003d06:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d08:	400a      	ands	r2, r1
 8003d0a:	2180      	movs	r1, #128	; 0x80
 8003d0c:	3a01      	subs	r2, #1
 8003d0e:	0209      	lsls	r1, r1, #8
 8003d10:	2a02      	cmp	r2, #2
 8003d12:	d84c      	bhi.n	8003dae <UART_SetConfig+0xe6>
 8003d14:	482f      	ldr	r0, [pc, #188]	; (8003dd4 <UART_SetConfig+0x10c>)
 8003d16:	5c80      	ldrb	r0, [r0, r2]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d18:	428b      	cmp	r3, r1
 8003d1a:	d124      	bne.n	8003d66 <UART_SetConfig+0x9e>
  {
    switch (clocksource)
 8003d1c:	2808      	cmp	r0, #8
 8003d1e:	d817      	bhi.n	8003d50 <UART_SetConfig+0x88>
 8003d20:	f7fc f9fc 	bl	800011c <__gnu_thumb1_case_uqi>
 8003d24:	16081647 	.word	0x16081647
 8003d28:	16161605 	.word	0x16161605
 8003d2c:	09          	.byte	0x09
 8003d2d:	00          	.byte	0x00
        break;
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d2e:	f7ff fa8d 	bl	800324c <HAL_RCC_GetSysClockFreq>
 8003d32:	e040      	b.n	8003db6 <UART_SetConfig+0xee>
    switch (clocksource)
 8003d34:	4b28      	ldr	r3, [pc, #160]	; (8003dd8 <UART_SetConfig+0x110>)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d36:	0058      	lsls	r0, r3, #1
 8003d38:	6863      	ldr	r3, [r4, #4]
 8003d3a:	6861      	ldr	r1, [r4, #4]
 8003d3c:	085b      	lsrs	r3, r3, #1
 8003d3e:	18c0      	adds	r0, r0, r3
 8003d40:	f7fc fa0a 	bl	8000158 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d44:	4925      	ldr	r1, [pc, #148]	; (8003ddc <UART_SetConfig+0x114>)
 8003d46:	b282      	uxth	r2, r0
 8003d48:	3a10      	subs	r2, #16
 8003d4a:	0403      	lsls	r3, r0, #16
 8003d4c:	428a      	cmp	r2, r1
 8003d4e:	d901      	bls.n	8003d54 <UART_SetConfig+0x8c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d50:	2001      	movs	r0, #1
 8003d52:	e033      	b.n	8003dbc <UART_SetConfig+0xf4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d54:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d56:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d58:	4390      	bics	r0, r2
 8003d5a:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8003d5c:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d5e:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8003d60:	4318      	orrs	r0, r3
 8003d62:	60d0      	str	r0, [r2, #12]
 8003d64:	e029      	b.n	8003dba <UART_SetConfig+0xf2>
    switch (clocksource)
 8003d66:	2808      	cmp	r0, #8
 8003d68:	d8f2      	bhi.n	8003d50 <UART_SetConfig+0x88>
 8003d6a:	f7fc f9cd 	bl	8000108 <__gnu_thumb1_case_sqi>
 8003d6e:	f116      	.short	0xf116
 8003d70:	f11bf11e 	.word	0xf11bf11e
 8003d74:	f1f1      	.short	0xf1f1
 8003d76:	05          	.byte	0x05
 8003d77:	00          	.byte	0x00
 8003d78:	2080      	movs	r0, #128	; 0x80
 8003d7a:	0200      	lsls	r0, r0, #8
    }

    if (pclk != 0U)
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d7c:	6863      	ldr	r3, [r4, #4]
 8003d7e:	6861      	ldr	r1, [r4, #4]
 8003d80:	085b      	lsrs	r3, r3, #1
 8003d82:	1818      	adds	r0, r3, r0
 8003d84:	f7fc f9e8 	bl	8000158 <__udivsi3>
 8003d88:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d8a:	0002      	movs	r2, r0
 8003d8c:	4b13      	ldr	r3, [pc, #76]	; (8003ddc <UART_SetConfig+0x114>)
 8003d8e:	3a10      	subs	r2, #16
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d8dd      	bhi.n	8003d50 <UART_SetConfig+0x88>
      {
        huart->Instance->BRR = usartdiv;
 8003d94:	6823      	ldr	r3, [r4, #0]
 8003d96:	60d8      	str	r0, [r3, #12]
 8003d98:	e00f      	b.n	8003dba <UART_SetConfig+0xf2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d9a:	f7ff fb13 	bl	80033c4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003d9e:	2800      	cmp	r0, #0
 8003da0:	d00b      	beq.n	8003dba <UART_SetConfig+0xf2>
 8003da2:	e7eb      	b.n	8003d7c <UART_SetConfig+0xb4>
        pclk = HAL_RCC_GetSysClockFreq();
 8003da4:	f7ff fa52 	bl	800324c <HAL_RCC_GetSysClockFreq>
        break;
 8003da8:	e7f9      	b.n	8003d9e <UART_SetConfig+0xd6>
        pclk = (uint32_t) HSI_VALUE;
 8003daa:	480b      	ldr	r0, [pc, #44]	; (8003dd8 <UART_SetConfig+0x110>)
 8003dac:	e7e6      	b.n	8003d7c <UART_SetConfig+0xb4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dae:	428b      	cmp	r3, r1
 8003db0:	d1f3      	bne.n	8003d9a <UART_SetConfig+0xd2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003db2:	f7ff fb07 	bl	80033c4 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8003db6:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8003db8:	d1bd      	bne.n	8003d36 <UART_SetConfig+0x6e>
 8003dba:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8003dc0:	66a3      	str	r3, [r4, #104]	; 0x68

  return ret;
}
 8003dc2:	bd70      	pop	{r4, r5, r6, pc}
 8003dc4:	ffff69f3 	.word	0xffff69f3
 8003dc8:	ffffcfff 	.word	0xffffcfff
 8003dcc:	fffff4ff 	.word	0xfffff4ff
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	08006722 	.word	0x08006722
 8003dd8:	007a1200 	.word	0x007a1200
 8003ddc:	0000ffef 	.word	0x0000ffef

08003de0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003de0:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8003de2:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003de4:	07da      	lsls	r2, r3, #31
 8003de6:	d506      	bpl.n	8003df6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003de8:	6801      	ldr	r1, [r0, #0]
 8003dea:	4c28      	ldr	r4, [pc, #160]	; (8003e8c <UART_AdvFeatureConfig+0xac>)
 8003dec:	684a      	ldr	r2, [r1, #4]
 8003dee:	4022      	ands	r2, r4
 8003df0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003df2:	4322      	orrs	r2, r4
 8003df4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003df6:	079a      	lsls	r2, r3, #30
 8003df8:	d506      	bpl.n	8003e08 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003dfa:	6801      	ldr	r1, [r0, #0]
 8003dfc:	4c24      	ldr	r4, [pc, #144]	; (8003e90 <UART_AdvFeatureConfig+0xb0>)
 8003dfe:	684a      	ldr	r2, [r1, #4]
 8003e00:	4022      	ands	r2, r4
 8003e02:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003e04:	4322      	orrs	r2, r4
 8003e06:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e08:	075a      	lsls	r2, r3, #29
 8003e0a:	d506      	bpl.n	8003e1a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e0c:	6801      	ldr	r1, [r0, #0]
 8003e0e:	4c21      	ldr	r4, [pc, #132]	; (8003e94 <UART_AdvFeatureConfig+0xb4>)
 8003e10:	684a      	ldr	r2, [r1, #4]
 8003e12:	4022      	ands	r2, r4
 8003e14:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003e16:	4322      	orrs	r2, r4
 8003e18:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e1a:	071a      	lsls	r2, r3, #28
 8003e1c:	d506      	bpl.n	8003e2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e1e:	6801      	ldr	r1, [r0, #0]
 8003e20:	4c1d      	ldr	r4, [pc, #116]	; (8003e98 <UART_AdvFeatureConfig+0xb8>)
 8003e22:	684a      	ldr	r2, [r1, #4]
 8003e24:	4022      	ands	r2, r4
 8003e26:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003e28:	4322      	orrs	r2, r4
 8003e2a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e2c:	06da      	lsls	r2, r3, #27
 8003e2e:	d506      	bpl.n	8003e3e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e30:	6801      	ldr	r1, [r0, #0]
 8003e32:	4c1a      	ldr	r4, [pc, #104]	; (8003e9c <UART_AdvFeatureConfig+0xbc>)
 8003e34:	688a      	ldr	r2, [r1, #8]
 8003e36:	4022      	ands	r2, r4
 8003e38:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003e3a:	4322      	orrs	r2, r4
 8003e3c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e3e:	069a      	lsls	r2, r3, #26
 8003e40:	d506      	bpl.n	8003e50 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e42:	6801      	ldr	r1, [r0, #0]
 8003e44:	4c16      	ldr	r4, [pc, #88]	; (8003ea0 <UART_AdvFeatureConfig+0xc0>)
 8003e46:	688a      	ldr	r2, [r1, #8]
 8003e48:	4022      	ands	r2, r4
 8003e4a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003e4c:	4322      	orrs	r2, r4
 8003e4e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e50:	065a      	lsls	r2, r3, #25
 8003e52:	d510      	bpl.n	8003e76 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e54:	6801      	ldr	r1, [r0, #0]
 8003e56:	4d13      	ldr	r5, [pc, #76]	; (8003ea4 <UART_AdvFeatureConfig+0xc4>)
 8003e58:	684a      	ldr	r2, [r1, #4]
 8003e5a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003e5c:	402a      	ands	r2, r5
 8003e5e:	4322      	orrs	r2, r4
 8003e60:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e62:	2280      	movs	r2, #128	; 0x80
 8003e64:	0352      	lsls	r2, r2, #13
 8003e66:	4294      	cmp	r4, r2
 8003e68:	d105      	bne.n	8003e76 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e6a:	684a      	ldr	r2, [r1, #4]
 8003e6c:	4c0e      	ldr	r4, [pc, #56]	; (8003ea8 <UART_AdvFeatureConfig+0xc8>)
 8003e6e:	4022      	ands	r2, r4
 8003e70:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003e72:	4322      	orrs	r2, r4
 8003e74:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e76:	061b      	lsls	r3, r3, #24
 8003e78:	d506      	bpl.n	8003e88 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e7a:	6802      	ldr	r2, [r0, #0]
 8003e7c:	490b      	ldr	r1, [pc, #44]	; (8003eac <UART_AdvFeatureConfig+0xcc>)
 8003e7e:	6853      	ldr	r3, [r2, #4]
 8003e80:	400b      	ands	r3, r1
 8003e82:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003e84:	430b      	orrs	r3, r1
 8003e86:	6053      	str	r3, [r2, #4]
  }
}
 8003e88:	bd30      	pop	{r4, r5, pc}
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	fffdffff 	.word	0xfffdffff
 8003e90:	fffeffff 	.word	0xfffeffff
 8003e94:	fffbffff 	.word	0xfffbffff
 8003e98:	ffff7fff 	.word	0xffff7fff
 8003e9c:	ffffefff 	.word	0xffffefff
 8003ea0:	ffffdfff 	.word	0xffffdfff
 8003ea4:	ffefffff 	.word	0xffefffff
 8003ea8:	ff9fffff 	.word	0xff9fffff
 8003eac:	fff7ffff 	.word	0xfff7ffff

08003eb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003eb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003eb2:	2780      	movs	r7, #128	; 0x80
{
 8003eb4:	0004      	movs	r4, r0
 8003eb6:	000d      	movs	r5, r1
 8003eb8:	0016      	movs	r6, r2
 8003eba:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ebc:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ebe:	6822      	ldr	r2, [r4, #0]
 8003ec0:	69d3      	ldr	r3, [r2, #28]
 8003ec2:	402b      	ands	r3, r5
 8003ec4:	1b5b      	subs	r3, r3, r5
 8003ec6:	4259      	negs	r1, r3
 8003ec8:	414b      	adcs	r3, r1
 8003eca:	42b3      	cmp	r3, r6
 8003ecc:	d001      	beq.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0x22>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8003ece:	2000      	movs	r0, #0
 8003ed0:	e028      	b.n	8003f24 <UART_WaitOnFlagUntilTimeout+0x74>
    if (Timeout != HAL_MAX_DELAY)
 8003ed2:	9b08      	ldr	r3, [sp, #32]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	d0f3      	beq.n	8003ec0 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ed8:	f7fe fd2a 	bl	8002930 <HAL_GetTick>
 8003edc:	9b01      	ldr	r3, [sp, #4]
 8003ede:	1ac0      	subs	r0, r0, r3
 8003ee0:	9b08      	ldr	r3, [sp, #32]
 8003ee2:	4298      	cmp	r0, r3
 8003ee4:	d801      	bhi.n	8003eea <UART_WaitOnFlagUntilTimeout+0x3a>
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d11d      	bne.n	8003f26 <UART_WaitOnFlagUntilTimeout+0x76>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eea:	f3ef 8010 	mrs	r0, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ef4:	6821      	ldr	r1, [r4, #0]
 8003ef6:	4d1e      	ldr	r5, [pc, #120]	; (8003f70 <UART_WaitOnFlagUntilTimeout+0xc0>)
 8003ef8:	680b      	ldr	r3, [r1, #0]
 8003efa:	402b      	ands	r3, r5
 8003efc:	600b      	str	r3, [r1, #0]
 8003efe:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f02:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f06:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f0a:	6821      	ldr	r1, [r4, #0]
 8003f0c:	688b      	ldr	r3, [r1, #8]
 8003f0e:	4393      	bics	r3, r2
 8003f10:	608b      	str	r3, [r1, #8]
 8003f12:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8003f16:	2320      	movs	r3, #32
 8003f18:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f1a:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8003f1c:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8003f1e:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8003f20:	3474      	adds	r4, #116	; 0x74
 8003f22:	7023      	strb	r3, [r4, #0]
}
 8003f24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f26:	2104      	movs	r1, #4
 8003f28:	6823      	ldr	r3, [r4, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	420a      	tst	r2, r1
 8003f2e:	d0c6      	beq.n	8003ebe <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f30:	69da      	ldr	r2, [r3, #28]
 8003f32:	423a      	tst	r2, r7
 8003f34:	d0c3      	beq.n	8003ebe <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f36:	621f      	str	r7, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f38:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f42:	6821      	ldr	r1, [r4, #0]
 8003f44:	4d0a      	ldr	r5, [pc, #40]	; (8003f70 <UART_WaitOnFlagUntilTimeout+0xc0>)
 8003f46:	680b      	ldr	r3, [r1, #0]
 8003f48:	402b      	ands	r3, r5
 8003f4a:	600b      	str	r3, [r1, #0]
 8003f4c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f50:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f54:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f58:	6821      	ldr	r1, [r4, #0]
 8003f5a:	688b      	ldr	r3, [r1, #8]
 8003f5c:	4393      	bics	r3, r2
 8003f5e:	608b      	str	r3, [r1, #8]
 8003f60:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 8003f64:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f66:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 8003f68:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003f6a:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f6c:	67d3      	str	r3, [r2, #124]	; 0x7c
 8003f6e:	e7d5      	b.n	8003f1c <UART_WaitOnFlagUntilTimeout+0x6c>
 8003f70:	fffffe5f 	.word	0xfffffe5f

08003f74 <HAL_UART_Transmit>:
{
 8003f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f76:	b087      	sub	sp, #28
 8003f78:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8003f7a:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8003f7c:	0004      	movs	r4, r0
 8003f7e:	000d      	movs	r5, r1
 8003f80:	0016      	movs	r6, r2
    return HAL_BUSY;
 8003f82:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8003f84:	2b20      	cmp	r3, #32
 8003f86:	d151      	bne.n	800402c <HAL_UART_Transmit+0xb8>
      return  HAL_ERROR;
 8003f88:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8003f8a:	2900      	cmp	r1, #0
 8003f8c:	d04e      	beq.n	800402c <HAL_UART_Transmit+0xb8>
 8003f8e:	2a00      	cmp	r2, #0
 8003f90:	d04c      	beq.n	800402c <HAL_UART_Transmit+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f92:	2380      	movs	r3, #128	; 0x80
 8003f94:	68a2      	ldr	r2, [r4, #8]
 8003f96:	015b      	lsls	r3, r3, #5
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d104      	bne.n	8003fa6 <HAL_UART_Transmit+0x32>
 8003f9c:	6923      	ldr	r3, [r4, #16]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003fa2:	4201      	tst	r1, r0
 8003fa4:	d142      	bne.n	800402c <HAL_UART_Transmit+0xb8>
    __HAL_LOCK(huart);
 8003fa6:	0023      	movs	r3, r4
 8003fa8:	3374      	adds	r3, #116	; 0x74
 8003faa:	9303      	str	r3, [sp, #12]
 8003fac:	781b      	ldrb	r3, [r3, #0]
    return HAL_BUSY;
 8003fae:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d03b      	beq.n	800402c <HAL_UART_Transmit+0xb8>
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	9a03      	ldr	r2, [sp, #12]
 8003fb8:	7013      	strb	r3, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fba:	2200      	movs	r2, #0
 8003fbc:	1d23      	adds	r3, r4, #4
 8003fbe:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fc0:	2321      	movs	r3, #33	; 0x21
 8003fc2:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 8003fc4:	f7fe fcb4 	bl	8002930 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8003fc8:	0023      	movs	r3, r4
 8003fca:	3350      	adds	r3, #80	; 0x50
 8003fcc:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8003fce:	3302      	adds	r3, #2
 8003fd0:	801e      	strh	r6, [r3, #0]
 8003fd2:	9304      	str	r3, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fd4:	2380      	movs	r3, #128	; 0x80
 8003fd6:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8003fd8:	0007      	movs	r7, r0
      pdata16bits = NULL;
 8003fda:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fdc:	015b      	lsls	r3, r3, #5
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d104      	bne.n	8003fec <HAL_UART_Transmit+0x78>
 8003fe2:	6923      	ldr	r3, [r4, #16]
 8003fe4:	42b3      	cmp	r3, r6
 8003fe6:	d101      	bne.n	8003fec <HAL_UART_Transmit+0x78>
 8003fe8:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8003fea:	001d      	movs	r5, r3
    __HAL_UNLOCK(huart);
 8003fec:	2300      	movs	r3, #0
 8003fee:	9a03      	ldr	r2, [sp, #12]
 8003ff0:	7013      	strb	r3, [r2, #0]
    while (huart->TxXferCount > 0U)
 8003ff2:	0023      	movs	r3, r4
 8003ff4:	3352      	adds	r3, #82	; 0x52
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10b      	bne.n	8004016 <HAL_UART_Transmit+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ffe:	9b05      	ldr	r3, [sp, #20]
 8004000:	2140      	movs	r1, #64	; 0x40
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	0020      	movs	r0, r4
 8004006:	003b      	movs	r3, r7
 8004008:	f7ff ff52 	bl	8003eb0 <UART_WaitOnFlagUntilTimeout>
 800400c:	2800      	cmp	r0, #0
 800400e:	d10c      	bne.n	800402a <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8004010:	2320      	movs	r3, #32
 8004012:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8004014:	e00a      	b.n	800402c <HAL_UART_Transmit+0xb8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004016:	9b05      	ldr	r3, [sp, #20]
 8004018:	2200      	movs	r2, #0
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	2180      	movs	r1, #128	; 0x80
 800401e:	003b      	movs	r3, r7
 8004020:	0020      	movs	r0, r4
 8004022:	f7ff ff45 	bl	8003eb0 <UART_WaitOnFlagUntilTimeout>
 8004026:	2800      	cmp	r0, #0
 8004028:	d002      	beq.n	8004030 <HAL_UART_Transmit+0xbc>
        return HAL_TIMEOUT;
 800402a:	2003      	movs	r0, #3
}
 800402c:	b007      	add	sp, #28
 800402e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004030:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8004032:	2d00      	cmp	r5, #0
 8004034:	d10b      	bne.n	800404e <HAL_UART_Transmit+0xda>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004036:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8004038:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800403a:	05db      	lsls	r3, r3, #23
 800403c:	0ddb      	lsrs	r3, r3, #23
 800403e:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8004040:	9b04      	ldr	r3, [sp, #16]
 8004042:	9a04      	ldr	r2, [sp, #16]
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	3b01      	subs	r3, #1
 8004048:	b29b      	uxth	r3, r3
 800404a:	8013      	strh	r3, [r2, #0]
 800404c:	e7d1      	b.n	8003ff2 <HAL_UART_Transmit+0x7e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800404e:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8004050:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004052:	8513      	strh	r3, [r2, #40]	; 0x28
        pdata8bits++;
 8004054:	e7f4      	b.n	8004040 <HAL_UART_Transmit+0xcc>
	...

08004058 <UART_CheckIdleState>:
{
 8004058:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800405a:	2600      	movs	r6, #0
{
 800405c:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800405e:	1d03      	adds	r3, r0, #4
 8004060:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8004062:	f7fe fc65 	bl	8002930 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004066:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004068:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	071b      	lsls	r3, r3, #28
 800406e:	d416      	bmi.n	800409e <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004070:	6823      	ldr	r3, [r4, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	075b      	lsls	r3, r3, #29
 8004076:	d50a      	bpl.n	800408e <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004078:	2180      	movs	r1, #128	; 0x80
 800407a:	4b0f      	ldr	r3, [pc, #60]	; (80040b8 <UART_CheckIdleState+0x60>)
 800407c:	2200      	movs	r2, #0
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	0020      	movs	r0, r4
 8004082:	002b      	movs	r3, r5
 8004084:	03c9      	lsls	r1, r1, #15
 8004086:	f7ff ff13 	bl	8003eb0 <UART_WaitOnFlagUntilTimeout>
 800408a:	2800      	cmp	r0, #0
 800408c:	d112      	bne.n	80040b4 <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 800408e:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004090:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004092:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004094:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004096:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8004098:	3474      	adds	r4, #116	; 0x74
 800409a:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 800409c:	e00b      	b.n	80040b6 <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800409e:	2180      	movs	r1, #128	; 0x80
 80040a0:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <UART_CheckIdleState+0x60>)
 80040a2:	0032      	movs	r2, r6
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	0389      	lsls	r1, r1, #14
 80040a8:	0003      	movs	r3, r0
 80040aa:	0020      	movs	r0, r4
 80040ac:	f7ff ff00 	bl	8003eb0 <UART_WaitOnFlagUntilTimeout>
 80040b0:	2800      	cmp	r0, #0
 80040b2:	d0dd      	beq.n	8004070 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 80040b4:	2003      	movs	r0, #3
}
 80040b6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80040b8:	01ffffff 	.word	0x01ffffff

080040bc <HAL_UART_Init>:
{
 80040bc:	b510      	push	{r4, lr}
 80040be:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80040c0:	d101      	bne.n	80040c6 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80040c2:	2001      	movs	r0, #1
}
 80040c4:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80040c6:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d104      	bne.n	80040d6 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 80040cc:	0002      	movs	r2, r0
 80040ce:	3274      	adds	r2, #116	; 0x74
 80040d0:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80040d2:	f7fd fec7 	bl	8001e64 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80040d6:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80040d8:	2101      	movs	r1, #1
 80040da:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80040dc:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80040de:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040e0:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80040e2:	438b      	bics	r3, r1
 80040e4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040e6:	f7ff fdef 	bl	8003cc8 <UART_SetConfig>
 80040ea:	2801      	cmp	r0, #1
 80040ec:	d0e9      	beq.n	80040c2 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80040f4:	0020      	movs	r0, r4
 80040f6:	f7ff fe73 	bl	8003de0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040fa:	6823      	ldr	r3, [r4, #0]
 80040fc:	4907      	ldr	r1, [pc, #28]	; (800411c <HAL_UART_Init+0x60>)
 80040fe:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8004100:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004102:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004104:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004106:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004108:	689a      	ldr	r2, [r3, #8]
 800410a:	438a      	bics	r2, r1
 800410c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800410e:	2201      	movs	r2, #1
 8004110:	6819      	ldr	r1, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004116:	f7ff ff9f 	bl	8004058 <UART_CheckIdleState>
 800411a:	e7d3      	b.n	80040c4 <HAL_UART_Init+0x8>
 800411c:	ffffb7ff 	.word	0xffffb7ff

08004120 <VBS_GetAvBusVoltage_V>:
  * @brief  It return latest averaged Vbus measurement expressed in Volts
  * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  * @retval uint16_t Latest averaged Vbus measurement in Volts
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
 8004120:	0003      	movs	r3, r0
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 8004122:	88c0      	ldrh	r0, [r0, #6]
  temp *= pHandle->ConversionFactor;
 8004124:	885b      	ldrh	r3, [r3, #2]
 8004126:	4358      	muls	r0, r3
  temp /= 65536u;

  return ( ( uint16_t )temp );
 8004128:	0c00      	lsrs	r0, r0, #16
}
 800412a:	4770      	bx	lr

0800412c <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 800412c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800412e:	b20b      	sxth	r3, r1
 8004130:	9101      	str	r1, [sp, #4]
 8004132:	1409      	asrs	r1, r1, #16
  uint16_t table_element;
  uint32_t uw_temp;
  int32_t  sw_temp;
  qd_t local_vqd = Vqd;

  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 8004134:	001a      	movs	r2, r3
            ( int32_t )( Vqd.d ) * Vqd.d;
 8004136:	000c      	movs	r4, r1
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 8004138:	435a      	muls	r2, r3
            ( int32_t )( Vqd.d ) * Vqd.d;
 800413a:	434c      	muls	r4, r1
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 800413c:	1912      	adds	r2, r2, r4

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 800413e:	8804      	ldrh	r4, [r0, #0]
 8004140:	4364      	muls	r4, r4
 8004142:	4294      	cmp	r4, r2
 8004144:	d217      	bcs.n	8004176 <Circle_Limitation+0x4a>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 8004146:	0004      	movs	r4, r0
 8004148:	34b2      	adds	r4, #178	; 0xb2
 800414a:	7824      	ldrb	r4, [r4, #0]
    uw_temp /= ( uint32_t )( 16777216 );
 800414c:	0e12      	lsrs	r2, r2, #24
    uw_temp -= pHandle->Start_index;
 800414e:	1b12      	subs	r2, r2, r4

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	0052      	lsls	r2, r2, #1
 8004154:	1880      	adds	r0, r0, r2

    sw_temp = Vqd.q * ( int32_t )table_element;
 8004156:	8880      	ldrh	r0, [r0, #4]
 8004158:	4343      	muls	r3, r0
 800415a:	001c      	movs	r4, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );

    sw_temp = Vqd.d * ( int32_t )( table_element );
 800415c:	4348      	muls	r0, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 800415e:	17da      	asrs	r2, r3, #31
 8004160:	0452      	lsls	r2, r2, #17
 8004162:	0c53      	lsrs	r3, r2, #17
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8004164:	17c2      	asrs	r2, r0, #31
 8004166:	0452      	lsls	r2, r2, #17
 8004168:	0c51      	lsrs	r1, r2, #17
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 800416a:	191b      	adds	r3, r3, r4
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 800416c:	1809      	adds	r1, r1, r0
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 800416e:	13db      	asrs	r3, r3, #15
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8004170:	13c9      	asrs	r1, r1, #15
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8004172:	b21b      	sxth	r3, r3
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8004174:	b209      	sxth	r1, r1
  }

  return ( local_vqd );
 8004176:	0409      	lsls	r1, r1, #16
 8004178:	b298      	uxth	r0, r3
 800417a:	4308      	orrs	r0, r1
}
 800417c:	b004      	add	sp, #16
 800417e:	bd10      	pop	{r4, pc}

08004180 <DAC_SetChannelConfig>:
  */
__weak void DAC_SetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                              MC_Protocol_REG_t bVariable)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  pDacHandle->bChannel_variable[bChannel] = bVariable;
 8004180:	1840      	adds	r0, r0, r1
 8004182:	3030      	adds	r0, #48	; 0x30
 8004184:	7002      	strb	r2, [r0, #0]
}
 8004186:	4770      	bx	lr

08004188 <DAC_GetChannelConfig>:
  *         MC_PROTOCOL_REG_I_A).
  */
__weak MC_Protocol_REG_t DAC_GetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  return (pDacHandle->bChannel_variable[bChannel]);
 8004188:	1840      	adds	r0, r0, r1
 800418a:	3030      	adds	r0, #48	; 0x30
 800418c:	7800      	ldrb	r0, [r0, #0]
}
 800418e:	4770      	bx	lr

08004190 <DAC_SetUserChannelValue>:
  */
__weak void DAC_SetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber,
                              int16_t hValue)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  pDacHandle->hUserValue[bUserChNumber] = hValue;
 8004190:	3118      	adds	r1, #24
 8004192:	0049      	lsls	r1, r1, #1
 8004194:	1841      	adds	r1, r0, r1
 8004196:	804a      	strh	r2, [r1, #2]
}
 8004198:	4770      	bx	lr

0800419a <DAC_GetUserChannelValue>:
  * @retval none.
  */
__weak int16_t DAC_GetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  return (pDacHandle->hUserValue[bUserChNumber]);
 800419a:	3118      	adds	r1, #24
 800419c:	0049      	lsls	r1, r1, #1
 800419e:	1840      	adds	r0, r0, r1
 80041a0:	2302      	movs	r3, #2
 80041a2:	5ec0      	ldrsh	r0, [r0, r3]
}
 80041a4:	4770      	bx	lr

080041a6 <FCP_Init>:
{
  pHandle->RxTimeoutCountdown = 0;

  pHandle->TxFrame.Code = 0x0;
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 80041a6:	0002      	movs	r2, r0
  pHandle->RxTimeoutCountdown = 0;
 80041a8:	2300      	movs	r3, #0
  pHandle->TxFrame.FrameCRC = 0;
 80041aa:	3296      	adds	r2, #150	; 0x96
  pHandle->RxTimeoutCountdown = 0;
 80041ac:	8243      	strh	r3, [r0, #18]
  pHandle->TxFrame.Code = 0x0;
 80041ae:	8283      	strh	r3, [r0, #20]
  pHandle->TxFrame.FrameCRC = 0;
 80041b0:	8013      	strh	r3, [r2, #0]
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;
 80041b2:	8053      	strh	r3, [r2, #2]

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 80041b4:	7113      	strb	r3, [r2, #4]
  pHandle->RxFrame.FrameCRC = 0;
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 80041b6:	30fe      	adds	r0, #254	; 0xfe
  pHandle->RxFrame.FrameCRC = 0;
 80041b8:	3269      	adds	r2, #105	; 0x69
 80041ba:	7713      	strb	r3, [r2, #28]
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 80041bc:	83c3      	strh	r3, [r0, #30]
  pHandle->RxFrameLevel = 0;
}
 80041be:	4770      	bx	lr

080041c0 <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 80041c0:	2800      	cmp	r0, #0
 80041c2:	d004      	beq.n	80041ce <FCP_SetClient+0xe>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 80041c4:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 80041c6:	9b00      	ldr	r3, [sp, #0]
    pHandle->ClientEntity = pClient;
 80041c8:	6001      	str	r1, [r0, #0]
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 80041ca:	6042      	str	r2, [r0, #4]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 80041cc:	60c3      	str	r3, [r0, #12]
  }
}
 80041ce:	4770      	bx	lr

080041d0 <FCP_CalcCRC>:
    pHandle->RxTimeout = Timeout;
  }
}

__weak uint8_t FCP_CalcCRC( FCP_Frame_t * pFrame )
{
 80041d0:	1e02      	subs	r2, r0, #0
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 80041d2:	d008      	beq.n	80041e6 <FCP_CalcCRC+0x16>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 80041d4:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 80041d6:	7803      	ldrb	r3, [r0, #0]
    nSum += pFrame->Size;
 80041d8:	185b      	adds	r3, r3, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 80041da:	1841      	adds	r1, r0, r1
 80041dc:	428a      	cmp	r2, r1
 80041de:	d103      	bne.n	80041e8 <FCP_CalcCRC+0x18>
    {
      nSum += pFrame->Buffer[idx];
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 80041e0:	0a18      	lsrs	r0, r3, #8
 80041e2:	1818      	adds	r0, r3, r0
 80041e4:	b2c0      	uxtb	r0, r0
  }

  return nCRC ;
}
 80041e6:	4770      	bx	lr
      nSum += pFrame->Buffer[idx];
 80041e8:	7890      	ldrb	r0, [r2, #2]
 80041ea:	3201      	adds	r2, #1
 80041ec:	181b      	adds	r3, r3, r0
 80041ee:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 80041f0:	e7f4      	b.n	80041dc <FCP_CalcCRC+0xc>
	...

080041f4 <HALL_Init_Electrical_Angle>:
*         initialized.
* @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component
* @retval none
*/
static void HALL_Init_Electrical_Angle( HALL_Handle_t * pHandle )
{
 80041f4:	0003      	movs	r3, r0
 80041f6:	b5f0      	push	{r4, r5, r6, r7, lr}

  if ( pHandle->SensorPlacement == DEGREES_120 )
 80041f8:	1c5e      	adds	r6, r3, #1
 80041fa:	7ff6      	ldrb	r6, [r6, #31]
  {
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80041fc:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80041fe:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8004200:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004202:	6c47      	ldr	r7, [r0, #68]	; 0x44
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004204:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8004206:	6b00      	ldr	r0, [r0, #48]	; 0x30
  if ( pHandle->SensorPlacement == DEGREES_120 )
 8004208:	2e00      	cmp	r6, #0
 800420a:	d11e      	bne.n	800424a <HALL_Init_Electrical_Angle+0x56>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800420c:	690e      	ldr	r6, [r1, #16]
 800420e:	6911      	ldr	r1, [r2, #16]
 8004210:	403e      	ands	r6, r7
 8004212:	6900      	ldr	r0, [r0, #16]
 8004214:	4021      	ands	r1, r4
 8004216:	1bf7      	subs	r7, r6, r7
 8004218:	1b09      	subs	r1, r1, r4
 800421a:	427a      	negs	r2, r7
 800421c:	4157      	adcs	r7, r2
 800421e:	424a      	negs	r2, r1
 8004220:	4151      	adcs	r1, r2
 8004222:	4028      	ands	r0, r5
 8004224:	1b40      	subs	r0, r0, r5
 8004226:	4242      	negs	r2, r0
 8004228:	4150      	adcs	r0, r2
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 800422a:	00bf      	lsls	r7, r7, #2
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 800422c:	0049      	lsls	r1, r1, #1
 800422e:	4339      	orrs	r1, r7
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004230:	4308      	orrs	r0, r1
 8004232:	001a      	movs	r2, r3
 8004234:	32a6      	adds	r2, #166	; 0xa6
 8004236:	7010      	strb	r0, [r2, #0]
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
  }

  switch ( pHandle->HallState )
 8004238:	3801      	subs	r0, #1
 800423a:	2805      	cmp	r0, #5
 800423c:	d82d      	bhi.n	800429a <HALL_Init_Electrical_Angle+0xa6>
 800423e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8004240:	f7fb ff6c 	bl	800011c <__gnu_thumb1_case_uqi>
 8004244:	29232521 	.word	0x29232521
 8004248:	2719      	.short	0x2719
 800424a:	6912      	ldr	r2, [r2, #16]
 800424c:	6909      	ldr	r1, [r1, #16]
 800424e:	6900      	ldr	r0, [r0, #16]
 8004250:	4039      	ands	r1, r7
 8004252:	4028      	ands	r0, r5
 8004254:	1bc9      	subs	r1, r1, r7
 8004256:	424e      	negs	r6, r1
 8004258:	4171      	adcs	r1, r6
 800425a:	1b40      	subs	r0, r0, r5
 800425c:	4245      	negs	r5, r0
 800425e:	4168      	adcs	r0, r5
 8004260:	4022      	ands	r2, r4
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 8004262:	0049      	lsls	r1, r1, #1
 8004264:	1b12      	subs	r2, r2, r4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004266:	4308      	orrs	r0, r1
 8004268:	4251      	negs	r1, r2
 800426a:	414a      	adcs	r2, r1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 800426c:	2104      	movs	r1, #4
 800426e:	0092      	lsls	r2, r2, #2
 8004270:	404a      	eors	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004272:	4310      	orrs	r0, r2
 8004274:	e7dd      	b.n	8004232 <HALL_Init_Electrical_Angle+0x3e>
  {
    case STATE_5:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 8004276:	490b      	ldr	r1, [pc, #44]	; (80042a4 <HALL_Init_Electrical_Angle+0xb0>)
      break;
    case STATE_1:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 8004278:	1852      	adds	r2, r2, r1
 800427a:	809a      	strh	r2, [r3, #4]
      pHandle->SensorIsReliable = false;
      break;
  }

  /* Initialize the measured angle */
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800427c:	001a      	movs	r2, r3
 800427e:	889b      	ldrh	r3, [r3, #4]
 8004280:	32aa      	adds	r2, #170	; 0xaa
 8004282:	8013      	strh	r3, [r2, #0]

}
 8004284:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 8004286:	4908      	ldr	r1, [pc, #32]	; (80042a8 <HALL_Init_Electrical_Angle+0xb4>)
 8004288:	e7f6      	b.n	8004278 <HALL_Init_Electrical_Angle+0x84>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 800428a:	4908      	ldr	r1, [pc, #32]	; (80042ac <HALL_Init_Electrical_Angle+0xb8>)
 800428c:	e7f4      	b.n	8004278 <HALL_Init_Electrical_Angle+0x84>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 800428e:	4908      	ldr	r1, [pc, #32]	; (80042b0 <HALL_Init_Electrical_Angle+0xbc>)
 8004290:	e7f2      	b.n	8004278 <HALL_Init_Electrical_Angle+0x84>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 8004292:	4908      	ldr	r1, [pc, #32]	; (80042b4 <HALL_Init_Electrical_Angle+0xc0>)
 8004294:	e7f0      	b.n	8004278 <HALL_Init_Electrical_Angle+0x84>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8004296:	4908      	ldr	r1, [pc, #32]	; (80042b8 <HALL_Init_Electrical_Angle+0xc4>)
 8004298:	e7ee      	b.n	8004278 <HALL_Init_Electrical_Angle+0x84>
      pHandle->SensorIsReliable = false;
 800429a:	001a      	movs	r2, r3
 800429c:	2100      	movs	r1, #0
 800429e:	3249      	adds	r2, #73	; 0x49
 80042a0:	7011      	strb	r1, [r2, #0]
      break;
 80042a2:	e7eb      	b.n	800427c <HALL_Init_Electrical_Angle+0x88>
 80042a4:	00001555 	.word	0x00001555
 80042a8:	00003fff 	.word	0x00003fff
 80042ac:	00006aaa 	.word	0x00006aaa
 80042b0:	ffff9556 	.word	0xffff9556
 80042b4:	ffffc001 	.word	0xffffc001
 80042b8:	ffffeaab 	.word	0xffffeaab

080042bc <HALL_Init>:
{
 80042bc:	b5f0      	push	{r4, r5, r6, r7, lr}
                                     pHandle->_Super.bElToMecRatio;
 80042be:	7842      	ldrb	r2, [r0, #1]
  hMaxReliableElSpeedUnit *= 2u;
 80042c0:	8a83      	ldrh	r3, [r0, #20]
{
 80042c2:	b085      	sub	sp, #20
  hMaxReliableElSpeedUnit *= 2u;
 80042c4:	4353      	muls	r3, r2
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	b29b      	uxth	r3, r3
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 80042ca:	8ac1      	ldrh	r1, [r0, #22]
  hMaxReliableElSpeedUnit *= 2u;
 80042cc:	9301      	str	r3, [sp, #4]
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 80042ce:	0003      	movs	r3, r0
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 80042d0:	4351      	muls	r1, r2
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 80042d2:	6a87      	ldr	r7, [r0, #40]	; 0x28
 80042d4:	33c2      	adds	r3, #194	; 0xc2
 80042d6:	0c3e      	lsrs	r6, r7, #16
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 80042d8:	b289      	uxth	r1, r1
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80042da:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
{
 80042dc:	0004      	movs	r4, r0
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 80042de:	801e      	strh	r6, [r3, #0]
    pHandle->HallTimeout = 150u;
 80042e0:	2096      	movs	r0, #150	; 0x96
  if ( hMinReliableElSpeedUnit == 0u )
 80042e2:	2903      	cmp	r1, #3
 80042e4:	d906      	bls.n	80042f4 <HALL_Init+0x38>
    pHandle->HallTimeout = 1000*SPEED_UNIT / ( 6u * hMinReliableElSpeedUnit );
 80042e6:	2306      	movs	r3, #6
 80042e8:	0889      	lsrs	r1, r1, #2
 80042ea:	4359      	muls	r1, r3
 80042ec:	4837      	ldr	r0, [pc, #220]	; (80043cc <HALL_Init+0x110>)
 80042ee:	f7fb ff33 	bl	8000158 <__udivsi3>
 80042f2:	b280      	uxth	r0, r0
 80042f4:	0023      	movs	r3, r4
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 80042f6:	21fa      	movs	r1, #250	; 0xfa
 80042f8:	33c0      	adds	r3, #192	; 0xc0
 80042fa:	8018      	strh	r0, [r3, #0]
 80042fc:	0089      	lsls	r1, r1, #2
 80042fe:	4370      	muls	r0, r6
 8004300:	f7fb ffb4 	bl	800026c <__divsi3>
 8004304:	0023      	movs	r3, r4
 8004306:	33ae      	adds	r3, #174	; 0xae
 8004308:	8018      	strh	r0, [r3, #0]
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 800430a:	b283      	uxth	r3, r0
 800430c:	9303      	str	r3, [sp, #12]
 800430e:	0023      	movs	r3, r4
  pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 8004310:	9a01      	ldr	r2, [sp, #4]
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 8004312:	33b8      	adds	r3, #184	; 0xb8
 8004314:	0400      	lsls	r0, r0, #16
 8004316:	6018      	str	r0, [r3, #0]
 8004318:	9302      	str	r3, [sp, #8]
  pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 800431a:	3b08      	subs	r3, #8
 800431c:	801a      	strh	r2, [r3, #0]
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 800431e:	2106      	movs	r1, #6
 8004320:	0038      	movs	r0, r7
 8004322:	f7fb ff19 	bl	8000158 <__udivsi3>
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 8004326:	8b63      	ldrh	r3, [r4, #26]
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8004328:	0007      	movs	r7, r0
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 800432a:	0019      	movs	r1, r3
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	f7fb ff13 	bl	8000158 <__udivsi3>
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8004332:	0026      	movs	r6, r4
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 8004334:	69e3      	ldr	r3, [r4, #28]
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8004336:	36b4      	adds	r6, #180	; 0xb4
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 8004338:	4358      	muls	r0, r3
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 800433a:	6030      	str	r0, [r6, #0]
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 800433c:	200a      	movs	r0, #10
                       / hMaxReliableElSpeedUnit);
 800433e:	9901      	ldr	r1, [sp, #4]
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8004340:	4378      	muls	r0, r7
                       / hMaxReliableElSpeedUnit);
 8004342:	f7fb ff09 	bl	8000158 <__udivsi3>
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8004346:	0023      	movs	r3, r4
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8004348:	60b0      	str	r0, [r6, #8]
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 800434a:	33c6      	adds	r3, #198	; 0xc6
 800434c:	7818      	ldrb	r0, [r3, #0]
 800434e:	9b00      	ldr	r3, [sp, #0]
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 8004350:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8004352:	4358      	muls	r0, r3
 8004354:	f7fb ff8a 	bl	800026c <__divsi3>
 8004358:	0023      	movs	r3, r4
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 800435a:	3801      	subs	r0, #1
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 800435c:	33c4      	adds	r3, #196	; 0xc4
  pHandle->SensorIsReliable = true;
 800435e:	0022      	movs	r2, r4
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8004360:	8018      	strh	r0, [r3, #0]
  pHandle->SensorIsReliable = true;
 8004362:	2301      	movs	r3, #1
  pHandle->HallStateCounter = 0;
 8004364:	2100      	movs	r1, #0
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8004366:	27f0      	movs	r7, #240	; 0xf0
  pHandle->SensorIsReliable = true;
 8004368:	3249      	adds	r2, #73	; 0x49
 800436a:	7013      	strb	r3, [r2, #0]
  pHandle->HallStateCounter = 0;
 800436c:	325e      	adds	r2, #94	; 0x5e
 800436e:	7011      	strb	r1, [r2, #0]
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter) << 20);
 8004370:	3a5f      	subs	r2, #95	; 0x5f
 8004372:	69a8      	ldr	r0, [r5, #24]
 8004374:	7812      	ldrb	r2, [r2, #0]
 8004376:	43b8      	bics	r0, r7
 8004378:	0112      	lsls	r2, r2, #4
 800437a:	4302      	orrs	r2, r0
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 800437c:	2004      	movs	r0, #4
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800437e:	61aa      	str	r2, [r5, #24]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004380:	9a03      	ldr	r2, [sp, #12]
  pHandle->HallStateCounter = 0;
 8004382:	1de6      	adds	r6, r4, #7
 8004384:	62aa      	str	r2, [r5, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004386:	696a      	ldr	r2, [r5, #20]
 8004388:	431a      	orrs	r2, r3
 800438a:	616a      	str	r2, [r5, #20]
  WRITE_REG (TIMx->SR, 0);
 800438c:	6129      	str	r1, [r5, #16]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 800438e:	682a      	ldr	r2, [r5, #0]
 8004390:	4302      	orrs	r2, r0
 8004392:	602a      	str	r2, [r5, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8004394:	2202      	movs	r2, #2
 8004396:	68e8      	ldr	r0, [r5, #12]
 8004398:	4302      	orrs	r2, r0
 800439a:	60ea      	str	r2, [r5, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800439c:	68ea      	ldr	r2, [r5, #12]
 800439e:	431a      	orrs	r2, r3
 80043a0:	60ea      	str	r2, [r5, #12]
  WRITE_REG(TIMx->CNT, Counter);
 80043a2:	6269      	str	r1, [r5, #36]	; 0x24
  SET_BIT(TIMx->CCER, Channels);
 80043a4:	6a2a      	ldr	r2, [r5, #32]
 80043a6:	431a      	orrs	r2, r3
 80043a8:	622a      	str	r2, [r5, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80043aa:	682a      	ldr	r2, [r5, #0]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	602b      	str	r3, [r5, #0]
  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 80043b0:	7ff3      	ldrb	r3, [r6, #31]
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	18e3      	adds	r3, r4, r3
 80043b6:	429c      	cmp	r4, r3
 80043b8:	d101      	bne.n	80043be <HALL_Init+0x102>
}
 80043ba:	b005      	add	sp, #20
 80043bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 80043be:	9a02      	ldr	r2, [sp, #8]
 80043c0:	3404      	adds	r4, #4
 80043c2:	6812      	ldr	r2, [r2, #0]
 80043c4:	64e2      	str	r2, [r4, #76]	; 0x4c
 80043c6:	9200      	str	r2, [sp, #0]
 80043c8:	e7f5      	b.n	80043b6 <HALL_Init+0xfa>
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	00002710 	.word	0x00002710

080043d0 <HALL_Clear>:
{
 80043d0:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 80043d2:	2402      	movs	r4, #2
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80043d4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  pHandle->RatioDec = false;
 80043d6:	0001      	movs	r1, r0
 80043d8:	68d3      	ldr	r3, [r2, #12]
  pHandle->SensorIsReliable = true;
 80043da:	0005      	movs	r5, r0
 80043dc:	43a3      	bics	r3, r4
 80043de:	60d3      	str	r3, [r2, #12]
  pHandle->RatioDec = false;
 80043e0:	2300      	movs	r3, #0
 80043e2:	314a      	adds	r1, #74	; 0x4a
 80043e4:	700b      	strb	r3, [r1, #0]
  pHandle->RatioInc = false;
 80043e6:	704b      	strb	r3, [r1, #1]
  pHandle->SensorIsReliable = true;
 80043e8:	2101      	movs	r1, #1
 80043ea:	3549      	adds	r5, #73	; 0x49
 80043ec:	7029      	strb	r1, [r5, #0]
  pHandle->HallStateCounter = 0;
 80043ee:	355e      	adds	r5, #94	; 0x5e
 80043f0:	702b      	strb	r3, [r5, #0]
  pHandle->FirstCapt = 0u;
 80043f2:	3d5b      	subs	r5, #91	; 0x5b
  pHandle->_Super.hMecAccelUnitP = 0;
 80043f4:	8243      	strh	r3, [r0, #18]
  pHandle->FirstCapt = 0u;
 80043f6:	702b      	strb	r3, [r5, #0]
  pHandle->BufferFilled = 0u;
 80043f8:	706b      	strb	r3, [r5, #1]
  pHandle->OVFCounter = 0u;
 80043fa:	70ab      	strb	r3, [r5, #2]
  pHandle->CompSpeed = 0;
 80043fc:	3560      	adds	r5, #96	; 0x60
 80043fe:	802b      	strh	r3, [r5, #0]
  pHandle->Direction = POSITIVE;
 8004400:	3d0a      	subs	r5, #10
 8004402:	7029      	strb	r1, [r5, #0]
  pHandle->SpeedFIFOIdx = 0u;
 8004404:	3d0a      	subs	r5, #10
 8004406:	702b      	strb	r3, [r5, #0]
  pHandle->_Super.bSpeedErrorNumber = 0;
 8004408:	7003      	strb	r3, [r0, #0]
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
 800440a:	3516      	adds	r5, #22
 800440c:	882d      	ldrh	r5, [r5, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800440e:	6295      	str	r5, [r2, #40]	; 0x28
  WRITE_REG(TIMx->CNT, Counter);
 8004410:	6253      	str	r3, [r2, #36]	; 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004412:	6813      	ldr	r3, [r2, #0]
 8004414:	4319      	orrs	r1, r3
 8004416:	6011      	str	r1, [r2, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8004418:	68d3      	ldr	r3, [r2, #12]
 800441a:	431c      	orrs	r4, r3
 800441c:	60d4      	str	r4, [r2, #12]
  HALL_Init_Electrical_Angle( pHandle );
 800441e:	f7ff fee9 	bl	80041f4 <HALL_Init_Electrical_Angle>
}
 8004422:	bd70      	pop	{r4, r5, r6, pc}

08004424 <HALL_CalcElAngle>:
{
 8004424:	b570      	push	{r4, r5, r6, lr}
 8004426:	0004      	movs	r4, r0
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8004428:	230e      	movs	r3, #14
 800442a:	5ec1      	ldrsh	r1, [r0, r3]
 800442c:	4a0c      	ldr	r2, [pc, #48]	; (8004460 <HALL_CalcElAngle+0x3c>)
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 800442e:	8883      	ldrh	r3, [r0, #4]
 8004430:	34a0      	adds	r4, #160	; 0xa0
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8004432:	4291      	cmp	r1, r2
 8004434:	d00f      	beq.n	8004456 <HALL_CalcElAngle+0x32>
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8004436:	0006      	movs	r6, r0
 8004438:	36aa      	adds	r6, #170	; 0xaa
 800443a:	8835      	ldrh	r5, [r6, #0]
 800443c:	b28a      	uxth	r2, r1
 800443e:	1955      	adds	r5, r2, r5
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8004440:	18d2      	adds	r2, r2, r3
 8004442:	0003      	movs	r3, r0
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8004444:	8035      	strh	r5, [r6, #0]
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8004446:	33ac      	adds	r3, #172	; 0xac
 8004448:	881b      	ldrh	r3, [r3, #0]
 800444a:	189a      	adds	r2, r3, r2
 800444c:	8082      	strh	r2, [r0, #4]
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 800444e:	8021      	strh	r1, [r4, #0]
  return pHandle->_Super.hElAngle;
 8004450:	2304      	movs	r3, #4
 8004452:	5ec0      	ldrsh	r0, [r0, r3]
}
 8004454:	bd70      	pop	{r4, r5, r6, pc}
    pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 8004456:	8822      	ldrh	r2, [r4, #0]
 8004458:	189b      	adds	r3, r3, r2
 800445a:	8083      	strh	r3, [r0, #4]
 800445c:	e7f8      	b.n	8004450 <HALL_CalcElAngle+0x2c>
 800445e:	46c0      	nop			; (mov r8, r8)
 8004460:	00007fff 	.word	0x00007fff

08004464 <HALL_CalcAvrgMecSpeedUnit>:
{
 8004464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ( pHandle->SensorIsReliable )
 8004466:	0003      	movs	r3, r0
 8004468:	3349      	adds	r3, #73	; 0x49
{
 800446a:	0004      	movs	r4, r0
  if ( pHandle->SensorIsReliable )
 800446c:	7818      	ldrb	r0, [r3, #0]
{
 800446e:	000d      	movs	r5, r1
  if ( pHandle->SensorIsReliable )
 8004470:	2800      	cmp	r0, #0
 8004472:	d043      	beq.n	80044fc <HALL_CalcAvrgMecSpeedUnit+0x98>
    if ( LL_TIM_GetPrescaler ( TIMx ) >= pHandle->HALLMaxRatio )
 8004474:	0022      	movs	r2, r4
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8004476:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if ( LL_TIM_GetPrescaler ( TIMx ) >= pHandle->HALLMaxRatio )
 8004478:	32ae      	adds	r2, #174	; 0xae
  return (uint32_t)(READ_REG(TIMx->PSC));
 800447a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447c:	8812      	ldrh	r2, [r2, #0]
 800447e:	429a      	cmp	r2, r3
 8004480:	d803      	bhi.n	800448a <HALL_CalcAvrgMecSpeedUnit+0x26>
      pHandle->_Super.hElSpeedDpp = 0;
 8004482:	2300      	movs	r3, #0
 8004484:	81e3      	strh	r3, [r4, #14]
          *hMecSpeedUnit = ( int16_t )pHandle->SatSpeed;
 8004486:	802b      	strh	r3, [r5, #0]
 8004488:	e007      	b.n	800449a <HALL_CalcAvrgMecSpeedUnit+0x36>
      pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 800448a:	0023      	movs	r3, r4
 800448c:	33a4      	adds	r3, #164	; 0xa4
 800448e:	2600      	movs	r6, #0
 8004490:	5f9e      	ldrsh	r6, [r3, r6]
 8004492:	81e6      	strh	r6, [r4, #14]
      if (  pHandle->AvrElSpeedDpp == 0 )
 8004494:	2e00      	cmp	r6, #0
 8004496:	d108      	bne.n	80044aa <HALL_CalcAvrgMecSpeedUnit+0x46>
        *hMecSpeedUnit = 0;
 8004498:	800e      	strh	r6, [r1, #0]
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, hMecSpeedUnit );
 800449a:	0029      	movs	r1, r5
 800449c:	0020      	movs	r0, r4
 800449e:	f001 f868 	bl	8005572 <SPD_IsMecSpeedReliable>
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 80044a2:	2200      	movs	r2, #0
 80044a4:	5eab      	ldrsh	r3, [r5, r2]
 80044a6:	81a3      	strh	r3, [r4, #12]
}
 80044a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (  pHandle->AvrElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 80044aa:	4b17      	ldr	r3, [pc, #92]	; (8004508 <HALL_CalcAvrgMecSpeedUnit+0xa4>)
 80044ac:	429e      	cmp	r6, r3
 80044ae:	d021      	beq.n	80044f4 <HALL_CalcAvrgMecSpeedUnit+0x90>
          if (pHandle->HallMtpa == true)
 80044b0:	0023      	movs	r3, r4
 80044b2:	0027      	movs	r7, r4
 80044b4:	33c7      	adds	r3, #199	; 0xc7
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	37ac      	adds	r7, #172	; 0xac
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00c      	beq.n	80044d8 <HALL_CalcAvrgMecSpeedUnit+0x74>
            pHandle->CompSpeed = 0;
 80044be:	2300      	movs	r3, #0
 80044c0:	803b      	strh	r3, [r7, #0]
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 80044c2:	8b60      	ldrh	r0, [r4, #26]
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 80044c4:	69e3      	ldr	r3, [r4, #28]
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 80044c6:	4346      	muls	r6, r0
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 80044c8:	200a      	movs	r0, #10
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 80044ca:	7861      	ldrb	r1, [r4, #1]
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 80044cc:	4370      	muls	r0, r6
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 80044ce:	4359      	muls	r1, r3
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 80044d0:	f7fb fecc 	bl	800026c <__divsi3>
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 80044d4:	8028      	strh	r0, [r5, #0]
 80044d6:	e7e0      	b.n	800449a <HALL_CalcAvrgMecSpeedUnit+0x36>
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 80044d8:	0023      	movs	r3, r4
 80044da:	33aa      	adds	r3, #170	; 0xaa
 80044dc:	8818      	ldrh	r0, [r3, #0]
 80044de:	88a3      	ldrh	r3, [r4, #4]
 80044e0:	1ac0      	subs	r0, r0, r3
 80044e2:	0023      	movs	r3, r4
 80044e4:	b200      	sxth	r0, r0
 80044e6:	33a8      	adds	r3, #168	; 0xa8
              ( int32_t )( pHandle->PWMNbrPSamplingFreq ) );
 80044e8:	8b99      	ldrh	r1, [r3, #28]
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 80044ea:	8018      	strh	r0, [r3, #0]
            ( ( int32_t )( pHandle->DeltaAngle ) /
 80044ec:	f7fb febe 	bl	800026c <__divsi3>
            pHandle->CompSpeed = ( int16_t )
 80044f0:	8038      	strh	r0, [r7, #0]
 80044f2:	e7e6      	b.n	80044c2 <HALL_CalcAvrgMecSpeedUnit+0x5e>
          *hMecSpeedUnit = ( int16_t )pHandle->SatSpeed;
 80044f4:	0023      	movs	r3, r4
 80044f6:	33b0      	adds	r3, #176	; 0xb0
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	e7c4      	b.n	8004486 <HALL_CalcAvrgMecSpeedUnit+0x22>
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80044fc:	78e3      	ldrb	r3, [r4, #3]
    pHandle->_Super.hElSpeedDpp = 0;
 80044fe:	81e0      	strh	r0, [r4, #14]
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8004500:	7023      	strb	r3, [r4, #0]
    *hMecSpeedUnit = 0;
 8004502:	8008      	strh	r0, [r1, #0]
 8004504:	e7cd      	b.n	80044a2 <HALL_CalcAvrgMecSpeedUnit+0x3e>
 8004506:	46c0      	nop			; (mov r8, r8)
 8004508:	00007fff 	.word	0x00007fff

0800450c <HALL_TIMx_CC_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 800450c:	0003      	movs	r3, r0
{
 800450e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if ( pHandle->SensorIsReliable )
 8004510:	3349      	adds	r3, #73	; 0x49
 8004512:	781b      	ldrb	r3, [r3, #0]
{
 8004514:	0004      	movs	r4, r0
  if ( pHandle->SensorIsReliable )
 8004516:	2b00      	cmp	r3, #0
 8004518:	d100      	bne.n	800451c <HALL_TIMx_CC_IRQHandler+0x10>
 800451a:	e080      	b.n	800461e <HALL_TIMx_CC_IRQHandler+0x112>
    PrevDirection = pHandle->Direction;
 800451c:	0002      	movs	r2, r0
    bPrevHallState = pHandle->HallState;
 800451e:	0003      	movs	r3, r0
    PrevDirection = pHandle->Direction;
 8004520:	32a2      	adds	r2, #162	; 0xa2
 8004522:	7812      	ldrb	r2, [r2, #0]
    bPrevHallState = pHandle->HallState;
 8004524:	33a6      	adds	r3, #166	; 0xa6
    PrevDirection = pHandle->Direction;
 8004526:	b252      	sxtb	r2, r2
    bPrevHallState = pHandle->HallState;
 8004528:	781b      	ldrb	r3, [r3, #0]
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 800452a:	6b87      	ldr	r7, [r0, #56]	; 0x38
    PrevDirection = pHandle->Direction;
 800452c:	9201      	str	r2, [sp, #4]
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 800452e:	6c06      	ldr	r6, [r0, #64]	; 0x40
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 8004530:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8004532:	6c41      	ldr	r1, [r0, #68]	; 0x44
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 8004534:	6b00      	ldr	r0, [r0, #48]	; 0x30
    if ( pHandle->SensorPlacement == DEGREES_120 )
 8004536:	1c65      	adds	r5, r4, #1
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 8004538:	9000      	str	r0, [sp, #0]
    if ( pHandle->SensorPlacement == DEGREES_120 )
 800453a:	7fed      	ldrb	r5, [r5, #31]
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 800453c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    if ( pHandle->SensorPlacement == DEGREES_120 )
 800453e:	2d00      	cmp	r5, #0
 8004540:	d121      	bne.n	8004586 <HALL_TIMx_CC_IRQHandler+0x7a>
 8004542:	6936      	ldr	r6, [r6, #16]
 8004544:	693f      	ldr	r7, [r7, #16]
 8004546:	400e      	ands	r6, r1
 8004548:	4017      	ands	r7, r2
 800454a:	1a71      	subs	r1, r6, r1
 800454c:	1aba      	subs	r2, r7, r2
 800454e:	424e      	negs	r6, r1
 8004550:	4171      	adcs	r1, r6
 8004552:	4256      	negs	r6, r2
 8004554:	4172      	adcs	r2, r6
 8004556:	9d00      	ldr	r5, [sp, #0]
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8004558:	0089      	lsls	r1, r1, #2
 800455a:	692d      	ldr	r5, [r5, #16]
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 800455c:	0052      	lsls	r2, r2, #1
 800455e:	4005      	ands	r5, r0
 8004560:	1a28      	subs	r0, r5, r0
 8004562:	430a      	orrs	r2, r1
 8004564:	4241      	negs	r1, r0
 8004566:	4148      	adcs	r0, r1
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 8004568:	4310      	orrs	r0, r2
 800456a:	0022      	movs	r2, r4
 800456c:	32a6      	adds	r2, #166	; 0xa6
  TIM_TypeDef * TIMx = pHandle->TIMx;
 800456e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004570:	7010      	strb	r0, [r2, #0]
    switch ( pHandle->HallState )
 8004572:	3801      	subs	r0, #1
 8004574:	3a04      	subs	r2, #4
 8004576:	2805      	cmp	r0, #5
 8004578:	d900      	bls.n	800457c <HALL_TIMx_CC_IRQHandler+0x70>
 800457a:	e0b0      	b.n	80046de <HALL_TIMx_CC_IRQHandler+0x1d2>
 800457c:	f7fb fdce 	bl	800011c <__gnu_thumb1_case_uqi>
 8004580:	9c727f5f 	.word	0x9c727f5f
 8004584:	8d19      	.short	0x8d19
 8004586:	9d00      	ldr	r5, [sp, #0]
 8004588:	693f      	ldr	r7, [r7, #16]
 800458a:	6936      	ldr	r6, [r6, #16]
 800458c:	692d      	ldr	r5, [r5, #16]
 800458e:	400e      	ands	r6, r1
 8004590:	4005      	ands	r5, r0
 8004592:	1a71      	subs	r1, r6, r1
 8004594:	424e      	negs	r6, r1
 8004596:	4171      	adcs	r1, r6
 8004598:	1a28      	subs	r0, r5, r0
 800459a:	4245      	negs	r5, r0
 800459c:	4168      	adcs	r0, r5
 800459e:	4017      	ands	r7, r2
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 80045a0:	0049      	lsls	r1, r1, #1
 80045a2:	1aba      	subs	r2, r7, r2
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 80045a4:	4308      	orrs	r0, r1
 80045a6:	4251      	negs	r1, r2
 80045a8:	414a      	adcs	r2, r1
 80045aa:	2704      	movs	r7, #4
 80045ac:	0092      	lsls	r2, r2, #2
 80045ae:	407a      	eors	r2, r7
 80045b0:	e7da      	b.n	8004568 <HALL_TIMx_CC_IRQHandler+0x5c>
        if ( bPrevHallState == STATE_4 )
 80045b2:	2b04      	cmp	r3, #4
 80045b4:	d135      	bne.n	8004622 <HALL_TIMx_CC_IRQHandler+0x116>
          pHandle->Direction = POSITIVE;
 80045b6:	3b03      	subs	r3, #3
 80045b8:	7013      	strb	r3, [r2, #0]
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 80045ba:	0023      	movs	r3, r4
 80045bc:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 80045be:	33aa      	adds	r3, #170	; 0xaa
 80045c0:	8019      	strh	r1, [r3, #0]
          pHandle->HallStateCounter++;
 80045c2:	0021      	movs	r1, r4
 80045c4:	31a7      	adds	r1, #167	; 0xa7
          pHandle->HallStateCounter++;
 80045c6:	780b      	ldrb	r3, [r1, #0]
 80045c8:	3301      	adds	r3, #1
          pHandle->HallStateCounter--;
 80045ca:	700b      	strb	r3, [r1, #0]
    if(pHandle->Direction == POSITIVE && pHandle->HallStateCounter == 48 )
 80045cc:	2500      	movs	r5, #0
 80045ce:	5755      	ldrsb	r5, [r2, r5]
 80045d0:	2d01      	cmp	r5, #1
 80045d2:	d000      	beq.n	80045d6 <HALL_TIMx_CC_IRQHandler+0xca>
 80045d4:	e088      	b.n	80046e8 <HALL_TIMx_CC_IRQHandler+0x1dc>
 80045d6:	0023      	movs	r3, r4
 80045d8:	33a7      	adds	r3, #167	; 0xa7
 80045da:	781a      	ldrb	r2, [r3, #0]
 80045dc:	2a30      	cmp	r2, #48	; 0x30
 80045de:	d101      	bne.n	80045e4 <HALL_TIMx_CC_IRQHandler+0xd8>
  	  i=0;
 80045e0:	2200      	movs	r2, #0
 80045e2:	701a      	strb	r2, [r3, #0]
    if (pHandle->Direction != PrevDirection)
 80045e4:	9b01      	ldr	r3, [sp, #4]
 80045e6:	429d      	cmp	r5, r3
 80045e8:	d005      	beq.n	80045f6 <HALL_TIMx_CC_IRQHandler+0xea>
      pHandle->BufferFilled = 0 ;
 80045ea:	0023      	movs	r3, r4
 80045ec:	2200      	movs	r2, #0
 80045ee:	334d      	adds	r3, #77	; 0x4d
 80045f0:	701a      	strb	r2, [r3, #0]
      pHandle->SpeedFIFOIdx = 0;
 80045f2:	334b      	adds	r3, #75	; 0x4b
 80045f4:	701a      	strb	r2, [r3, #0]
    if (pHandle->HallMtpa == true)
 80045f6:	0023      	movs	r3, r4
 80045f8:	33c7      	adds	r3, #199	; 0xc7
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <HALL_TIMx_CC_IRQHandler+0xfc>
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 8004600:	0023      	movs	r3, r4
 8004602:	33aa      	adds	r3, #170	; 0xaa
 8004604:	881b      	ldrh	r3, [r3, #0]
 8004606:	80a3      	strh	r3, [r4, #4]
    if ( pHandle->FirstCapt == 0u )
 8004608:	0022      	movs	r2, r4
 800460a:	324c      	adds	r2, #76	; 0x4c
 800460c:	7813      	ldrb	r3, [r2, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d000      	beq.n	8004614 <HALL_TIMx_CC_IRQHandler+0x108>
 8004612:	e078      	b.n	8004706 <HALL_TIMx_CC_IRQHandler+0x1fa>
      pHandle->FirstCapt++;
 8004614:	7813      	ldrb	r3, [r2, #0]
 8004616:	3301      	adds	r3, #1
 8004618:	b2db      	uxtb	r3, r3
 800461a:	7013      	strb	r3, [r2, #0]
  return (uint32_t)(READ_REG(TIMx->CCR1));
 800461c:	6b73      	ldr	r3, [r6, #52]	; 0x34
}
 800461e:	2000      	movs	r0, #0
 8004620:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        else if ( bPrevHallState == STATE_1 )
 8004622:	2b01      	cmp	r3, #1
 8004624:	d1d2      	bne.n	80045cc <HALL_TIMx_CC_IRQHandler+0xc0>
          pHandle->Direction = NEGATIVE;
 8004626:	33fe      	adds	r3, #254	; 0xfe
 8004628:	7013      	strb	r3, [r2, #0]
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 800462a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800462c:	4985      	ldr	r1, [pc, #532]	; (8004844 <HALL_TIMx_CC_IRQHandler+0x338>)
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 800462e:	185b      	adds	r3, r3, r1
 8004630:	0021      	movs	r1, r4
 8004632:	31aa      	adds	r1, #170	; 0xaa
 8004634:	800b      	strh	r3, [r1, #0]
          pHandle->HallStateCounter--;
 8004636:	3903      	subs	r1, #3
          pHandle->HallStateCounter--;
 8004638:	780b      	ldrb	r3, [r1, #0]
 800463a:	3b01      	subs	r3, #1
 800463c:	e7c5      	b.n	80045ca <HALL_TIMx_CC_IRQHandler+0xbe>
        if ( bPrevHallState == STATE_5 )
 800463e:	2b05      	cmp	r3, #5
 8004640:	d109      	bne.n	8004656 <HALL_TIMx_CC_IRQHandler+0x14a>
          pHandle->Direction = POSITIVE;
 8004642:	3b04      	subs	r3, #4
 8004644:	7013      	strb	r3, [r2, #0]
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8004646:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8004648:	497e      	ldr	r1, [pc, #504]	; (8004844 <HALL_TIMx_CC_IRQHandler+0x338>)
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 800464a:	185b      	adds	r3, r3, r1
 800464c:	0021      	movs	r1, r4
 800464e:	31aa      	adds	r1, #170	; 0xaa
 8004650:	800b      	strh	r3, [r1, #0]
          pHandle->HallStateCounter++;
 8004652:	3903      	subs	r1, #3
 8004654:	e7b7      	b.n	80045c6 <HALL_TIMx_CC_IRQHandler+0xba>
        else if ( bPrevHallState == STATE_3 )
 8004656:	2b03      	cmp	r3, #3
 8004658:	d1b8      	bne.n	80045cc <HALL_TIMx_CC_IRQHandler+0xc0>
          pHandle->Direction = NEGATIVE;
 800465a:	33fc      	adds	r3, #252	; 0xfc
 800465c:	7013      	strb	r3, [r2, #0]
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 800465e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8004660:	4979      	ldr	r1, [pc, #484]	; (8004848 <HALL_TIMx_CC_IRQHandler+0x33c>)
 8004662:	e7e4      	b.n	800462e <HALL_TIMx_CC_IRQHandler+0x122>
        if ( bPrevHallState == STATE_1 )
 8004664:	2b01      	cmp	r3, #1
 8004666:	d103      	bne.n	8004670 <HALL_TIMx_CC_IRQHandler+0x164>
          pHandle->Direction = POSITIVE;
 8004668:	7013      	strb	r3, [r2, #0]
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 800466a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800466c:	4976      	ldr	r1, [pc, #472]	; (8004848 <HALL_TIMx_CC_IRQHandler+0x33c>)
 800466e:	e7ec      	b.n	800464a <HALL_TIMx_CC_IRQHandler+0x13e>
        else if ( bPrevHallState == STATE_2 )
 8004670:	2b02      	cmp	r3, #2
 8004672:	d1ab      	bne.n	80045cc <HALL_TIMx_CC_IRQHandler+0xc0>
          pHandle->Direction = NEGATIVE;
 8004674:	33fd      	adds	r3, #253	; 0xfd
 8004676:	7013      	strb	r3, [r2, #0]
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8004678:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800467a:	4974      	ldr	r1, [pc, #464]	; (800484c <HALL_TIMx_CC_IRQHandler+0x340>)
 800467c:	e7d7      	b.n	800462e <HALL_TIMx_CC_IRQHandler+0x122>
        if ( bPrevHallState == STATE_3 )
 800467e:	2b03      	cmp	r3, #3
 8004680:	d104      	bne.n	800468c <HALL_TIMx_CC_IRQHandler+0x180>
          pHandle->Direction = POSITIVE;
 8004682:	3b02      	subs	r3, #2
 8004684:	7013      	strb	r3, [r2, #0]
                                                  + S16_60_PHASE_SHIFT );
 8004686:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8004688:	4970      	ldr	r1, [pc, #448]	; (800484c <HALL_TIMx_CC_IRQHandler+0x340>)
 800468a:	e7de      	b.n	800464a <HALL_TIMx_CC_IRQHandler+0x13e>
        else if ( bPrevHallState == STATE_6 )
 800468c:	2b06      	cmp	r3, #6
 800468e:	d19d      	bne.n	80045cc <HALL_TIMx_CC_IRQHandler+0xc0>
          pHandle->Direction = NEGATIVE;
 8004690:	33f9      	adds	r3, #249	; 0xf9
 8004692:	7013      	strb	r3, [r2, #0]
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8004694:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8004696:	496e      	ldr	r1, [pc, #440]	; (8004850 <HALL_TIMx_CC_IRQHandler+0x344>)
 8004698:	e7c9      	b.n	800462e <HALL_TIMx_CC_IRQHandler+0x122>
        if ( bPrevHallState == STATE_2 )
 800469a:	2b02      	cmp	r3, #2
 800469c:	d104      	bne.n	80046a8 <HALL_TIMx_CC_IRQHandler+0x19c>
          pHandle->Direction = POSITIVE;
 800469e:	3b01      	subs	r3, #1
 80046a0:	7013      	strb	r3, [r2, #0]
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80046a2:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80046a4:	496a      	ldr	r1, [pc, #424]	; (8004850 <HALL_TIMx_CC_IRQHandler+0x344>)
 80046a6:	e7d0      	b.n	800464a <HALL_TIMx_CC_IRQHandler+0x13e>
        else if ( bPrevHallState == STATE_4 )
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d000      	beq.n	80046ae <HALL_TIMx_CC_IRQHandler+0x1a2>
 80046ac:	e78e      	b.n	80045cc <HALL_TIMx_CC_IRQHandler+0xc0>
          pHandle->Direction = NEGATIVE;
 80046ae:	33fb      	adds	r3, #251	; 0xfb
 80046b0:	7013      	strb	r3, [r2, #0]
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 80046b2:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80046b4:	4967      	ldr	r1, [pc, #412]	; (8004854 <HALL_TIMx_CC_IRQHandler+0x348>)
 80046b6:	e7ba      	b.n	800462e <HALL_TIMx_CC_IRQHandler+0x122>
        if ( bPrevHallState == STATE_6 )
 80046b8:	2b06      	cmp	r3, #6
 80046ba:	d104      	bne.n	80046c6 <HALL_TIMx_CC_IRQHandler+0x1ba>
          pHandle->Direction = POSITIVE;
 80046bc:	3b05      	subs	r3, #5
 80046be:	7013      	strb	r3, [r2, #0]
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 80046c0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80046c2:	4964      	ldr	r1, [pc, #400]	; (8004854 <HALL_TIMx_CC_IRQHandler+0x348>)
 80046c4:	e7c1      	b.n	800464a <HALL_TIMx_CC_IRQHandler+0x13e>
        else if ( bPrevHallState == STATE_5 )
 80046c6:	2b05      	cmp	r3, #5
 80046c8:	d000      	beq.n	80046cc <HALL_TIMx_CC_IRQHandler+0x1c0>
 80046ca:	e77f      	b.n	80045cc <HALL_TIMx_CC_IRQHandler+0xc0>
          pHandle->Direction = NEGATIVE;
 80046cc:	33fa      	adds	r3, #250	; 0xfa
 80046ce:	7013      	strb	r3, [r2, #0]
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 80046d0:	0023      	movs	r3, r4
 80046d2:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 80046d4:	33aa      	adds	r3, #170	; 0xaa
 80046d6:	8019      	strh	r1, [r3, #0]
          pHandle->HallStateCounter--;
 80046d8:	0021      	movs	r1, r4
 80046da:	31a7      	adds	r1, #167	; 0xa7
 80046dc:	e7ac      	b.n	8004638 <HALL_TIMx_CC_IRQHandler+0x12c>
        pHandle->SensorIsReliable = false;
 80046de:	0023      	movs	r3, r4
 80046e0:	2100      	movs	r1, #0
 80046e2:	3349      	adds	r3, #73	; 0x49
 80046e4:	7019      	strb	r1, [r3, #0]
        break;
 80046e6:	e771      	b.n	80045cc <HALL_TIMx_CC_IRQHandler+0xc0>
    else if(pHandle->Direction == NEGATIVE && (pHandle->HallStateCounter == 0 || pHandle->HallStateCounter == 255))
 80046e8:	1c6b      	adds	r3, r5, #1
 80046ea:	d000      	beq.n	80046ee <HALL_TIMx_CC_IRQHandler+0x1e2>
 80046ec:	e77a      	b.n	80045e4 <HALL_TIMx_CC_IRQHandler+0xd8>
 80046ee:	0022      	movs	r2, r4
 80046f0:	32a7      	adds	r2, #167	; 0xa7
 80046f2:	7813      	ldrb	r3, [r2, #0]
 80046f4:	3b01      	subs	r3, #1
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2bfd      	cmp	r3, #253	; 0xfd
 80046fa:	d800      	bhi.n	80046fe <HALL_TIMx_CC_IRQHandler+0x1f2>
 80046fc:	e772      	b.n	80045e4 <HALL_TIMx_CC_IRQHandler+0xd8>
  	  pHandle->HallStateCounter = 47;
 80046fe:	232f      	movs	r3, #47	; 0x2f
 8004700:	7013      	strb	r3, [r2, #0]
  	  i=0;
 8004702:	4b55      	ldr	r3, [pc, #340]	; (8004858 <HALL_TIMx_CC_IRQHandler+0x34c>)
 8004704:	e76c      	b.n	80045e0 <HALL_TIMx_CC_IRQHandler+0xd4>
      if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 8004706:	0022      	movs	r2, r4
 8004708:	1de1      	adds	r1, r4, #7
 800470a:	324d      	adds	r2, #77	; 0x4d
 800470c:	7813      	ldrb	r3, [r2, #0]
 800470e:	7fc9      	ldrb	r1, [r1, #31]
 8004710:	428b      	cmp	r3, r1
 8004712:	d203      	bcs.n	800471c <HALL_TIMx_CC_IRQHandler+0x210>
        pHandle->BufferFilled++;
 8004714:	7813      	ldrb	r3, [r2, #0]
 8004716:	3301      	adds	r3, #1
 8004718:	b2db      	uxtb	r3, r3
 800471a:	7013      	strb	r3, [r2, #0]
 800471c:	6b73      	ldr	r3, [r6, #52]	; 0x34
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 800471e:	4668      	mov	r0, sp
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	234e      	movs	r3, #78	; 0x4e
 8004724:	469c      	mov	ip, r3
 8004726:	44a4      	add	ip, r4
 8004728:	4663      	mov	r3, ip
  return (uint32_t)(READ_REG(TIMx->PSC));
 800472a:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	8800      	ldrh	r0, [r0, #0]
 8004730:	041b      	lsls	r3, r3, #16
 8004732:	18c0      	adds	r0, r0, r3
      if ( pHandle->OVFCounter != 0u )
 8004734:	4663      	mov	r3, ip
 8004736:	781b      	ldrb	r3, [r3, #0]
      hPrscBuf =  LL_TIM_GetPrescaler ( TIMx );
 8004738:	b292      	uxth	r2, r2
      if ( pHandle->OVFCounter != 0u )
 800473a:	b2df      	uxtb	r7, r3
 800473c:	2b00      	cmp	r3, #0
 800473e:	d04e      	beq.n	80047de <HALL_TIMx_CC_IRQHandler+0x2d2>
        hAux = hPrscBuf + 1u;
 8004740:	3201      	adds	r2, #1
        wCaptBuf *= hAux;
 8004742:	b293      	uxth	r3, r2
        if ( pHandle->RatioInc )
 8004744:	0022      	movs	r2, r4
 8004746:	324b      	adds	r2, #75	; 0x4b
        wCaptBuf *= hAux;
 8004748:	4343      	muls	r3, r0
        if ( pHandle->RatioInc )
 800474a:	7810      	ldrb	r0, [r2, #0]
 800474c:	2800      	cmp	r0, #0
 800474e:	d03b      	beq.n	80047c8 <HALL_TIMx_CC_IRQHandler+0x2bc>
          pHandle->RatioInc = false;  /* Previous capture caused overflow */
 8004750:	2000      	movs	r0, #0
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 8004752:	7010      	strb	r0, [r2, #0]
        if ( wCaptBuf < pHandle->MinPeriod )
 8004754:	0022      	movs	r2, r4
 8004756:	32bc      	adds	r2, #188	; 0xbc
 8004758:	6812      	ldr	r2, [r2, #0]
 800475a:	429a      	cmp	r2, r3
 800475c:	d830      	bhi.n	80047c0 <HALL_TIMx_CC_IRQHandler+0x2b4>
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 800475e:	2298      	movs	r2, #152	; 0x98
 8004760:	4694      	mov	ip, r2
 8004762:	44a4      	add	ip, r4
 8004764:	4662      	mov	r2, ip
 8004766:	0020      	movs	r0, r4
 8004768:	7812      	ldrb	r2, [r2, #0]
 800476a:	309c      	adds	r0, #156	; 0x9c
 800476c:	0096      	lsls	r6, r2, #2
 800476e:	19a6      	adds	r6, r4, r6
 8004770:	6d37      	ldr	r7, [r6, #80]	; 0x50
 8004772:	9200      	str	r2, [sp, #0]
 8004774:	6802      	ldr	r2, [r0, #0]
 8004776:	1bd2      	subs	r2, r2, r7
          if ( wCaptBuf >= pHandle->MaxPeriod )
 8004778:	0027      	movs	r7, r4
 800477a:	37b8      	adds	r7, #184	; 0xb8
 800477c:	683f      	ldr	r7, [r7, #0]
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 800477e:	6002      	str	r2, [r0, #0]
          if ( wCaptBuf >= pHandle->MaxPeriod )
 8004780:	429f      	cmp	r7, r3
 8004782:	d84c      	bhi.n	800481e <HALL_TIMx_CC_IRQHandler+0x312>
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] = pHandle->MaxPeriod*pHandle->Direction; 
 8004784:	436f      	muls	r7, r5
 8004786:	6537      	str	r7, [r6, #80]	; 0x50
          pHandle->SpeedFIFOIdx++;
 8004788:	9a00      	ldr	r2, [sp, #0]
 800478a:	3201      	adds	r2, #1
 800478c:	b2d2      	uxtb	r2, r2
          if ( pHandle->SpeedFIFOIdx == pHandle->SpeedBufferSize )
 800478e:	4291      	cmp	r1, r2
 8004790:	d04b      	beq.n	800482a <HALL_TIMx_CC_IRQHandler+0x31e>
            pHandle->SpeedFIFOIdx = 0u;
 8004792:	4666      	mov	r6, ip
 8004794:	7032      	strb	r2, [r6, #0]
          if ( pHandle->SensorIsReliable) 
 8004796:	0022      	movs	r2, r4
 8004798:	0026      	movs	r6, r4
 800479a:	3249      	adds	r2, #73	; 0x49
 800479c:	7812      	ldrb	r2, [r2, #0]
 800479e:	36a4      	adds	r6, #164	; 0xa4
 80047a0:	2a00      	cmp	r2, #0
 80047a2:	d04d      	beq.n	8004840 <HALL_TIMx_CC_IRQHandler+0x334>
            if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 80047a4:	0022      	movs	r2, r4
              pHandle->AvrElSpeedDpp = ( int16_t ) (( pHandle->PseudoFreqConv / wCaptBuf )*pHandle->Direction);
 80047a6:	0027      	movs	r7, r4
            if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 80047a8:	324d      	adds	r2, #77	; 0x4d
 80047aa:	7812      	ldrb	r2, [r2, #0]
              pHandle->AvrElSpeedDpp = ( int16_t ) (( pHandle->PseudoFreqConv / wCaptBuf )*pHandle->Direction);
 80047ac:	37b4      	adds	r7, #180	; 0xb4
 80047ae:	683f      	ldr	r7, [r7, #0]
            if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 80047b0:	4291      	cmp	r1, r2
 80047b2:	d93c      	bls.n	800482e <HALL_TIMx_CC_IRQHandler+0x322>
              pHandle->AvrElSpeedDpp = ( int16_t ) (( pHandle->PseudoFreqConv / wCaptBuf )*pHandle->Direction);
 80047b4:	0019      	movs	r1, r3
 80047b6:	0038      	movs	r0, r7
 80047b8:	f7fb fcce 	bl	8000158 <__udivsi3>
 80047bc:	4345      	muls	r5, r0
 80047be:	8035      	strh	r5, [r6, #0]
      pHandle->OVFCounter = 0u;
 80047c0:	2300      	movs	r3, #0
 80047c2:	344e      	adds	r4, #78	; 0x4e
 80047c4:	7023      	strb	r3, [r4, #0]
 80047c6:	e72a      	b.n	800461e <HALL_TIMx_CC_IRQHandler+0x112>
          if ( LL_TIM_GetPrescaler ( TIMx ) < pHandle->HALLMaxRatio ) /* Avoid OVF w/ very low freq */
 80047c8:	0027      	movs	r7, r4
 80047ca:	37ae      	adds	r7, #174	; 0xae
 80047cc:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 80047ce:	883f      	ldrh	r7, [r7, #0]
 80047d0:	4287      	cmp	r7, r0
 80047d2:	d9bf      	bls.n	8004754 <HALL_TIMx_CC_IRQHandler+0x248>
 80047d4:	6ab0      	ldr	r0, [r6, #40]	; 0x28
            LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) + 1 ); /* To avoid OVF during speed decrease */
 80047d6:	3001      	adds	r0, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 80047d8:	62b0      	str	r0, [r6, #40]	; 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 80047da:	2001      	movs	r0, #1
 80047dc:	e7b9      	b.n	8004752 <HALL_TIMx_CC_IRQHandler+0x246>
        if ( pHandle->RatioDec ) /* and don't decrease it again */
 80047de:	234a      	movs	r3, #74	; 0x4a
 80047e0:	469c      	mov	ip, r3
 80047e2:	44a4      	add	ip, r4
 80047e4:	4663      	mov	r3, ip
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <HALL_TIMx_CC_IRQHandler+0x2ec>
          hAux = hPrscBuf + 2u;
 80047ec:	3202      	adds	r2, #2
          wCaptBuf *= hAux;
 80047ee:	b293      	uxth	r3, r2
 80047f0:	4343      	muls	r3, r0
          pHandle->RatioDec = false;
 80047f2:	4662      	mov	r2, ip
 80047f4:	0038      	movs	r0, r7
 80047f6:	e7ac      	b.n	8004752 <HALL_TIMx_CC_IRQHandler+0x246>
          uint16_t hAux = hPrscBuf + 1u;
 80047f8:	3201      	adds	r2, #1
          wCaptBuf *= hAux;
 80047fa:	b293      	uxth	r3, r2
 80047fc:	4343      	muls	r3, r0
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 80047fe:	4668      	mov	r0, sp
 8004800:	22aa      	movs	r2, #170	; 0xaa
 8004802:	8807      	ldrh	r7, [r0, #0]
 8004804:	01d2      	lsls	r2, r2, #7
 8004806:	4297      	cmp	r7, r2
 8004808:	d2a4      	bcs.n	8004754 <HALL_TIMx_CC_IRQHandler+0x248>
  return (uint32_t)(READ_REG(TIMx->PSC));
 800480a:	6ab2      	ldr	r2, [r6, #40]	; 0x28
            if ( LL_TIM_GetPrescaler ( TIMx ) > 0u ) /* or prescaler cannot be further reduced */
 800480c:	2a00      	cmp	r2, #0
 800480e:	d0a1      	beq.n	8004754 <HALL_TIMx_CC_IRQHandler+0x248>
 8004810:	6ab2      	ldr	r2, [r6, #40]	; 0x28
              pHandle->RatioDec = true;
 8004812:	4660      	mov	r0, ip
              LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) - 1 ); /* Increase accuracy by decreasing prsc */
 8004814:	3a01      	subs	r2, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 8004816:	62b2      	str	r2, [r6, #40]	; 0x28
              pHandle->RatioDec = true;
 8004818:	2201      	movs	r2, #1
 800481a:	7002      	strb	r2, [r0, #0]
 800481c:	e79a      	b.n	8004754 <HALL_TIMx_CC_IRQHandler+0x248>
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 800481e:	002f      	movs	r7, r5
 8004820:	435f      	muls	r7, r3
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 8004822:	19d2      	adds	r2, r2, r7
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 8004824:	6537      	str	r7, [r6, #80]	; 0x50
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 8004826:	6002      	str	r2, [r0, #0]
 8004828:	e7ae      	b.n	8004788 <HALL_TIMx_CC_IRQHandler+0x27c>
            pHandle->SpeedFIFOIdx = 0u;
 800482a:	2200      	movs	r2, #0
 800482c:	e7b1      	b.n	8004792 <HALL_TIMx_CC_IRQHandler+0x286>
              pHandle->AvrElSpeedDpp = ( int16_t )((int32_t) pHandle->PseudoFreqConv / ( pHandle->ElPeriodSum / pHandle->SpeedBufferSize )); /* Average value */
 800482e:	6800      	ldr	r0, [r0, #0]
 8004830:	f7fb fd1c 	bl	800026c <__divsi3>
 8004834:	0001      	movs	r1, r0
 8004836:	0038      	movs	r0, r7
 8004838:	f7fb fd18 	bl	800026c <__divsi3>
 800483c:	8030      	strh	r0, [r6, #0]
 800483e:	e7bf      	b.n	80047c0 <HALL_TIMx_CC_IRQHandler+0x2b4>
            pHandle->AvrElSpeedDpp = 0;
 8004840:	8032      	strh	r2, [r6, #0]
 8004842:	e7bd      	b.n	80047c0 <HALL_TIMx_CC_IRQHandler+0x2b4>
 8004844:	00002aaa 	.word	0x00002aaa
 8004848:	00005555 	.word	0x00005555
 800484c:	00007fff 	.word	0x00007fff
 8004850:	ffffaaab 	.word	0xffffaaab
 8004854:	ffffd556 	.word	0xffffd556
 8004858:	20000ab0 	.word	0x20000ab0

0800485c <HALL_TIMx_UP_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 800485c:	0003      	movs	r3, r0
{
 800485e:	b570      	push	{r4, r5, r6, lr}
  if ( pHandle->SensorIsReliable )
 8004860:	3349      	adds	r3, #73	; 0x49
 8004862:	781b      	ldrb	r3, [r3, #0]
{
 8004864:	0004      	movs	r4, r0
  if ( pHandle->SensorIsReliable )
 8004866:	2b00      	cmp	r3, #0
 8004868:	d036      	beq.n	80048d8 <HALL_TIMx_UP_IRQHandler+0x7c>
    pHandle->OVFCounter++;
 800486a:	0005      	movs	r5, r0
 800486c:	354e      	adds	r5, #78	; 0x4e
 800486e:	782b      	ldrb	r3, [r5, #0]
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8004870:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    pHandle->OVFCounter++;
 8004872:	3301      	adds	r3, #1
 8004874:	b2db      	uxtb	r3, r3
 8004876:	702b      	strb	r3, [r5, #0]
  return (uint32_t)(READ_REG(TIMx->PSC));
 8004878:	6a91      	ldr	r1, [r2, #40]	; 0x28
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 800487a:	0003      	movs	r3, r0
 800487c:	0002      	movs	r2, r0
 800487e:	33c0      	adds	r3, #192	; 0xc0
 8004880:	32c2      	adds	r2, #194	; 0xc2
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	8810      	ldrh	r0, [r2, #0]
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 8004886:	782e      	ldrb	r6, [r5, #0]
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 8004888:	4358      	muls	r0, r3
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 800488a:	1c4b      	adds	r3, r1, #1
 800488c:	21fa      	movs	r1, #250	; 0xfa
 800488e:	0089      	lsls	r1, r1, #2
 8004890:	4359      	muls	r1, r3
 8004892:	f7fb fc61 	bl	8000158 <__udivsi3>
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 8004896:	b2f6      	uxtb	r6, r6
 8004898:	b280      	uxth	r0, r0
 800489a:	4286      	cmp	r6, r0
 800489c:	d31c      	bcc.n	80048d8 <HALL_TIMx_UP_IRQHandler+0x7c>
      pHandle->_Super.hElSpeedDpp = 0;
 800489e:	2600      	movs	r6, #0
      HALL_Init_Electrical_Angle( pHandle );
 80048a0:	0020      	movs	r0, r4
      pHandle->_Super.hElSpeedDpp = 0;
 80048a2:	81e6      	strh	r6, [r4, #14]
      HALL_Init_Electrical_Angle( pHandle );
 80048a4:	f7ff fca6 	bl	80041f4 <HALL_Init_Electrical_Angle>
      pHandle->FirstCapt = 0u;
 80048a8:	0023      	movs	r3, r4
 80048aa:	0022      	movs	r2, r4
 80048ac:	334c      	adds	r3, #76	; 0x4c
      pHandle->OVFCounter = 0u;
 80048ae:	702e      	strb	r6, [r5, #0]
      pHandle->FirstCapt = 0u;
 80048b0:	701e      	strb	r6, [r3, #0]
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 80048b2:	1de3      	adds	r3, r4, #7
 80048b4:	7fdb      	ldrb	r3, [r3, #31]
        pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 80048b6:	356a      	adds	r5, #106	; 0x6a
 80048b8:	0099      	lsls	r1, r3, #2
 80048ba:	1909      	adds	r1, r1, r4
 80048bc:	6828      	ldr	r0, [r5, #0]
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 80048be:	428a      	cmp	r2, r1
 80048c0:	d10c      	bne.n	80048dc <HALL_TIMx_UP_IRQHandler+0x80>
      pHandle->BufferFilled = 0 ;
 80048c2:	0021      	movs	r1, r4
 80048c4:	2200      	movs	r2, #0
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 80048c6:	4343      	muls	r3, r0
      pHandle->BufferFilled = 0 ;
 80048c8:	314d      	adds	r1, #77	; 0x4d
 80048ca:	700a      	strb	r2, [r1, #0]
      pHandle->AvrElSpeedDpp = 0;
 80048cc:	3157      	adds	r1, #87	; 0x57
 80048ce:	800a      	strh	r2, [r1, #0]
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 80048d0:	349c      	adds	r4, #156	; 0x9c
      pHandle->SpeedFIFOIdx = 0;
 80048d2:	390c      	subs	r1, #12
 80048d4:	700a      	strb	r2, [r1, #0]
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 80048d6:	6023      	str	r3, [r4, #0]
}
 80048d8:	2000      	movs	r0, #0
 80048da:	bd70      	pop	{r4, r5, r6, pc}
        pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 80048dc:	6510      	str	r0, [r2, #80]	; 0x50
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 80048de:	3204      	adds	r2, #4
 80048e0:	e7ec      	b.n	80048bc <HALL_TIMx_UP_IRQHandler+0x60>

080048e2 <MPM_Clear>:
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
 80048e2:	2280      	movs	r2, #128	; 0x80
{
 80048e4:	b510      	push	{r4, lr}
    pHandle->hMeasBuffer[i] = 0;
 80048e6:	2100      	movs	r1, #0
{
 80048e8:	0004      	movs	r4, r0
    pHandle->hMeasBuffer[i] = 0;
 80048ea:	0052      	lsls	r2, r2, #1
 80048ec:	f001 f935 	bl	8005b5a <memset>
  }
  pHandle->hNextMeasBufferIndex = 0u;
 80048f0:	2300      	movs	r3, #0
 80048f2:	34fe      	adds	r4, #254	; 0xfe
 80048f4:	8063      	strh	r3, [r4, #2]
  pHandle->hLastMeasBufferIndex = 0u;
 80048f6:	80a3      	strh	r3, [r4, #4]

}
 80048f8:	bd10      	pop	{r4, pc}

080048fa <MPM_CalcElMotorPower>:
  *         motor power.
  * @param pHandle pointer on the related component instance.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak int16_t MPM_CalcElMotorPower( MotorPowMeas_Handle_t * pHandle, int16_t CurrentMotorPower )
{
 80048fa:	0003      	movs	r3, r0
 80048fc:	b570      	push	{r4, r5, r6, lr}
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 80048fe:	001c      	movs	r4, r3
{
 8004900:	0008      	movs	r0, r1
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8004902:	34fe      	adds	r4, #254	; 0xfe
 8004904:	8862      	ldrh	r2, [r4, #2]
 8004906:	0051      	lsls	r1, r2, #1
 8004908:	52c8      	strh	r0, [r1, r3]
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 800490a:	80a2      	strh	r2, [r4, #4]
  pHandle->hNextMeasBufferIndex++;
 800490c:	3201      	adds	r2, #1
 800490e:	b292      	uxth	r2, r2
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8004910:	2a7f      	cmp	r2, #127	; 0x7f
 8004912:	d810      	bhi.n	8004936 <MPM_CalcElMotorPower+0x3c>
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8004914:	8062      	strh	r2, [r4, #2]
  int32_t wAux = 0;
 8004916:	2200      	movs	r2, #0
 8004918:	1c59      	adds	r1, r3, #1
 800491a:	31ff      	adds	r1, #255	; 0xff
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 800491c:	2600      	movs	r6, #0
 800491e:	5f9d      	ldrsh	r5, [r3, r6]
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8004920:	3302      	adds	r3, #2
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8004922:	1952      	adds	r2, r2, r5
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8004924:	428b      	cmp	r3, r1
 8004926:	d1f9      	bne.n	800491c <MPM_CalcElMotorPower+0x22>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8004928:	217f      	movs	r1, #127	; 0x7f
 800492a:	17d3      	asrs	r3, r2, #31
 800492c:	400b      	ands	r3, r1
 800492e:	189b      	adds	r3, r3, r2
 8004930:	11db      	asrs	r3, r3, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8004932:	80e3      	strh	r3, [r4, #6]
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8004934:	bd70      	pop	{r4, r5, r6, pc}
    pHandle->hNextMeasBufferIndex = 0u;
 8004936:	2200      	movs	r2, #0
 8004938:	e7ec      	b.n	8004914 <MPM_CalcElMotorPower+0x1a>

0800493a <MPM_GetAvrgElMotorPowerW>:
  * @param pHandle pointer on the related component instance.
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
 800493a:	30fe      	adds	r0, #254	; 0xfe
 800493c:	2306      	movs	r3, #6
 800493e:	5ec0      	ldrsh	r0, [r0, r3]
}
 8004940:	4770      	bx	lr

08004942 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8004942:	8a02      	ldrh	r2, [r0, #16]
 8004944:	8b41      	ldrh	r1, [r0, #26]
{
 8004946:	0003      	movs	r3, r0
  {
    hFault = MC_OVER_TEMP;
 8004948:	2008      	movs	r0, #8
  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 800494a:	4291      	cmp	r1, r2
 800494c:	d304      	bcc.n	8004958 <NTC_SetFaultState+0x16>
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 800494e:	8b99      	ldrh	r1, [r3, #28]
  {
    hFault = MC_NO_ERROR;
 8004950:	2000      	movs	r0, #0
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8004952:	4291      	cmp	r1, r2
 8004954:	d800      	bhi.n	8004958 <NTC_SetFaultState+0x16>
  }
  else
  {
    hFault = pHandle->hFaultState;
 8004956:	8ad8      	ldrh	r0, [r3, #22]
  }
  return hFault;
}
 8004958:	4770      	bx	lr

0800495a <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 800495a:	2300      	movs	r3, #0
 800495c:	8203      	strh	r3, [r0, #16]
}
 800495e:	4770      	bx	lr

08004960 <NTC_Init>:
  if ( pHandle->bSensorType == REAL_SENSOR )
 8004960:	7803      	ldrb	r3, [r0, #0]
{
 8004962:	b510      	push	{r4, lr}
 8004964:	0004      	movs	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8004966:	2b00      	cmp	r3, #0
 8004968:	d108      	bne.n	800497c <NTC_Init+0x1c>
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 800496a:	3004      	adds	r0, #4
 800496c:	f7fc ffd2 	bl	8001914 <RCM_RegisterRegConv>
 8004970:	1de3      	adds	r3, r4, #7
 8004972:	77d8      	strb	r0, [r3, #31]
    NTC_Clear( pHandle );
 8004974:	0020      	movs	r0, r4
 8004976:	f7ff fff0 	bl	800495a <NTC_Clear>
}
 800497a:	bd10      	pop	{r4, pc}
    pHandle->hFaultState = MC_NO_ERROR;
 800497c:	2300      	movs	r3, #0
 800497e:	82c3      	strh	r3, [r0, #22]
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8004980:	8a43      	ldrh	r3, [r0, #18]
 8004982:	8203      	strh	r3, [r0, #16]
}
 8004984:	e7f9      	b.n	800497a <NTC_Init+0x1a>
	...

08004988 <NTC_CalcAvTemp>:
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8004988:	7803      	ldrb	r3, [r0, #0]
{
 800498a:	b510      	push	{r4, lr}
 800498c:	0004      	movs	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 800498e:	2b00      	cmp	r3, #0
 8004990:	d114      	bne.n	80049bc <NTC_CalcAvTemp+0x34>
  {
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8004992:	1dc3      	adds	r3, r0, #7
 8004994:	7fd8      	ldrb	r0, [r3, #31]
 8004996:	f7fd f805 	bl	80019a4 <RCM_ExecRegularConv>

    if ( hAux != 0xFFFFu )
 800499a:	4b0a      	ldr	r3, [pc, #40]	; (80049c4 <NTC_CalcAvTemp+0x3c>)
 800499c:	4298      	cmp	r0, r3
 800499e:	d007      	beq.n	80049b0 <NTC_CalcAvTemp+0x28>
    {
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 80049a0:	8b21      	ldrh	r1, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 80049a2:	8a22      	ldrh	r2, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 80049a4:	1e4b      	subs	r3, r1, #1
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 80049a6:	4353      	muls	r3, r2
      wtemp += hAux;
 80049a8:	18c0      	adds	r0, r0, r3
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 80049aa:	f7fb fbd5 	bl	8000158 <__udivsi3>

      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 80049ae:	8220      	strh	r0, [r4, #16]
    }

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 80049b0:	0020      	movs	r0, r4
 80049b2:	f7ff ffc6 	bl	8004942 <NTC_SetFaultState>
 80049b6:	82e0      	strh	r0, [r4, #22]
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
  }

  return ( pHandle->hFaultState );
 80049b8:	8ae0      	ldrh	r0, [r4, #22]
}
 80049ba:	bd10      	pop	{r4, pc}
    pHandle->hFaultState = MC_NO_ERROR;
 80049bc:	2300      	movs	r3, #0
 80049be:	82c3      	strh	r3, [r0, #22]
 80049c0:	e7fa      	b.n	80049b8 <NTC_CalcAvTemp+0x30>
 80049c2:	46c0      	nop			; (mov r8, r8)
 80049c4:	0000ffff 	.word	0x0000ffff

080049c8 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 80049c8:	7803      	ldrb	r3, [r0, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10d      	bne.n	80049ea <NTC_GetAvTemp_C+0x22>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
    wTemp -= ( int32_t )( pHandle->wV0 );
 80049ce:	6a02      	ldr	r2, [r0, #32]
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 80049d0:	8a03      	ldrh	r3, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 80049d2:	1a9b      	subs	r3, r3, r2
    wTemp *= pHandle->hSensitivity;
 80049d4:	221e      	movs	r2, #30
 80049d6:	5e81      	ldrsh	r1, [r0, r2]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 80049d8:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp *= pHandle->hSensitivity;
 80049da:	4359      	muls	r1, r3
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 80049dc:	17cb      	asrs	r3, r1, #31
 80049de:	b29b      	uxth	r3, r3
 80049e0:	185b      	adds	r3, r3, r1
 80049e2:	141b      	asrs	r3, r3, #16
 80049e4:	18c0      	adds	r0, r0, r3
  }
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
 80049e6:	b200      	sxth	r0, r0
}
 80049e8:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 80049ea:	8a80      	ldrh	r0, [r0, #20]
 80049ec:	e7fb      	b.n	80049e6 <NTC_GetAvTemp_C+0x1e>

080049ee <PID_HandleInit>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval None
 */
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
 80049ee:	6803      	ldr	r3, [r0, #0]
 80049f0:	6043      	str	r3, [r0, #4]
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
 80049f2:	8c03      	ldrh	r3, [r0, #32]
 80049f4:	8443      	strh	r3, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 80049f6:	2300      	movs	r3, #0
 80049f8:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 80049fa:	6283      	str	r3, [r0, #40]	; 0x28
}
 80049fc:	4770      	bx	lr

080049fe <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 80049fe:	8081      	strh	r1, [r0, #4]
}
 8004a00:	4770      	bx	lr

08004a02 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8004a02:	80c1      	strh	r1, [r0, #6]
}
 8004a04:	4770      	bx	lr

08004a06 <PID_GetKP>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
 8004a06:	2304      	movs	r3, #4
 8004a08:	5ec0      	ldrsh	r0, [r0, r3]
}
 8004a0a:	4770      	bx	lr

08004a0c <PID_GetKI>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
 8004a0c:	2306      	movs	r3, #6
 8004a0e:	5ec0      	ldrsh	r0, [r0, r3]
}
 8004a10:	4770      	bx	lr

08004a12 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8004a12:	6081      	str	r1, [r0, #8]

  return;
}
 8004a14:	4770      	bx	lr

08004a16 <PID_GetKPDivisor>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
 8004a16:	8b00      	ldrh	r0, [r0, #24]
}
 8004a18:	4770      	bx	lr

08004a1a <PID_GetKIDivisor>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
 8004a1a:	8b40      	ldrh	r0, [r0, #26]
}
 8004a1c:	4770      	bx	lr

08004a1e <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8004a1e:	8441      	strh	r1, [r0, #34]	; 0x22
}
 8004a20:	4770      	bx	lr

08004a22 <PID_GetKD>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
 8004a22:	2322      	movs	r3, #34	; 0x22
 8004a24:	5ec0      	ldrsh	r0, [r0, r3]
}
 8004a26:	4770      	bx	lr

08004a28 <PI_Controller>:
 * @param  wProcessVarError: current process variable error, intended as the reference
 *         value minus the present process variable value
 * @retval computed PI output
 */
__weak int16_t PI_Controller( PID_Handle_t * pHandle, int32_t wProcessVarError )
{
 8004a28:	b570      	push	{r4, r5, r6, lr}
  int32_t wProportional_Term, wIntegral_Term, wOutput_32, wIntegral_sum_temp;
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8004a2a:	2314      	movs	r3, #20
 8004a2c:	5ec5      	ldrsh	r5, [r0, r3]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8004a2e:	2316      	movs	r3, #22
 8004a30:	5ec4      	ldrsh	r4, [r0, r3]

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8004a32:	2204      	movs	r2, #4
 8004a34:	5e83      	ldrsh	r3, [r0, r2]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8004a36:	2606      	movs	r6, #6
 8004a38:	5f82      	ldrsh	r2, [r0, r6]
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8004a3a:	434b      	muls	r3, r1
  if ( pHandle->hKiGain == 0 )
 8004a3c:	2a00      	cmp	r2, #0
 8004a3e:	d101      	bne.n	8004a44 <PI_Controller+0x1c>
    {
      pHandle->wIntegralTerm = pHandle->wLowerIntegralLimit;
    }
    else
    {
      pHandle->wIntegralTerm = wIntegral_sum_temp;
 8004a40:	6082      	str	r2, [r0, #8]
 8004a42:	e00c      	b.n	8004a5e <PI_Controller+0x36>
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8004a44:	4351      	muls	r1, r2
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8004a46:	6886      	ldr	r6, [r0, #8]
    if ( wIntegral_sum_temp < 0 )
 8004a48:	1872      	adds	r2, r6, r1
 8004a4a:	d517      	bpl.n	8004a7c <PI_Controller+0x54>
      if ( pHandle->wIntegralTerm > 0 )
 8004a4c:	2e00      	cmp	r6, #0
 8004a4e:	dd02      	ble.n	8004a56 <PI_Controller+0x2e>
        if ( wIntegral_Term > 0 )
 8004a50:	2900      	cmp	r1, #0
 8004a52:	dd00      	ble.n	8004a56 <PI_Controller+0x2e>
          wIntegral_sum_temp = INT32_MAX;
 8004a54:	4a11      	ldr	r2, [pc, #68]	; (8004a9c <PI_Controller+0x74>)
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8004a56:	68c1      	ldr	r1, [r0, #12]
 8004a58:	4291      	cmp	r1, r2
 8004a5a:	da15      	bge.n	8004a88 <PI_Controller+0x60>
      pHandle->wIntegralTerm = pHandle->wLowerIntegralLimit;
 8004a5c:	6081      	str	r1, [r0, #8]
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8004a5e:	6882      	ldr	r2, [r0, #8]
 8004a60:	8b81      	ldrh	r1, [r0, #28]
 8004a62:	0016      	movs	r6, r2
 8004a64:	410b      	asrs	r3, r1
 8004a66:	8bc1      	ldrh	r1, [r0, #30]
 8004a68:	410e      	asrs	r6, r1
 8004a6a:	199b      	adds	r3, r3, r6
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8004a6c:	429d      	cmp	r5, r3
 8004a6e:	da0f      	bge.n	8004a90 <PI_Controller+0x68>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 8004a70:	1ae9      	subs	r1, r5, r3
    wOutput_32 = hUpperOutputLimit;
 8004a72:	002b      	movs	r3, r5
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8004a74:	1852      	adds	r2, r2, r1
 8004a76:	6082      	str	r2, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
 8004a78:	b218      	sxth	r0, r3
}
 8004a7a:	bd70      	pop	{r4, r5, r6, pc}
      if ( pHandle->wIntegralTerm < 0 )
 8004a7c:	2e00      	cmp	r6, #0
 8004a7e:	daea      	bge.n	8004a56 <PI_Controller+0x2e>
        if ( wIntegral_Term < 0 )
 8004a80:	2900      	cmp	r1, #0
 8004a82:	dae8      	bge.n	8004a56 <PI_Controller+0x2e>
          wIntegral_sum_temp = -INT32_MAX;
 8004a84:	4a06      	ldr	r2, [pc, #24]	; (8004aa0 <PI_Controller+0x78>)
 8004a86:	e7e6      	b.n	8004a56 <PI_Controller+0x2e>
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8004a88:	6901      	ldr	r1, [r0, #16]
 8004a8a:	4291      	cmp	r1, r2
 8004a8c:	ddd8      	ble.n	8004a40 <PI_Controller+0x18>
 8004a8e:	e7e5      	b.n	8004a5c <PI_Controller+0x34>
  int32_t wDischarge = 0;
 8004a90:	2100      	movs	r1, #0
  else if ( wOutput_32 < hLowerOutputLimit )
 8004a92:	429c      	cmp	r4, r3
 8004a94:	ddee      	ble.n	8004a74 <PI_Controller+0x4c>
    wDischarge = hLowerOutputLimit - wOutput_32;
 8004a96:	1ae1      	subs	r1, r4, r3
    wOutput_32 = hLowerOutputLimit;
 8004a98:	0023      	movs	r3, r4
 8004a9a:	e7eb      	b.n	8004a74 <PI_Controller+0x4c>
 8004a9c:	7fffffff 	.word	0x7fffffff
 8004aa0:	80000001 	.word	0x80000001

08004aa4 <PQD_CalcElMotorPower>:
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 8004aa4:	0002      	movs	r2, r0
{
 8004aa6:	b570      	push	{r4, r5, r6, lr}
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 8004aa8:	32fc      	adds	r2, #252	; 0xfc
 8004aaa:	6913      	ldr	r3, [r2, #16]
{
 8004aac:	0005      	movs	r5, r0
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8004aae:	210c      	movs	r1, #12
 8004ab0:	5e5e      	ldrsh	r6, [r3, r1]
 8004ab2:	2116      	movs	r1, #22
 8004ab4:	5e5c      	ldrsh	r4, [r3, r1]
 8004ab6:	4374      	muls	r4, r6
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8004ab8:	210e      	movs	r1, #14
 8004aba:	5e5e      	ldrsh	r6, [r3, r1]
 8004abc:	2018      	movs	r0, #24
 8004abe:	5e18      	ldrsh	r0, [r3, r0]
 8004ac0:	4346      	muls	r6, r0
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8004ac2:	6950      	ldr	r0, [r2, #20]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8004ac4:	19a6      	adds	r6, r4, r6
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8004ac6:	68d4      	ldr	r4, [r2, #12]
 8004ac8:	f7ff fb2a 	bl	8004120 <VBS_GetAvBusVoltage_V>
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8004acc:	2196      	movs	r1, #150	; 0x96
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8004ace:	4360      	muls	r0, r4
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8004ad0:	0089      	lsls	r1, r1, #2
 8004ad2:	f7fb fbcb 	bl	800026c <__divsi3>
  wAux /= 65536;
 8004ad6:	17f4      	asrs	r4, r6, #31
 8004ad8:	b2a4      	uxth	r4, r4
 8004ada:	19a4      	adds	r4, r4, r6
 8004adc:	1424      	asrs	r4, r4, #16

  wAux3 = wAux * wAux2;
 8004ade:	4344      	muls	r4, r0
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8004ae0:	21a0      	movs	r1, #160	; 0xa0
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8004ae2:	2006      	movs	r0, #6
  wAux3 /= 65536;
 8004ae4:	0309      	lsls	r1, r1, #12
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8004ae6:	4360      	muls	r0, r4
  wAux3 /= 65536;
 8004ae8:	f7fb fbc0 	bl	800026c <__divsi3>

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8004aec:	b201      	sxth	r1, r0
 8004aee:	0028      	movs	r0, r5
 8004af0:	f7ff ff03 	bl	80048fa <MPM_CalcElMotorPower>

}
 8004af4:	bd70      	pop	{r4, r5, r6, pc}

08004af6 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 8004af6:	b5f0      	push	{r4, r5, r6, r7, lr}
  counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
 8004af8:	6805      	ldr	r5, [r0, #0]
 8004afa:	2460      	movs	r4, #96	; 0x60
 8004afc:	002e      	movs	r6, r5
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 8004afe:	3201      	adds	r2, #1
 8004b00:	4026      	ands	r6, r4
  if (counter_mode == 0U)
 8004b02:	4225      	tst	r5, r4
 8004b04:	d102      	bne.n	8004b0c <waitForPolarizationEnd+0x16>
    counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8004b06:	6804      	ldr	r4, [r0, #0]
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8004b08:	0852      	lsrs	r2, r2, #1
 8004b0a:	e001      	b.n	8004b10 <waitForPolarizationEnd+0x1a>
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 8004b0c:	2e60      	cmp	r6, #96	; 0x60
 8004b0e:	d1fb      	bne.n	8004b08 <waitForPolarizationEnd+0x12>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8004b10:	2503      	movs	r5, #3
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 8004b12:	2400      	movs	r4, #0
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8004b14:	2702      	movs	r7, #2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8004b16:	426d      	negs	r5, r5
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8004b18:	0152      	lsls	r2, r2, #5
 8004b1a:	6105      	str	r5, [r0, #16]
  while (*cnt < NB_CONVERSIONS)
 8004b1c:	781e      	ldrb	r6, [r3, #0]
 8004b1e:	2e0f      	cmp	r6, #15
 8004b20:	d80c      	bhi.n	8004b3c <waitForPolarizationEnd+0x46>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8004b22:	6906      	ldr	r6, [r0, #16]
 8004b24:	423e      	tst	r6, r7
 8004b26:	d0f9      	beq.n	8004b1c <waitForPolarizationEnd+0x26>
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 8004b28:	3401      	adds	r4, #1
 8004b2a:	b2a4      	uxth	r4, r4
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8004b2c:	6105      	str	r5, [r0, #16]
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8004b2e:	42a2      	cmp	r2, r4
 8004b30:	d8f4      	bhi.n	8004b1c <waitForPolarizationEnd+0x26>
      {
        if (*cnt < NB_CONVERSIONS)
 8004b32:	781e      	ldrb	r6, [r3, #0]
 8004b34:	2e0f      	cmp	r6, #15
 8004b36:	d8f1      	bhi.n	8004b1c <waitForPolarizationEnd+0x26>
        {
          *SWerror = 1u;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 8004b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b3e <PWMC_GetPhaseCurrents>:
  * @param  pHandle handle on the target PWMC component
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
 8004b3e:	b510      	push	{r4, lr}
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8004b40:	6843      	ldr	r3, [r0, #4]
 8004b42:	4798      	blx	r3
}
 8004b44:	bd10      	pop	{r4, pc}

08004b46 <PWMC_SetPhaseVoltage>:
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8004b46:	0003      	movs	r3, r0
{
 8004b48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b4a:	000d      	movs	r5, r1
 8004b4c:	0002      	movs	r2, r0
 8004b4e:	9101      	str	r1, [sp, #4]
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8004b50:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 8004b52:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8004b54:	3350      	adds	r3, #80	; 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8004b56:	434e      	muls	r6, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8004b58:	8819      	ldrh	r1, [r3, #0]
 8004b5a:	142d      	asrs	r5, r5, #16
 8004b5c:	434d      	muls	r5, r1
 8004b5e:	006d      	lsls	r5, r5, #1
 8004b60:	426f      	negs	r7, r5

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 8004b62:	1b75      	subs	r5, r6, r5
 8004b64:	0feb      	lsrs	r3, r5, #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8004b66:	1bbe      	subs	r6, r7, r6
  wY = ( wUBeta + wUAlpha ) / 2;
 8004b68:	195b      	adds	r3, r3, r5
 8004b6a:	105b      	asrs	r3, r3, #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8004b6c:	0ff4      	lsrs	r4, r6, #31
  wY = ( wUBeta + wUAlpha ) / 2;
 8004b6e:	9300      	str	r3, [sp, #0]
  wZ = ( wUBeta - wUAlpha ) / 2;
 8004b70:	19a4      	adds	r4, r4, r6
 8004b72:	1c83      	adds	r3, r0, #2
 8004b74:	469c      	mov	ip, r3
 8004b76:	1064      	asrs	r4, r4, #1
  if ( wY < 0 )
  {
    if ( wZ < 0 )
    {
      pHandle->Sector = SECTOR_5;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004b78:	0889      	lsrs	r1, r1, #2
 8004b7a:	323a      	adds	r2, #58	; 0x3a
  if ( wY < 0 )
 8004b7c:	1c6b      	adds	r3, r5, #1
 8004b7e:	db00      	blt.n	8004b82 <PWMC_SetPhaseVoltage+0x3c>
 8004b80:	e083      	b.n	8004c8a <PWMC_SetPhaseVoltage+0x144>
    if ( wZ < 0 )
 8004b82:	1c73      	adds	r3, r6, #1
 8004b84:	da1a      	bge.n	8004bbc <PWMC_SetPhaseVoltage+0x76>
      pHandle->Sector = SECTOR_5;
 8004b86:	2704      	movs	r7, #4
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004b88:	9b00      	ldr	r3, [sp, #0]
      pHandle->Sector = SECTOR_5;
 8004b8a:	7017      	strb	r7, [r2, #0]
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004b8c:	1b1b      	subs	r3, r3, r4
 8004b8e:	17da      	asrs	r2, r3, #31
 8004b90:	0392      	lsls	r2, r2, #14
 8004b92:	0b94      	lsrs	r4, r2, #14
 8004b94:	18e4      	adds	r4, r4, r3
      wTimePhB = wTimePhA + wZ / 131072;
      wTimePhC = wTimePhA - wY / 131072;
 8004b96:	17eb      	asrs	r3, r5, #31
      wTimePhB = wTimePhA + wZ / 131072;
 8004b98:	17f2      	asrs	r2, r6, #31
      wTimePhC = wTimePhA - wY / 131072;
 8004b9a:	039b      	lsls	r3, r3, #14
      wTimePhB = wTimePhA + wZ / 131072;
 8004b9c:	0392      	lsls	r2, r2, #14
      wTimePhC = wTimePhA - wY / 131072;
 8004b9e:	0b9b      	lsrs	r3, r3, #14
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004ba0:	14a4      	asrs	r4, r4, #18
      wTimePhB = wTimePhA + wZ / 131072;
 8004ba2:	0b92      	lsrs	r2, r2, #14
      wTimePhC = wTimePhA - wY / 131072;
 8004ba4:	195b      	adds	r3, r3, r5
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004ba6:	1861      	adds	r1, r4, r1
      wTimePhB = wTimePhA + wZ / 131072;
 8004ba8:	1992      	adds	r2, r2, r6
      wTimePhC = wTimePhA - wY / 131072;
 8004baa:	149b      	asrs	r3, r3, #18
      wTimePhB = wTimePhA + wZ / 131072;
 8004bac:	1492      	asrs	r2, r2, #18
      wTimePhC = wTimePhA - wY / 131072;
 8004bae:	1acb      	subs	r3, r1, r3
      wTimePhB = wTimePhA + wZ / 131072;
 8004bb0:	1852      	adds	r2, r2, r1
      pHandle->lowDuty = wTimePhC;
 8004bb2:	8783      	strh	r3, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8004bb4:	87c1      	strh	r1, [r0, #62]	; 0x3e
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
        wTimePhC = wTimePhA - wY / 131072;
        wTimePhB = wTimePhC + wX / 131072;
        pHandle->lowDuty = wTimePhA;
        pHandle->midDuty = wTimePhC;
        pHandle->highDuty = wTimePhB;
 8004bb6:	4664      	mov	r4, ip
 8004bb8:	87e2      	strh	r2, [r4, #62]	; 0x3e
 8004bba:	e01a      	b.n	8004bf2 <PWMC_SetPhaseVoltage+0xac>
      if ( wX <= 0 )
 8004bbc:	2f00      	cmp	r7, #0
 8004bbe:	dc4f      	bgt.n	8004c60 <PWMC_SetPhaseVoltage+0x11a>
        pHandle->Sector = SECTOR_4;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	7013      	strb	r3, [r2, #0]
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004bc4:	1b3a      	subs	r2, r7, r4
 8004bc6:	17d3      	asrs	r3, r2, #31
 8004bc8:	039b      	lsls	r3, r3, #14
 8004bca:	0b9c      	lsrs	r4, r3, #14
 8004bcc:	18a4      	adds	r4, r4, r2
        wTimePhB = wTimePhA + wZ / 131072;
 8004bce:	17f2      	asrs	r2, r6, #31
 8004bd0:	0392      	lsls	r2, r2, #14
        wTimePhC = wTimePhB - wX / 131072;
 8004bd2:	17fb      	asrs	r3, r7, #31
        wTimePhB = wTimePhA + wZ / 131072;
 8004bd4:	0b92      	lsrs	r2, r2, #14
        wTimePhC = wTimePhB - wX / 131072;
 8004bd6:	03db      	lsls	r3, r3, #15
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004bd8:	14a4      	asrs	r4, r4, #18
        wTimePhB = wTimePhA + wZ / 131072;
 8004bda:	1992      	adds	r2, r2, r6
        wTimePhC = wTimePhB - wX / 131072;
 8004bdc:	0bdb      	lsrs	r3, r3, #15
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004bde:	1861      	adds	r1, r4, r1
        wTimePhB = wTimePhA + wZ / 131072;
 8004be0:	1492      	asrs	r2, r2, #18
        wTimePhC = wTimePhB - wX / 131072;
 8004be2:	19db      	adds	r3, r3, r7
        wTimePhB = wTimePhA + wZ / 131072;
 8004be4:	1852      	adds	r2, r2, r1
        wTimePhC = wTimePhB - wX / 131072;
 8004be6:	145b      	asrs	r3, r3, #17
 8004be8:	1ad3      	subs	r3, r2, r3
        pHandle->lowDuty = wTimePhC;
 8004bea:	8783      	strh	r3, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8004bec:	87c2      	strh	r2, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8004bee:	4664      	mov	r4, ip
 8004bf0:	87e1      	strh	r1, [r4, #62]	; 0x3e
        pHandle->midDuty = wTimePhB;
        pHandle->highDuty = wTimePhC;
      }
  }

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8004bf2:	43cc      	mvns	r4, r1
 8004bf4:	17e4      	asrs	r4, r4, #31
 8004bf6:	4021      	ands	r1, r4
 8004bf8:	43d4      	mvns	r4, r2
 8004bfa:	17e4      	asrs	r4, r4, #31
 8004bfc:	4022      	ands	r2, r4
 8004bfe:	43dc      	mvns	r4, r3
 8004c00:	17e4      	asrs	r4, r4, #31
 8004c02:	4023      	ands	r3, r4
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 8004c04:	0004      	movs	r4, r0
 8004c06:	b289      	uxth	r1, r1
 8004c08:	b292      	uxth	r2, r2
 8004c0a:	b29b      	uxth	r3, r3
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8004c0c:	8641      	strh	r1, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8004c0e:	8682      	strh	r2, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8004c10:	86c3      	strh	r3, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 8004c12:	344e      	adds	r4, #78	; 0x4e
 8004c14:	8824      	ldrh	r4, [r4, #0]
 8004c16:	2c01      	cmp	r4, #1
 8004c18:	d11f      	bne.n	8004c5a <PWMC_SetPhaseVoltage+0x114>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8004c1a:	0005      	movs	r5, r0
    {
      pHandle->CntPhA += pHandle->DTCompCnt;
 8004c1c:	0004      	movs	r4, r0
    if ( pHandle->Ia > 0 )
 8004c1e:	3548      	adds	r5, #72	; 0x48
 8004c20:	2600      	movs	r6, #0
 8004c22:	5fad      	ldrsh	r5, [r5, r6]
      pHandle->CntPhA += pHandle->DTCompCnt;
 8004c24:	3454      	adds	r4, #84	; 0x54
 8004c26:	8824      	ldrh	r4, [r4, #0]
    if ( pHandle->Ia > 0 )
 8004c28:	2d00      	cmp	r5, #0
 8004c2a:	dc00      	bgt.n	8004c2e <PWMC_SetPhaseVoltage+0xe8>
 8004c2c:	e07d      	b.n	8004d2a <PWMC_SetPhaseVoltage+0x1e4>
      pHandle->CntPhA += pHandle->DTCompCnt;
 8004c2e:	1909      	adds	r1, r1, r4
    }
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8004c30:	b289      	uxth	r1, r1
 8004c32:	8641      	strh	r1, [r0, #50]	; 0x32
    }

    if ( pHandle->Ib > 0 )
 8004c34:	0001      	movs	r1, r0
 8004c36:	314a      	adds	r1, #74	; 0x4a
 8004c38:	2500      	movs	r5, #0
 8004c3a:	5f49      	ldrsh	r1, [r1, r5]
 8004c3c:	2900      	cmp	r1, #0
 8004c3e:	dc00      	bgt.n	8004c42 <PWMC_SetPhaseVoltage+0xfc>
 8004c40:	e075      	b.n	8004d2e <PWMC_SetPhaseVoltage+0x1e8>
    {
      pHandle->CntPhB += pHandle->DTCompCnt;
 8004c42:	1912      	adds	r2, r2, r4
    }
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8004c44:	b292      	uxth	r2, r2
 8004c46:	8682      	strh	r2, [r0, #52]	; 0x34
    }

    if ( pHandle->Ic > 0 )
 8004c48:	0002      	movs	r2, r0
 8004c4a:	324c      	adds	r2, #76	; 0x4c
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	5e52      	ldrsh	r2, [r2, r1]
 8004c50:	2a00      	cmp	r2, #0
 8004c52:	dc00      	bgt.n	8004c56 <PWMC_SetPhaseVoltage+0x110>
 8004c54:	e06d      	b.n	8004d32 <PWMC_SetPhaseVoltage+0x1ec>
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8004c56:	191b      	adds	r3, r3, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8004c58:	86c3      	strh	r3, [r0, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8004c5a:	6983      	ldr	r3, [r0, #24]
 8004c5c:	4798      	blx	r3
}
 8004c5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        pHandle->Sector = SECTOR_3;
 8004c60:	2402      	movs	r4, #2
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004c62:	9b00      	ldr	r3, [sp, #0]
        pHandle->Sector = SECTOR_3;
 8004c64:	7014      	strb	r4, [r2, #0]
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004c66:	1bdc      	subs	r4, r3, r7
 8004c68:	17e2      	asrs	r2, r4, #31
 8004c6a:	0392      	lsls	r2, r2, #14
 8004c6c:	0b93      	lsrs	r3, r2, #14
 8004c6e:	191b      	adds	r3, r3, r4
 8004c70:	149b      	asrs	r3, r3, #18
 8004c72:	1859      	adds	r1, r3, r1
        wTimePhC = wTimePhA - wY / 131072;
 8004c74:	17eb      	asrs	r3, r5, #31
 8004c76:	039b      	lsls	r3, r3, #14
 8004c78:	0b9b      	lsrs	r3, r3, #14
 8004c7a:	195b      	adds	r3, r3, r5
 8004c7c:	149b      	asrs	r3, r3, #18
 8004c7e:	1acb      	subs	r3, r1, r3
        wTimePhB = wTimePhC + wX / 131072;
 8004c80:	147a      	asrs	r2, r7, #17
 8004c82:	18d2      	adds	r2, r2, r3
        pHandle->lowDuty = wTimePhB;
 8004c84:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8004c86:	87c3      	strh	r3, [r0, #62]	; 0x3e
 8004c88:	e7b1      	b.n	8004bee <PWMC_SetPhaseVoltage+0xa8>
    if ( wZ >= 0 )
 8004c8a:	1c73      	adds	r3, r6, #1
 8004c8c:	db1a      	blt.n	8004cc4 <PWMC_SetPhaseVoltage+0x17e>
      pHandle->Sector = SECTOR_2;
 8004c8e:	2701      	movs	r7, #1
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004c90:	9b00      	ldr	r3, [sp, #0]
      pHandle->Sector = SECTOR_2;
 8004c92:	7017      	strb	r7, [r2, #0]
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004c94:	1b1b      	subs	r3, r3, r4
 8004c96:	17da      	asrs	r2, r3, #31
 8004c98:	0392      	lsls	r2, r2, #14
 8004c9a:	0b94      	lsrs	r4, r2, #14
      wTimePhB = wTimePhA + wZ / 131072;
 8004c9c:	17f2      	asrs	r2, r6, #31
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004c9e:	18e4      	adds	r4, r4, r3
      wTimePhB = wTimePhA + wZ / 131072;
 8004ca0:	0392      	lsls	r2, r2, #14
      wTimePhC = wTimePhA - wY / 131072;
 8004ca2:	17eb      	asrs	r3, r5, #31
      wTimePhB = wTimePhA + wZ / 131072;
 8004ca4:	0b92      	lsrs	r2, r2, #14
      wTimePhC = wTimePhA - wY / 131072;
 8004ca6:	039b      	lsls	r3, r3, #14
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004ca8:	14a4      	asrs	r4, r4, #18
      wTimePhB = wTimePhA + wZ / 131072;
 8004caa:	1992      	adds	r2, r2, r6
      wTimePhC = wTimePhA - wY / 131072;
 8004cac:	0b9b      	lsrs	r3, r3, #14
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004cae:	1861      	adds	r1, r4, r1
      wTimePhB = wTimePhA + wZ / 131072;
 8004cb0:	1492      	asrs	r2, r2, #18
      wTimePhC = wTimePhA - wY / 131072;
 8004cb2:	195b      	adds	r3, r3, r5
      wTimePhB = wTimePhA + wZ / 131072;
 8004cb4:	1852      	adds	r2, r2, r1
      wTimePhC = wTimePhA - wY / 131072;
 8004cb6:	149b      	asrs	r3, r3, #18
 8004cb8:	1acb      	subs	r3, r1, r3
      pHandle->lowDuty = wTimePhB;
 8004cba:	8782      	strh	r2, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8004cbc:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 8004cbe:	4664      	mov	r4, ip
 8004cc0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004cc2:	e796      	b.n	8004bf2 <PWMC_SetPhaseVoltage+0xac>
      if ( wX <= 0 )
 8004cc4:	2f00      	cmp	r7, #0
 8004cc6:	dc18      	bgt.n	8004cfa <PWMC_SetPhaseVoltage+0x1b4>
        pHandle->Sector = SECTOR_6;
 8004cc8:	2405      	movs	r4, #5
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004cca:	9b00      	ldr	r3, [sp, #0]
        pHandle->Sector = SECTOR_6;
 8004ccc:	7014      	strb	r4, [r2, #0]
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004cce:	1bdc      	subs	r4, r3, r7
 8004cd0:	17e2      	asrs	r2, r4, #31
 8004cd2:	0392      	lsls	r2, r2, #14
 8004cd4:	0b93      	lsrs	r3, r2, #14
 8004cd6:	191b      	adds	r3, r3, r4
 8004cd8:	149b      	asrs	r3, r3, #18
 8004cda:	1859      	adds	r1, r3, r1
        wTimePhC = wTimePhA - wY / 131072;
 8004cdc:	17eb      	asrs	r3, r5, #31
 8004cde:	039b      	lsls	r3, r3, #14
        wTimePhB = wTimePhC + wX / 131072;
 8004ce0:	17fa      	asrs	r2, r7, #31
        wTimePhC = wTimePhA - wY / 131072;
 8004ce2:	0b9b      	lsrs	r3, r3, #14
        wTimePhB = wTimePhC + wX / 131072;
 8004ce4:	03d2      	lsls	r2, r2, #15
        wTimePhC = wTimePhA - wY / 131072;
 8004ce6:	195b      	adds	r3, r3, r5
        wTimePhB = wTimePhC + wX / 131072;
 8004ce8:	0bd2      	lsrs	r2, r2, #15
        wTimePhC = wTimePhA - wY / 131072;
 8004cea:	149b      	asrs	r3, r3, #18
        wTimePhB = wTimePhC + wX / 131072;
 8004cec:	19d2      	adds	r2, r2, r7
        wTimePhC = wTimePhA - wY / 131072;
 8004cee:	1acb      	subs	r3, r1, r3
        wTimePhB = wTimePhC + wX / 131072;
 8004cf0:	1452      	asrs	r2, r2, #17
 8004cf2:	18d2      	adds	r2, r2, r3
        pHandle->lowDuty = wTimePhA;
 8004cf4:	8781      	strh	r1, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8004cf6:	87c3      	strh	r3, [r0, #62]	; 0x3e
 8004cf8:	e75d      	b.n	8004bb6 <PWMC_SetPhaseVoltage+0x70>
        pHandle->Sector = SECTOR_1;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	7013      	strb	r3, [r2, #0]
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004cfe:	1b3a      	subs	r2, r7, r4
 8004d00:	17d3      	asrs	r3, r2, #31
 8004d02:	039b      	lsls	r3, r3, #14
 8004d04:	0b9c      	lsrs	r4, r3, #14
 8004d06:	18a4      	adds	r4, r4, r2
        wTimePhB = wTimePhA + wZ / 131072;
 8004d08:	17f2      	asrs	r2, r6, #31
 8004d0a:	0392      	lsls	r2, r2, #14
        wTimePhC = wTimePhB - wX / 131072;
 8004d0c:	17fb      	asrs	r3, r7, #31
        wTimePhB = wTimePhA + wZ / 131072;
 8004d0e:	0b92      	lsrs	r2, r2, #14
        wTimePhC = wTimePhB - wX / 131072;
 8004d10:	03db      	lsls	r3, r3, #15
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004d12:	14a4      	asrs	r4, r4, #18
        wTimePhB = wTimePhA + wZ / 131072;
 8004d14:	1992      	adds	r2, r2, r6
        wTimePhC = wTimePhB - wX / 131072;
 8004d16:	0bdb      	lsrs	r3, r3, #15
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004d18:	1861      	adds	r1, r4, r1
        wTimePhB = wTimePhA + wZ / 131072;
 8004d1a:	1492      	asrs	r2, r2, #18
        wTimePhC = wTimePhB - wX / 131072;
 8004d1c:	19db      	adds	r3, r3, r7
        wTimePhB = wTimePhA + wZ / 131072;
 8004d1e:	1852      	adds	r2, r2, r1
        wTimePhC = wTimePhB - wX / 131072;
 8004d20:	145b      	asrs	r3, r3, #17
 8004d22:	1ad3      	subs	r3, r2, r3
        pHandle->lowDuty = wTimePhA;
 8004d24:	8781      	strh	r1, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8004d26:	87c2      	strh	r2, [r0, #62]	; 0x3e
 8004d28:	e7c9      	b.n	8004cbe <PWMC_SetPhaseVoltage+0x178>
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8004d2a:	1b09      	subs	r1, r1, r4
 8004d2c:	e780      	b.n	8004c30 <PWMC_SetPhaseVoltage+0xea>
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8004d2e:	1b12      	subs	r2, r2, r4
 8004d30:	e788      	b.n	8004c44 <PWMC_SetPhaseVoltage+0xfe>
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8004d32:	1b1b      	subs	r3, r3, r4
 8004d34:	e790      	b.n	8004c58 <PWMC_SetPhaseVoltage+0x112>

08004d36 <PWMC_SwitchOffPWM>:
/**
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
 8004d36:	b510      	push	{r4, lr}
  pHandle->pFctSwitchOffPwm( pHandle );
 8004d38:	6883      	ldr	r3, [r0, #8]
 8004d3a:	4798      	blx	r3
}
 8004d3c:	bd10      	pop	{r4, pc}

08004d3e <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8004d3e:	b570      	push	{r4, r5, r6, lr}
 8004d40:	0004      	movs	r4, r0
 8004d42:	1e0d      	subs	r5, r1, #0
  bool retVal = false;
  if ( action == CRC_START )
 8004d44:	d110      	bne.n	8004d68 <PWMC_CurrentReadingCalibr+0x2a>
  {
    PWMC_SwitchOffPWM( pHandle );
 8004d46:	f7ff fff6 	bl	8004d36 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8004d4a:	0023      	movs	r3, r4
 8004d4c:	3352      	adds	r3, #82	; 0x52
 8004d4e:	881b      	ldrh	r3, [r3, #0]
 8004d50:	1da2      	adds	r2, r4, #6
 8004d52:	87d3      	strh	r3, [r2, #62]	; 0x3e
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <PWMC_CurrentReadingCalibr+0x20>
  bool retVal = false;
 8004d58:	2500      	movs	r5, #0
  }
  else
  {
  }
  return retVal;
}
 8004d5a:	0028      	movs	r0, r5
 8004d5c:	bd70      	pop	{r4, r5, r6, pc}
      pHandle->pFctCurrReadingCalib( pHandle );
 8004d5e:	0020      	movs	r0, r4
 8004d60:	6923      	ldr	r3, [r4, #16]
 8004d62:	4798      	blx	r3
      retVal = true;
 8004d64:	2501      	movs	r5, #1
 8004d66:	e7f8      	b.n	8004d5a <PWMC_CurrentReadingCalibr+0x1c>
  else if ( action == CRC_EXEC )
 8004d68:	2901      	cmp	r1, #1
 8004d6a:	d1f5      	bne.n	8004d58 <PWMC_CurrentReadingCalibr+0x1a>
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 8004d6c:	1d82      	adds	r2, r0, #6
 8004d6e:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d0f2      	beq.n	8004d5a <PWMC_CurrentReadingCalibr+0x1c>
      pHandle->OffCalibrWaitTimeCounter--;
 8004d74:	3b01      	subs	r3, #1
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	87d3      	strh	r3, [r2, #62]	; 0x3e
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1ec      	bne.n	8004d58 <PWMC_CurrentReadingCalibr+0x1a>
        pHandle->pFctCurrReadingCalib( pHandle );
 8004d7e:	6903      	ldr	r3, [r0, #16]
 8004d80:	4798      	blx	r3
        retVal = true;
 8004d82:	e7ea      	b.n	8004d5a <PWMC_CurrentReadingCalibr+0x1c>

08004d84 <PWMC_CheckOverCurrent>:

/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
 8004d84:	b510      	push	{r4, lr}
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8004d86:	69c3      	ldr	r3, [r0, #28]
 8004d88:	4798      	blx	r3
}
 8004d8a:	bd10      	pop	{r4, pc}

08004d8c <R3_1_GetPhaseCurrents>:
 * @brief  It computes and return latest converted motor phase currents
 * @param  pHdl: handler of the current instance of the PWM component
 * @retval ab_t Ia and Ib current in ab_t format
 */
__weak void R3_1_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
 8004d8c:	b530      	push	{r4, r5, lr}
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004d8e:	2470      	movs	r4, #112	; 0x70
 8004d90:	0003      	movs	r3, r0
 8004d92:	483c      	ldr	r0, [pc, #240]	; (8004e84 <R3_1_GetPhaseCurrents+0xf8>)
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8004d94:	2504      	movs	r5, #4
 8004d96:	6842      	ldr	r2, [r0, #4]
 8004d98:	43a2      	bics	r2, r4
 8004d9a:	6042      	str	r2, [r0, #4]
  uint8_t bSector;

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);

  bSector = ( uint8_t ) pHandle->_Super.Sector;
 8004d9c:	001a      	movs	r2, r3
 8004d9e:	4c3a      	ldr	r4, [pc, #232]	; (8004e88 <R3_1_GetPhaseCurrents+0xfc>)
 8004da0:	323a      	adds	r2, #58	; 0x3a
 8004da2:	7810      	ldrb	r0, [r2, #0]
 8004da4:	68e2      	ldr	r2, [r4, #12]
 8004da6:	43aa      	bics	r2, r5
 8004da8:	60e2      	str	r2, [r4, #12]

  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector];
 8004daa:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8004dac:	0082      	lsls	r2, r0, #2
 8004dae:	18a2      	adds	r2, r4, r2
 8004db0:	6b54      	ldr	r4, [r2, #52]	; 0x34
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector];
 8004db2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector];
 8004db4:	8825      	ldrh	r5, [r4, #0]
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector];
 8004db6:	8812      	ldrh	r2, [r2, #0]
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector];
 8004db8:	b2ad      	uxth	r5, r5
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector];
 8004dba:	b292      	uxth	r2, r2
  
  switch ( bSector )
 8004dbc:	2805      	cmp	r0, #5
 8004dbe:	d80f      	bhi.n	8004de0 <R3_1_GetPhaseCurrents+0x54>
 8004dc0:	4c32      	ldr	r4, [pc, #200]	; (8004e8c <R3_1_GetPhaseCurrents+0x100>)
 8004dc2:	f7fb f9ab 	bl	800011c <__gnu_thumb1_case_uqi>
 8004dc6:	462a      	.short	0x462a
 8004dc8:	2a030346 	.word	0x2a030346
    case SECTOR_4:
    case SECTOR_5:
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) ------------------------------*/

      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8004dcc:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8004dce:	1b40      	subs	r0, r0, r5

      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 8004dd0:	42a0      	cmp	r0, r4
 8004dd2:	da14      	bge.n	8004dfe <R3_1_GetPhaseCurrents+0x72>
      {
        pStator_Currents->a = -INT16_MAX;
 8004dd4:	800c      	strh	r4, [r1, #0]
        pStator_Currents->a = ( int16_t )wAux;
      }

      /* Ib = PhaseBOffset - ADC converted value) ------------------------------*/

      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8004dd6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8004dd8:	1a82      	subs	r2, r0, r2

      /* Saturation of Ib */
      if ( wAux < -INT16_MAX )
 8004dda:	42a2      	cmp	r2, r4
 8004ddc:	da16      	bge.n	8004e0c <R3_1_GetPhaseCurrents+0x80>
      {
        pStator_Currents->b = -INT16_MAX;
 8004dde:	804c      	strh	r4, [r1, #2]

    default:
      break;
  }

  pHandle->_Super.Ia = pStator_Currents->a;
 8004de0:	2000      	movs	r0, #0
 8004de2:	5e0a      	ldrsh	r2, [r1, r0]
 8004de4:	0018      	movs	r0, r3
 8004de6:	3048      	adds	r0, #72	; 0x48
 8004de8:	8002      	strh	r2, [r0, #0]
  pHandle->_Super.Ib = pStator_Currents->b;
 8004dea:	2002      	movs	r0, #2
 8004dec:	5e09      	ldrsh	r1, [r1, r0]
 8004dee:	0018      	movs	r0, r3
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004df0:	1852      	adds	r2, r2, r1
  pHandle->_Super.Ib = pStator_Currents->b;
 8004df2:	304a      	adds	r0, #74	; 0x4a
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004df4:	4252      	negs	r2, r2
 8004df6:	334c      	adds	r3, #76	; 0x4c
  pHandle->_Super.Ib = pStator_Currents->b;
 8004df8:	8001      	strh	r1, [r0, #0]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004dfa:	801a      	strh	r2, [r3, #0]
}
 8004dfc:	bd30      	pop	{r4, r5, pc}
      else  if ( wAux > INT16_MAX )
 8004dfe:	2580      	movs	r5, #128	; 0x80
 8004e00:	022d      	lsls	r5, r5, #8
 8004e02:	42a8      	cmp	r0, r5
 8004e04:	db00      	blt.n	8004e08 <R3_1_GetPhaseCurrents+0x7c>
        pStator_Currents->a = INT16_MAX;
 8004e06:	4822      	ldr	r0, [pc, #136]	; (8004e90 <R3_1_GetPhaseCurrents+0x104>)
        pStator_Currents->a = ( int16_t )wAux;
 8004e08:	8008      	strh	r0, [r1, #0]
 8004e0a:	e7e4      	b.n	8004dd6 <R3_1_GetPhaseCurrents+0x4a>
      else  if ( wAux > INT16_MAX )
 8004e0c:	2080      	movs	r0, #128	; 0x80
 8004e0e:	0200      	lsls	r0, r0, #8
 8004e10:	4282      	cmp	r2, r0
 8004e12:	db00      	blt.n	8004e16 <R3_1_GetPhaseCurrents+0x8a>
        pStator_Currents->b = INT16_MAX;
 8004e14:	4a1e      	ldr	r2, [pc, #120]	; (8004e90 <R3_1_GetPhaseCurrents+0x104>)
        pStator_Currents->b = ( int16_t )wAux;
 8004e16:	804a      	strh	r2, [r1, #2]
 8004e18:	e7e2      	b.n	8004de0 <R3_1_GetPhaseCurrents+0x54>
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 8004e1a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8004e1c:	1b40      	subs	r0, r0, r5
      if ( wAux < -INT16_MAX )
 8004e1e:	42a0      	cmp	r0, r4
 8004e20:	da0c      	bge.n	8004e3c <R3_1_GetPhaseCurrents+0xb0>
        pStator_Currents->b = -INT16_MAX;
 8004e22:	804c      	strh	r4, [r1, #2]
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 8004e24:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8004e26:	1a12      	subs	r2, r2, r0
 8004e28:	2502      	movs	r5, #2
 8004e2a:	5f48      	ldrsh	r0, [r1, r5]
 8004e2c:	1a12      	subs	r2, r2, r0
      if ( wAux > INT16_MAX )
 8004e2e:	2080      	movs	r0, #128	; 0x80
 8004e30:	0200      	lsls	r0, r0, #8
 8004e32:	4282      	cmp	r2, r0
 8004e34:	db09      	blt.n	8004e4a <R3_1_GetPhaseCurrents+0xbe>
        pStator_Currents->a = INT16_MAX;
 8004e36:	4a16      	ldr	r2, [pc, #88]	; (8004e90 <R3_1_GetPhaseCurrents+0x104>)
        pStator_Currents->a = ( int16_t )wAux;
 8004e38:	800a      	strh	r2, [r1, #0]
 8004e3a:	e7d1      	b.n	8004de0 <R3_1_GetPhaseCurrents+0x54>
      else  if ( wAux > INT16_MAX )
 8004e3c:	2580      	movs	r5, #128	; 0x80
 8004e3e:	022d      	lsls	r5, r5, #8
 8004e40:	42a8      	cmp	r0, r5
 8004e42:	db00      	blt.n	8004e46 <R3_1_GetPhaseCurrents+0xba>
        pStator_Currents->b = INT16_MAX;
 8004e44:	4812      	ldr	r0, [pc, #72]	; (8004e90 <R3_1_GetPhaseCurrents+0x104>)
        pStator_Currents->b = ( int16_t )wAux;
 8004e46:	8048      	strh	r0, [r1, #2]
 8004e48:	e7ec      	b.n	8004e24 <R3_1_GetPhaseCurrents+0x98>
      else  if ( wAux < -INT16_MAX )
 8004e4a:	42a2      	cmp	r2, r4
 8004e4c:	daf4      	bge.n	8004e38 <R3_1_GetPhaseCurrents+0xac>
        pStator_Currents->a = -INT16_MAX;
 8004e4e:	800c      	strh	r4, [r1, #0]
 8004e50:	e7c6      	b.n	8004de0 <R3_1_GetPhaseCurrents+0x54>
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8004e52:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8004e54:	1b40      	subs	r0, r0, r5
      if ( wAux < -INT16_MAX )
 8004e56:	42a0      	cmp	r0, r4
 8004e58:	da0c      	bge.n	8004e74 <R3_1_GetPhaseCurrents+0xe8>
        pStator_Currents->a = -INT16_MAX;
 8004e5a:	800c      	strh	r4, [r1, #0]
      wAux = -wAux -  ( int32_t )pStator_Currents->a;         /* Ib  */
 8004e5c:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8004e5e:	1a12      	subs	r2, r2, r0
 8004e60:	2500      	movs	r5, #0
 8004e62:	5f48      	ldrsh	r0, [r1, r5]
 8004e64:	1a12      	subs	r2, r2, r0
      if ( wAux > INT16_MAX )
 8004e66:	2080      	movs	r0, #128	; 0x80
 8004e68:	0200      	lsls	r0, r0, #8
 8004e6a:	4282      	cmp	r2, r0
 8004e6c:	dad2      	bge.n	8004e14 <R3_1_GetPhaseCurrents+0x88>
      else  if ( wAux < -INT16_MAX )
 8004e6e:	42a2      	cmp	r2, r4
 8004e70:	dbb5      	blt.n	8004dde <R3_1_GetPhaseCurrents+0x52>
 8004e72:	e7d0      	b.n	8004e16 <R3_1_GetPhaseCurrents+0x8a>
      else  if ( wAux > INT16_MAX )
 8004e74:	2580      	movs	r5, #128	; 0x80
 8004e76:	022d      	lsls	r5, r5, #8
 8004e78:	42a8      	cmp	r0, r5
 8004e7a:	db00      	blt.n	8004e7e <R3_1_GetPhaseCurrents+0xf2>
        pStator_Currents->a = INT16_MAX;
 8004e7c:	4804      	ldr	r0, [pc, #16]	; (8004e90 <R3_1_GetPhaseCurrents+0x104>)
        pStator_Currents->a = ( int16_t )wAux;
 8004e7e:	8008      	strh	r0, [r1, #0]
 8004e80:	e7ec      	b.n	8004e5c <R3_1_GetPhaseCurrents+0xd0>
 8004e82:	46c0      	nop			; (mov r8, r8)
 8004e84:	40012c00 	.word	0x40012c00
 8004e88:	40012400 	.word	0x40012400
 8004e8c:	ffff8001 	.word	0xffff8001
 8004e90:	00007fff 	.word	0x00007fff

08004e94 <R3_1_HFCurrentsCalibrationAB>:
*         the offset computation.
* @param  pHandle Pointer on the target component instance.
* @retval It always returns {0,0} in ab_t format
*/
__weak void R3_1_HFCurrentsCalibrationAB( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
 8004e94:	b530      	push	{r4, r5, lr}
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = TIM1;
  uint8_t bSector = pHandle->CalibSector;
 8004e96:	0003      	movs	r3, r0
 8004e98:	2570      	movs	r5, #112	; 0x70
 8004e9a:	4c10      	ldr	r4, [pc, #64]	; (8004edc <R3_1_HFCurrentsCalibrationAB+0x48>)
 8004e9c:	3373      	adds	r3, #115	; 0x73
 8004e9e:	6862      	ldr	r2, [r4, #4]
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	43aa      	bics	r2, r5
 8004ea4:	6062      	str	r2, [r4, #4]

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8004ea6:	0002      	movs	r2, r0
 8004ea8:	3272      	adds	r2, #114	; 0x72
 8004eaa:	7814      	ldrb	r4, [r2, #0]
 8004eac:	2c0f      	cmp	r4, #15
 8004eae:	d810      	bhi.n	8004ed2 <R3_1_HFCurrentsCalibrationAB+0x3e>
  {
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[bSector];
 8004eb0:	6f84      	ldr	r4, [r0, #120]	; 0x78
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	18e3      	adds	r3, r4, r3
 8004eb6:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8004eb8:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8004eba:	8824      	ldrh	r4, [r4, #0]
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[bSector];
 8004ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[bSector];
 8004ebe:	192c      	adds	r4, r5, r4
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[bSector];
 8004ec0:	881b      	ldrh	r3, [r3, #0]
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[bSector];
 8004ec2:	65c4      	str	r4, [r0, #92]	; 0x5c
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[bSector];
 8004ec4:	6e04      	ldr	r4, [r0, #96]	; 0x60
 8004ec6:	18e3      	adds	r3, r4, r3
 8004ec8:	6603      	str	r3, [r0, #96]	; 0x60
    pHandle->PolarizationCounter++;
 8004eca:	7813      	ldrb	r3, [r2, #0]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	7013      	strb	r3, [r2, #0]
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = 0;
 8004ed6:	804b      	strh	r3, [r1, #2]
}
 8004ed8:	bd30      	pop	{r4, r5, pc}
 8004eda:	46c0      	nop			; (mov r8, r8)
 8004edc:	40012c00 	.word	0x40012c00

08004ee0 <R3_1_HFCurrentsCalibrationC>:
*         the offset computation.
* @param  pHandle Pointer on the target component instance.
* @retval It always returns {0,0} in ab_t format
*/
__weak void R3_1_HFCurrentsCalibrationC( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
 8004ee0:	b530      	push	{r4, r5, lr}
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = TIM1;
  uint8_t bSector = pHandle->CalibSector;
 8004ee2:	0003      	movs	r3, r0
 8004ee4:	2570      	movs	r5, #112	; 0x70
 8004ee6:	4c0f      	ldr	r4, [pc, #60]	; (8004f24 <R3_1_HFCurrentsCalibrationC+0x44>)
 8004ee8:	3373      	adds	r3, #115	; 0x73
 8004eea:	6862      	ldr	r2, [r4, #4]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	43aa      	bics	r2, r5
 8004ef0:	6062      	str	r2, [r4, #4]

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  
  pHandle->_Super.Sector = SECTOR_1;
 8004ef2:	0002      	movs	r2, r0
 8004ef4:	2400      	movs	r4, #0
 8004ef6:	323a      	adds	r2, #58	; 0x3a
 8004ef8:	7014      	strb	r4, [r2, #0]
  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8004efa:	3238      	adds	r2, #56	; 0x38
 8004efc:	7814      	ldrb	r4, [r2, #0]
 8004efe:	2c0f      	cmp	r4, #15
 8004f00:	d80c      	bhi.n	8004f1c <R3_1_HFCurrentsCalibrationC+0x3c>
  {
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[bSector];
 8004f02:	6f84      	ldr	r4, [r0, #120]	; 0x78
 8004f04:	3312      	adds	r3, #18
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	18e3      	adds	r3, r4, r3
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	18e3      	adds	r3, r4, r3
 8004f12:	6643      	str	r3, [r0, #100]	; 0x64
    pHandle->PolarizationCounter++;
 8004f14:	7813      	ldrb	r3, [r2, #0]
 8004f16:	3301      	adds	r3, #1
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	7013      	strb	r3, [r2, #0]
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = 0;
 8004f20:	804b      	strh	r3, [r1, #2]
}
 8004f22:	bd30      	pop	{r4, r5, pc}
 8004f24:	40012c00 	.word	0x40012c00

08004f28 <R3_1_Init>:
{
 8004f28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8004f2a:	2504      	movs	r5, #4
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8004f2c:	2108      	movs	r1, #8
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8004f2e:	4b37      	ldr	r3, [pc, #220]	; (800500c <R3_1_Init+0xe4>)
  MODIFY_REG(ADCx->CR,
 8004f30:	4f37      	ldr	r7, [pc, #220]	; (8005010 <R3_1_Init+0xe8>)
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	43aa      	bics	r2, r5
 8004f36:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8004f38:	601d      	str	r5, [r3, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	438a      	bics	r2, r1
 8004f3e:	605a      	str	r2, [r3, #4]
  * @rmtoll CR           CSSON         LL_RCC_HSE_EnableCSS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableCSS(void)
{
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8004f40:	2280      	movs	r2, #128	; 0x80
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
 8004f42:	6019      	str	r1, [r3, #0]
 8004f44:	4933      	ldr	r1, [pc, #204]	; (8005014 <R3_1_Init+0xec>)
 8004f46:	0312      	lsls	r2, r2, #12
 8004f48:	680c      	ldr	r4, [r1, #0]
 8004f4a:	4322      	orrs	r2, r4
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8004f4c:	2481      	movs	r4, #129	; 0x81
 8004f4e:	600a      	str	r2, [r1, #0]
 8004f50:	4a31      	ldr	r2, [pc, #196]	; (8005018 <R3_1_Init+0xf0>)
 8004f52:	4264      	negs	r4, r4
 8004f54:	6114      	str	r4, [r2, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8004f56:	68d6      	ldr	r6, [r2, #12]
 8004f58:	3402      	adds	r4, #2
 8004f5a:	34ff      	adds	r4, #255	; 0xff
 8004f5c:	4334      	orrs	r4, r6
 8004f5e:	60d4      	str	r4, [r2, #12]
    LL_TIM_SetCounter( TIM1, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 8004f60:	0004      	movs	r4, r0
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004f62:	2680      	movs	r6, #128	; 0x80
 8004f64:	346c      	adds	r4, #108	; 0x6c
 8004f66:	8824      	ldrh	r4, [r4, #0]
 8004f68:	03f6      	lsls	r6, r6, #15
 8004f6a:	3c01      	subs	r4, #1
  WRITE_REG(TIMx->CNT, Counter);
 8004f6c:	6254      	str	r4, [r2, #36]	; 0x24
 8004f6e:	698c      	ldr	r4, [r1, #24]
 8004f70:	4334      	orrs	r4, r6
 8004f72:	618c      	str	r4, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004f74:	6989      	ldr	r1, [r1, #24]
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB1_GRP2_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8004f76:	4c29      	ldr	r4, [pc, #164]	; (800501c <R3_1_Init+0xf4>)
 8004f78:	4031      	ands	r1, r6
 8004f7a:	9101      	str	r1, [sp, #4]
  (void)tmpreg;
 8004f7c:	9901      	ldr	r1, [sp, #4]
 8004f7e:	2180      	movs	r1, #128	; 0x80
 8004f80:	68e6      	ldr	r6, [r4, #12]
 8004f82:	0109      	lsls	r1, r1, #4
 8004f84:	4331      	orrs	r1, r6
 8004f86:	60e1      	str	r1, [r4, #12]
  MODIFY_REG(ADCx->CR,
 8004f88:	2180      	movs	r1, #128	; 0x80
 8004f8a:	689e      	ldr	r6, [r3, #8]
 8004f8c:	0609      	lsls	r1, r1, #24
 8004f8e:	403e      	ands	r6, r7
 8004f90:	4331      	orrs	r1, r6
 8004f92:	6099      	str	r1, [r3, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 8004f94:	2610      	movs	r6, #16
  return (READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS));
 8004f96:	2102      	movs	r1, #2
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8004f98:	689c      	ldr	r4, [r3, #8]
    while ((LL_ADC_IsCalibrationOnGoing(ADC1) == SET) ||
 8004f9a:	2c00      	cmp	r4, #0
 8004f9c:	dbfc      	blt.n	8004f98 <R3_1_Init+0x70>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8004f9e:	689c      	ldr	r4, [r3, #8]
 8004fa0:	422c      	tst	r4, r5
 8004fa2:	d1f9      	bne.n	8004f98 <R3_1_Init+0x70>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 8004fa4:	689c      	ldr	r4, [r3, #8]
           (LL_ADC_REG_IsConversionOngoing(ADC1) == SET) ||
 8004fa6:	4234      	tst	r4, r6
 8004fa8:	d1f6      	bne.n	8004f98 <R3_1_Init+0x70>
  return (READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS));
 8004faa:	689c      	ldr	r4, [r3, #8]
           (LL_ADC_REG_IsStopConversionOngoing(ADC1) == SET) ||
 8004fac:	420c      	tst	r4, r1
 8004fae:	d1f3      	bne.n	8004f98 <R3_1_Init+0x70>
  MODIFY_REG(ADCx->CR,
 8004fb0:	2101      	movs	r1, #1
 8004fb2:	689c      	ldr	r4, [r3, #8]
 8004fb4:	403c      	ands	r4, r7
 8004fb6:	430c      	orrs	r4, r1
 8004fb8:	609c      	str	r4, [r3, #8]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8004fba:	681c      	ldr	r4, [r3, #0]
    while ( LL_ADC_IsActiveFlag_ADRDY( ADC1 ) == RESET )
 8004fbc:	420c      	tst	r4, r1
 8004fbe:	d0fc      	beq.n	8004fba <R3_1_Init+0x92>
    LL_DMA_SetMemoryAddress( DMA1, LL_DMA_CHANNEL_1, ( uint32_t )pHandle->ADC1_DMA_converted );
 8004fc0:	0004      	movs	r4, r0
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8004fc2:	2503      	movs	r5, #3
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8004fc4:	4b16      	ldr	r3, [pc, #88]	; (8005020 <R3_1_Init+0xf8>)
 8004fc6:	346e      	adds	r4, #110	; 0x6e
 8004fc8:	60dc      	str	r4, [r3, #12]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8004fca:	4c16      	ldr	r4, [pc, #88]	; (8005024 <R3_1_Init+0xfc>)
 8004fcc:	609c      	str	r4, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8004fce:	685c      	ldr	r4, [r3, #4]
 8004fd0:	0c24      	lsrs	r4, r4, #16
 8004fd2:	0424      	lsls	r4, r4, #16
 8004fd4:	432c      	orrs	r4, r5
 8004fd6:	605c      	str	r4, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8004fd8:	681c      	ldr	r4, [r3, #0]
 8004fda:	430c      	orrs	r4, r1
 8004fdc:	601c      	str	r4, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004fde:	2470      	movs	r4, #112	; 0x70
 8004fe0:	6853      	ldr	r3, [r2, #4]
 8004fe2:	43a3      	bics	r3, r4
 8004fe4:	6053      	str	r3, [r2, #4]
  SET_BIT(TIMx->CCER, Channels);
 8004fe6:	6a14      	ldr	r4, [r2, #32]
 8004fe8:	4b0f      	ldr	r3, [pc, #60]	; (8005028 <R3_1_Init+0x100>)
 8004fea:	4323      	orrs	r3, r4
 8004fec:	6213      	str	r3, [r2, #32]
    pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_RISING;
 8004fee:	2380      	movs	r3, #128	; 0x80
    pHandle->OverCurrentFlag = false;
 8004ff0:	0004      	movs	r4, r0
    pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_RISING;
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	6683      	str	r3, [r0, #104]	; 0x68
    pHandle->OverCurrentFlag = false;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	3474      	adds	r4, #116	; 0x74
    pHandle->_Super.DTTest = 0u;
 8004ffa:	304e      	adds	r0, #78	; 0x4e
    pHandle->OverCurrentFlag = false;
 8004ffc:	8023      	strh	r3, [r4, #0]
    pHandle->ADCRegularLocked=false; 
 8004ffe:	70e3      	strb	r3, [r4, #3]
    pHandle->_Super.DTTest = 0u;
 8005000:	8003      	strh	r3, [r0, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005002:	6813      	ldr	r3, [r2, #0]
 8005004:	4319      	orrs	r1, r3
 8005006:	6011      	str	r1, [r2, #0]
}
 8005008:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800500a:	46c0      	nop			; (mov r8, r8)
 800500c:	40012400 	.word	0x40012400
 8005010:	7fffffe8 	.word	0x7fffffe8
 8005014:	40021000 	.word	0x40021000
 8005018:	40012c00 	.word	0x40012c00
 800501c:	40015800 	.word	0x40015800
 8005020:	40020008 	.word	0x40020008
 8005024:	40012440 	.word	0x40012440
 8005028:	00000555 	.word	0x00000555

0800502c <R3_1_WriteTIMRegisters>:
{
 800502c:	0003      	movs	r3, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800502e:	6f82      	ldr	r2, [r0, #120]	; 0x78
  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t)pHandle->_Super.CntPhA );
 8005030:	8e40      	ldrh	r0, [r0, #50]	; 0x32
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005032:	6812      	ldr	r2, [r2, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005034:	6350      	str	r0, [r2, #52]	; 0x34
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t)pHandle->_Super.CntPhB );
 8005036:	8e98      	ldrh	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005038:	6390      	str	r0, [r2, #56]	; 0x38
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t)pHandle->_Super.CntPhC );
 800503a:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
  WRITE_REG(TIMx->CCR3, CompareValue);
 800503c:	63d0      	str	r0, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800503e:	6411      	str	r1, [r2, #64]	; 0x40
  if ( pHandle->_Super.SWerror == 1u )
 8005040:	8f18      	ldrh	r0, [r3, #56]	; 0x38
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8005042:	6852      	ldr	r2, [r2, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8005044:	2801      	cmp	r0, #1
 8005046:	d005      	beq.n	8005054 <R3_1_WriteTIMRegisters+0x28>
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8005048:	2070      	movs	r0, #112	; 0x70
 800504a:	4002      	ands	r2, r0
 800504c:	1e53      	subs	r3, r2, #1
 800504e:	419a      	sbcs	r2, r3
    hAux = MC_FOC_DURATION;
 8005050:	b290      	uxth	r0, r2
}
 8005052:	4770      	bx	lr
    pHandle->_Super.SWerror = 0u;
 8005054:	2200      	movs	r2, #0
 8005056:	871a      	strh	r2, [r3, #56]	; 0x38
 8005058:	e7fb      	b.n	8005052 <R3_1_WriteTIMRegisters+0x26>

0800505a <R3_1_SetADCSampPointCalibration>:
  pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_RISING;
 800505a:	2380      	movs	r3, #128	; 0x80
 800505c:	00db      	lsls	r3, r3, #3
{
 800505e:	b510      	push	{r4, lr}
  pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_RISING;
 8005060:	6683      	str	r3, [r0, #104]	; 0x68
  pHandle->_Super.Sector = pHandle->CalibSector;
 8005062:	0003      	movs	r3, r0
 8005064:	0002      	movs	r2, r0
 8005066:	333a      	adds	r3, #58	; 0x3a
  return R3_1_WriteTIMRegisters( pHdl,  ( uint16_t )( pHandle->Half_PWMPeriod ) - 1u);
 8005068:	8e59      	ldrh	r1, [r3, #50]	; 0x32
  pHandle->_Super.Sector = pHandle->CalibSector;
 800506a:	3273      	adds	r2, #115	; 0x73
 800506c:	7812      	ldrb	r2, [r2, #0]
  return R3_1_WriteTIMRegisters( pHdl,  ( uint16_t )( pHandle->Half_PWMPeriod ) - 1u);
 800506e:	3901      	subs	r1, #1
  pHandle->_Super.Sector = pHandle->CalibSector;
 8005070:	701a      	strb	r2, [r3, #0]
  return R3_1_WriteTIMRegisters( pHdl,  ( uint16_t )( pHandle->Half_PWMPeriod ) - 1u);
 8005072:	b289      	uxth	r1, r1
 8005074:	f7ff ffda 	bl	800502c <R3_1_WriteTIMRegisters>
}
 8005078:	bd10      	pop	{r4, pc}

0800507a <R3_1_SetADCSampPointSectX>:
{
 800507a:	b570      	push	{r4, r5, r6, lr}
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 800507c:	0003      	movs	r3, r0
 800507e:	6f86      	ldr	r6, [r0, #120]	; 0x78
 8005080:	336c      	adds	r3, #108	; 0x6c
 8005082:	0031      	movs	r1, r6
  register uint16_t lowDuty = pHdl->lowDuty;
 8005084:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 8005086:	881b      	ldrh	r3, [r3, #0]
 8005088:	3166      	adds	r1, #102	; 0x66
 800508a:	1b5a      	subs	r2, r3, r5
 800508c:	8809      	ldrh	r1, [r1, #0]
 800508e:	b292      	uxth	r2, r2
 8005090:	428a      	cmp	r2, r1
 8005092:	d908      	bls.n	80050a6 <R3_1_SetADCSampPointSectX+0x2c>
    pHandle->_Super.Sector = SECTOR_5;
 8005094:	0002      	movs	r2, r0
 8005096:	2104      	movs	r1, #4
 8005098:	323a      	adds	r2, #58	; 0x3a
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 800509a:	3b01      	subs	r3, #1
    pHandle->_Super.Sector = SECTOR_5;
 800509c:	7011      	strb	r1, [r2, #0]
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 800509e:	b299      	uxth	r1, r3
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp );
 80050a0:	f7ff ffc4 	bl	800502c <R3_1_WriteTIMRegisters>
}
 80050a4:	bd70      	pop	{r4, r5, r6, pc}
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 80050a6:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 80050a8:	0052      	lsls	r2, r2, #1
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 80050aa:	1b2c      	subs	r4, r5, r4
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 80050ac:	b2a4      	uxth	r4, r4
 80050ae:	4294      	cmp	r4, r2
 80050b0:	d904      	bls.n	80050bc <R3_1_SetADCSampPointSectX+0x42>
      hCntSmp = lowDuty - pHandle->pParams_str->hTbefore;
 80050b2:	3668      	adds	r6, #104	; 0x68
 80050b4:	8831      	ldrh	r1, [r6, #0]
 80050b6:	1a69      	subs	r1, r5, r1
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80050b8:	b289      	uxth	r1, r1
 80050ba:	e7f1      	b.n	80050a0 <R3_1_SetADCSampPointSectX+0x26>
      hCntSmp = lowDuty + pHandle->pParams_str->hTafter;
 80050bc:	1949      	adds	r1, r1, r5
 80050be:	b289      	uxth	r1, r1
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 80050c0:	428b      	cmp	r3, r1
 80050c2:	d8ed      	bhi.n	80050a0 <R3_1_SetADCSampPointSectX+0x26>
        pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_FALLING;
 80050c4:	2280      	movs	r2, #128	; 0x80
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80050c6:	005b      	lsls	r3, r3, #1
        pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_FALLING;
 80050c8:	0112      	lsls	r2, r2, #4
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80050ca:	3b01      	subs	r3, #1
        pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_FALLING;
 80050cc:	6682      	str	r2, [r0, #104]	; 0x68
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80050ce:	1a59      	subs	r1, r3, r1
 80050d0:	e7f2      	b.n	80050b8 <R3_1_SetADCSampPointSectX+0x3e>
	...

080050d4 <R3_1_TurnOnLowSides>:
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = TIM1;

  pHandle->_Super.TurnOnLowSidesAction = true;
 80050d4:	0003      	movs	r3, r0
 80050d6:	2101      	movs	r1, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80050d8:	2202      	movs	r2, #2
 80050da:	3342      	adds	r3, #66	; 0x42
 80050dc:	7019      	strb	r1, [r3, #0]
 80050de:	4b0f      	ldr	r3, [pc, #60]	; (800511c <R3_1_TurnOnLowSides+0x48>)
 80050e0:	4252      	negs	r2, r2
 80050e2:	611a      	str	r2, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80050e4:	2200      	movs	r2, #0
 80050e6:	635a      	str	r2, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80050e8:	639a      	str	r2, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80050ea:	63da      	str	r2, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80050ec:	691a      	ldr	r2, [r3, #16]
  LL_TIM_OC_SetCompareCH1(TIMx, 0u);
  LL_TIM_OC_SetCompareCH2(TIMx, 0u);
  LL_TIM_OC_SetCompareCH3(TIMx, 0u);

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == RESET )
 80050ee:	420a      	tst	r2, r1
 80050f0:	d0fc      	beq.n	80050ec <R3_1_TurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80050f2:	2280      	movs	r2, #128	; 0x80
 80050f4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80050f6:	0212      	lsls	r2, r2, #8
 80050f8:	430a      	orrs	r2, r1
 80050fa:	645a      	str	r2, [r3, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80050fc:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80050fe:	001a      	movs	r2, r3
 8005100:	3272      	adds	r2, #114	; 0x72
 8005102:	7812      	ldrb	r2, [r2, #0]
 8005104:	2a02      	cmp	r2, #2
 8005106:	d108      	bne.n	800511a <R3_1_TurnOnLowSides+0x46>
  {
    /* Enable signals activation */
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005108:	685a      	ldr	r2, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 800510a:	6919      	ldr	r1, [r3, #16]
 800510c:	6191      	str	r1, [r2, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	6959      	ldr	r1, [r3, #20]
 8005112:	6191      	str	r1, [r2, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005114:	68da      	ldr	r2, [r3, #12]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	6193      	str	r3, [r2, #24]

  }
  return;
}
 800511a:	4770      	bx	lr
 800511c:	40012c00 	.word	0x40012c00

08005120 <R3_1_SwitchOnPWM>:
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = TIM1;

  pHandle->_Super.TurnOnLowSidesAction = false;
 8005120:	0003      	movs	r3, r0
{
 8005122:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  pHandle->_Super.TurnOnLowSidesAction = false;
 8005124:	2200      	movs	r2, #0

  /* We forbid ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked=true; 
 8005126:	2401      	movs	r4, #1
  pHandle->_Super.TurnOnLowSidesAction = false;
 8005128:	3342      	adds	r3, #66	; 0x42
 800512a:	701a      	strb	r2, [r3, #0]
  pHandle->ADCRegularLocked=true; 
 800512c:	3335      	adds	r3, #53	; 0x35
 800512e:	701c      	strb	r4, [r3, #0]
  
  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod >> 1));
 8005130:	3b0b      	subs	r3, #11
 8005132:	881a      	ldrh	r2, [r3, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005134:	4b2f      	ldr	r3, [pc, #188]	; (80051f4 <R3_1_SwitchOnPWM+0xd4>)
 8005136:	0851      	lsrs	r1, r2, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 8005138:	3a05      	subs	r2, #5
 800513a:	6359      	str	r1, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800513c:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800513e:	63d9      	str	r1, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8005140:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005142:	2202      	movs	r2, #2
 8005144:	4252      	negs	r2, r2
 8005146:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005148:	6919      	ldr	r1, [r3, #16]

  /* Wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == RESET )
 800514a:	4221      	tst	r1, r4
 800514c:	d0fc      	beq.n	8005148 <R3_1_SwitchOnPWM+0x28>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800514e:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8005150:	2280      	movs	r2, #128	; 0x80
 8005152:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8005154:	00d2      	lsls	r2, r2, #3
 8005156:	430a      	orrs	r2, r1
 8005158:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800515a:	2280      	movs	r2, #128	; 0x80
 800515c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800515e:	0212      	lsls	r2, r2, #8
 8005160:	430a      	orrs	r2, r1
 8005162:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005164:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8005166:	0011      	movs	r1, r2
 8005168:	3172      	adds	r1, #114	; 0x72
 800516a:	7809      	ldrb	r1, [r1, #0]
 800516c:	2902      	cmp	r1, #2
 800516e:	d112      	bne.n	8005196 <R3_1_SwitchOnPWM+0x76>
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8005170:	6a19      	ldr	r1, [r3, #32]
  {
    if ( LL_TIM_CC_IsEnabledChannel(TIMx, TIMxCCER_MASK_CH123) != 0u )
    {
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005172:	6856      	ldr	r6, [r2, #4]
 8005174:	0008      	movs	r0, r1
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005176:	68d1      	ldr	r1, [r2, #12]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005178:	6917      	ldr	r7, [r2, #16]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800517a:	9100      	str	r1, [sp, #0]
 800517c:	6991      	ldr	r1, [r2, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800517e:	6894      	ldr	r4, [r2, #8]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005180:	9101      	str	r1, [sp, #4]
 8005182:	491d      	ldr	r1, [pc, #116]	; (80051f8 <R3_1_SwitchOnPWM+0xd8>)
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005184:	6955      	ldr	r5, [r2, #20]
 8005186:	4008      	ands	r0, r1
 8005188:	4288      	cmp	r0, r1
 800518a:	d12d      	bne.n	80051e8 <R3_1_SwitchOnPWM+0xc8>
 800518c:	9901      	ldr	r1, [sp, #4]
 800518e:	9800      	ldr	r0, [sp, #0]
 8005190:	61b7      	str	r7, [r6, #24]
 8005192:	61a5      	str	r5, [r4, #24]
 8005194:	6181      	str	r1, [r0, #24]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8005196:	2407      	movs	r4, #7
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8005198:	2502      	movs	r5, #2
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800519a:	2604      	movs	r6, #4
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 800519c:	2703      	movs	r7, #3
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 800519e:	4817      	ldr	r0, [pc, #92]	; (80051fc <R3_1_SwitchOnPWM+0xdc>)

	  
    /* Configuration of DMA and ADC to next conversions */
    /* It's possible write the CHSELR resgister because the ADC conversion
       is stopped by the R3_1_SwitchOffPWM function */
    LL_ADC_SetSamplingTimeCommonChannels ( ADC1, pHandle->pParams_str->b_ISamplingTime );
 80051a0:	326a      	adds	r2, #106	; 0x6a
 80051a2:	6941      	ldr	r1, [r0, #20]
 80051a4:	7812      	ldrb	r2, [r2, #0]
 80051a6:	43a1      	bics	r1, r4
 80051a8:	430a      	orrs	r2, r1
 80051aa:	6142      	str	r2, [r0, #20]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80051ac:	4a14      	ldr	r2, [pc, #80]	; (8005200 <R3_1_SwitchOnPWM+0xe0>)
 80051ae:	3c06      	subs	r4, #6
 80051b0:	6811      	ldr	r1, [r2, #0]
 80051b2:	43a1      	bics	r1, r4
 80051b4:	6011      	str	r1, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80051b6:	6851      	ldr	r1, [r2, #4]
 80051b8:	0c09      	lsrs	r1, r1, #16
 80051ba:	0409      	lsls	r1, r1, #16
 80051bc:	4329      	orrs	r1, r5
 80051be:	6051      	str	r1, [r2, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80051c0:	6811      	ldr	r1, [r2, #0]
 80051c2:	4321      	orrs	r1, r4
 80051c4:	6011      	str	r1, [r2, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80051c6:	6006      	str	r6, [r0, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80051c8:	68c1      	ldr	r1, [r0, #12]
 80051ca:	43b9      	bics	r1, r7
 80051cc:	4321      	orrs	r1, r4
 80051ce:	60c1      	str	r1, [r0, #12]
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT1(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 80051d0:	490c      	ldr	r1, [pc, #48]	; (8005204 <R3_1_SwitchOnPWM+0xe4>)
 80051d2:	604e      	str	r6, [r1, #4]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80051d4:	6811      	ldr	r1, [r2, #0]
 80051d6:	430d      	orrs	r5, r1
 80051d8:	6015      	str	r5, [r2, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80051da:	2202      	movs	r2, #2
 80051dc:	4252      	negs	r2, r2
 80051de:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80051e0:	68da      	ldr	r2, [r3, #12]
 80051e2:	4314      	orrs	r4, r2
 80051e4:	60dc      	str	r4, [r3, #12]
    LL_TIM_ClearFlag_UPDATE( TIMx );
    /* Enable Update IRQ */
    LL_TIM_EnableIT_UPDATE( TIMx );
  
  return;
}
 80051e6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80051e8:	9901      	ldr	r1, [sp, #4]
 80051ea:	9800      	ldr	r0, [sp, #0]
 80051ec:	62b7      	str	r7, [r6, #40]	; 0x28
 80051ee:	62a5      	str	r5, [r4, #40]	; 0x28
 80051f0:	6281      	str	r1, [r0, #40]	; 0x28
}
 80051f2:	e7d0      	b.n	8005196 <R3_1_SwitchOnPWM+0x76>
 80051f4:	40012c00 	.word	0x40012c00
 80051f8:	00000555 	.word	0x00000555
 80051fc:	40012400 	.word	0x40012400
 8005200:	40020008 	.word	0x40020008
 8005204:	40020000 	.word	0x40020000

08005208 <R3_1_SwitchOffPWM>:
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005208:	2101      	movs	r1, #1
 800520a:	4a21      	ldr	r2, [pc, #132]	; (8005290 <R3_1_SwitchOffPWM+0x88>)
  *         MOE bit and reset the TIM status
  * @param  pHdl: handler of the current instance of the PWM component
  * @retval none
  */
__weak void R3_1_SwitchOffPWM( PWMC_Handle_t * pHdl )
{
 800520c:	b530      	push	{r4, r5, lr}
 800520e:	68d3      	ldr	r3, [r2, #12]
 8005210:	438b      	bics	r3, r1
 8005212:	60d3      	str	r3, [r2, #12]
  TIM_TypeDef * TIMx = TIM1;

  /* Enable Update IRQ */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 8005214:	0003      	movs	r3, r0
 8005216:	2100      	movs	r1, #0
 8005218:	3342      	adds	r3, #66	; 0x42
 800521a:	7019      	strb	r1, [r3, #0]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800521c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800521e:	491d      	ldr	r1, [pc, #116]	; (8005294 <R3_1_SwitchOffPWM+0x8c>)
 8005220:	400b      	ands	r3, r1
 8005222:	6453      	str	r3, [r2, #68]	; 0x44

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if ( pHandle->BrakeActionLock == true )
 8005224:	0003      	movs	r3, r0
 8005226:	3376      	adds	r3, #118	; 0x76
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10e      	bne.n	800524c <R3_1_SwitchOffPWM+0x44>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800522e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005230:	0019      	movs	r1, r3
 8005232:	3172      	adds	r1, #114	; 0x72
 8005234:	7809      	ldrb	r1, [r1, #0]
 8005236:	2902      	cmp	r1, #2
 8005238:	d108      	bne.n	800524c <R3_1_SwitchOffPWM+0x44>
    {
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800523a:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(GPIOx->BRR, PinMask);
 800523c:	691c      	ldr	r4, [r3, #16]
 800523e:	628c      	str	r4, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005240:	6899      	ldr	r1, [r3, #8]
 8005242:	695c      	ldr	r4, [r3, #20]
 8005244:	628c      	str	r4, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005246:	68d9      	ldr	r1, [r3, #12]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	628b      	str	r3, [r1, #40]	; 0x28
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 800524c:	2502      	movs	r5, #2
 800524e:	4912      	ldr	r1, [pc, #72]	; (8005298 <R3_1_SwitchOffPWM+0x90>)
  MODIFY_REG(ADCx->CR,
 8005250:	4c12      	ldr	r4, [pc, #72]	; (800529c <R3_1_SwitchOffPWM+0x94>)
 8005252:	680b      	ldr	r3, [r1, #0]

  /* The ADC is not triggered anymore by the PWM timer */
  LL_ADC_REG_SetTriggerSource (ADC1, LL_ADC_REG_TRIG_SOFTWARE);
  
 /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked=false; 
 8005254:	3077      	adds	r0, #119	; 0x77
 8005256:	43ab      	bics	r3, r5
 8005258:	600b      	str	r3, [r1, #0]
 800525a:	4b11      	ldr	r3, [pc, #68]	; (80052a0 <R3_1_SwitchOffPWM+0x98>)
 800525c:	6899      	ldr	r1, [r3, #8]
 800525e:	400c      	ands	r4, r1
 8005260:	2110      	movs	r1, #16
 8005262:	4321      	orrs	r1, r4
  ADC1->CFGR1 &= ~ADC_CFGR1_DMAEN;
 8005264:	2401      	movs	r4, #1
 8005266:	6099      	str	r1, [r3, #8]
 8005268:	68d9      	ldr	r1, [r3, #12]
 800526a:	43a1      	bics	r1, r4
 800526c:	60d9      	str	r1, [r3, #12]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 800526e:	490d      	ldr	r1, [pc, #52]	; (80052a4 <R3_1_SwitchOffPWM+0x9c>)
 8005270:	604d      	str	r5, [r1, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8005272:	2104      	movs	r1, #4
 8005274:	6019      	str	r1, [r3, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8005276:	68d9      	ldr	r1, [r3, #12]
 8005278:	4d0b      	ldr	r5, [pc, #44]	; (80052a8 <R3_1_SwitchOffPWM+0xa0>)
 800527a:	4029      	ands	r1, r5
 800527c:	60d9      	str	r1, [r3, #12]
  pHandle->ADCRegularLocked=false; 
 800527e:	2300      	movs	r3, #0
 8005280:	7003      	strb	r3, [r0, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005282:	3b02      	subs	r3, #2
 8005284:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005286:	6911      	ldr	r1, [r2, #16]

  /* Wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == RESET )
 8005288:	4221      	tst	r1, r4
 800528a:	d0fc      	beq.n	8005286 <R3_1_SwitchOffPWM+0x7e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800528c:	6113      	str	r3, [r2, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  return;
}
 800528e:	bd30      	pop	{r4, r5, pc}
 8005290:	40012c00 	.word	0x40012c00
 8005294:	ffff7fff 	.word	0xffff7fff
 8005298:	40020008 	.word	0x40020008
 800529c:	7fffffe8 	.word	0x7fffffe8
 80052a0:	40012400 	.word	0x40012400
 80052a4:	40020000 	.word	0x40020000
 80052a8:	fffff23f 	.word	0xfffff23f

080052ac <R3_1_CurrentReadingCalibration>:
{
 80052ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  pHandle->PolarizationCounter = 0u;
 80052ae:	0007      	movs	r7, r0
  pHandle-> PhaseAOffset = 0u;
 80052b0:	2600      	movs	r6, #0
  CLEAR_BIT(TIMx->CCER, Channels);
 80052b2:	4d39      	ldr	r5, [pc, #228]	; (8005398 <R3_1_CurrentReadingCalibration+0xec>)
  pHandle->PolarizationCounter = 0u;
 80052b4:	3772      	adds	r7, #114	; 0x72
  pHandle-> PhaseAOffset = 0u;
 80052b6:	65c6      	str	r6, [r0, #92]	; 0x5c
  pHandle-> PhaseBOffset = 0u;
 80052b8:	6606      	str	r6, [r0, #96]	; 0x60
  pHandle-> PhaseCOffset = 0u;
 80052ba:	6646      	str	r6, [r0, #100]	; 0x64
  pHandle->PolarizationCounter = 0u;
 80052bc:	703e      	strb	r6, [r7, #0]
 80052be:	6a2b      	ldr	r3, [r5, #32]
 80052c0:	4a36      	ldr	r2, [pc, #216]	; (800539c <R3_1_CurrentReadingCalibration+0xf0>)
{
 80052c2:	b085      	sub	sp, #20
 80052c4:	4013      	ands	r3, r2
 80052c6:	622b      	str	r3, [r5, #32]
  pHandle->_Super.pFctGetPhaseCurrents     = &R3_1_HFCurrentsCalibrationAB;
 80052c8:	4b35      	ldr	r3, [pc, #212]	; (80053a0 <R3_1_CurrentReadingCalibration+0xf4>)
{
 80052ca:	0004      	movs	r4, r0
  pHandle->_Super.pFctGetPhaseCurrents     = &R3_1_HFCurrentsCalibrationAB;
 80052cc:	6043      	str	r3, [r0, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointCalibration;
 80052ce:	4b35      	ldr	r3, [pc, #212]	; (80053a4 <R3_1_CurrentReadingCalibration+0xf8>)
 80052d0:	6183      	str	r3, [r0, #24]
  pHandle->CalibSector = SECTOR_5;
 80052d2:	0003      	movs	r3, r0
 80052d4:	3373      	adds	r3, #115	; 0x73
 80052d6:	001a      	movs	r2, r3
 80052d8:	9303      	str	r3, [sp, #12]
 80052da:	2304      	movs	r3, #4
 80052dc:	7013      	strb	r3, [r2, #0]
  pHandle->_Super.Sector = SECTOR_5;
 80052de:	3a39      	subs	r2, #57	; 0x39
 80052e0:	7013      	strb	r3, [r2, #0]
 80052e2:	9201      	str	r2, [sp, #4]
  R3_1_SwitchOnPWM( &pHandle->_Super );
 80052e4:	f7ff ff1c 	bl	8005120 <R3_1_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 80052e8:	0022      	movs	r2, r4
 80052ea:	3238      	adds	r2, #56	; 0x38
 80052ec:	9202      	str	r2, [sp, #8]
 80052ee:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80052f0:	9902      	ldr	r1, [sp, #8]
 80052f2:	326b      	adds	r2, #107	; 0x6b
 80052f4:	003b      	movs	r3, r7
 80052f6:	0028      	movs	r0, r5
 80052f8:	7812      	ldrb	r2, [r2, #0]
 80052fa:	f7ff fbfc 	bl	8004af6 <waitForPolarizationEnd>
  R3_1_SwitchOffPWM( &pHandle->_Super );
 80052fe:	0020      	movs	r0, r4
 8005300:	f7ff ff82 	bl	8005208 <R3_1_SwitchOffPWM>
  pHandle->CalibSector = SECTOR_1;
 8005304:	9a03      	ldr	r2, [sp, #12]
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationC;
 8005306:	4b28      	ldr	r3, [pc, #160]	; (80053a8 <R3_1_CurrentReadingCalibration+0xfc>)
  R3_1_SwitchOnPWM( &pHandle->_Super );
 8005308:	0020      	movs	r0, r4
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationC;
 800530a:	6063      	str	r3, [r4, #4]
  pHandle->CalibSector = SECTOR_1;
 800530c:	7016      	strb	r6, [r2, #0]
  pHandle->_Super.Sector = SECTOR_1;
 800530e:	9a01      	ldr	r2, [sp, #4]
 8005310:	7016      	strb	r6, [r2, #0]
  pHandle->PolarizationCounter = 0;
 8005312:	703e      	strb	r6, [r7, #0]
  R3_1_SwitchOnPWM( &pHandle->_Super );
 8005314:	f7ff ff04 	bl	8005120 <R3_1_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 8005318:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800531a:	003b      	movs	r3, r7
 800531c:	326b      	adds	r2, #107	; 0x6b
 800531e:	9902      	ldr	r1, [sp, #8]
 8005320:	0028      	movs	r0, r5
 8005322:	7812      	ldrb	r2, [r2, #0]
 8005324:	f7ff fbe7 	bl	8004af6 <waitForPolarizationEnd>
  R3_1_SwitchOffPWM( &pHandle->_Super );
 8005328:	0020      	movs	r0, r4
 800532a:	f7ff ff6d 	bl	8005208 <R3_1_SwitchOffPWM>
  pHandle->_Super.Sector = SECTOR_5;
 800532e:	2304      	movs	r3, #4
 8005330:	9a01      	ldr	r2, [sp, #4]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8005332:	491e      	ldr	r1, [pc, #120]	; (80053ac <R3_1_CurrentReadingCalibration+0x100>)
  pHandle->_Super.Sector = SECTOR_5;
 8005334:	7013      	strb	r3, [r2, #0]
  pHandle->PhaseAOffset = pHandle->PhaseAOffset / NB_CONVERSIONS;
 8005336:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005338:	091b      	lsrs	r3, r3, #4
 800533a:	65e3      	str	r3, [r4, #92]	; 0x5c
  pHandle->PhaseBOffset = pHandle->PhaseBOffset / NB_CONVERSIONS;
 800533c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800533e:	091b      	lsrs	r3, r3, #4
 8005340:	6623      	str	r3, [r4, #96]	; 0x60
  pHandle->PhaseCOffset = pHandle->PhaseCOffset / NB_CONVERSIONS;
 8005342:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005344:	091b      	lsrs	r3, r3, #4
 8005346:	6663      	str	r3, [r4, #100]	; 0x64
  pHandle->_Super.pFctGetPhaseCurrents     = &R3_1_GetPhaseCurrents;
 8005348:	4b19      	ldr	r3, [pc, #100]	; (80053b0 <R3_1_CurrentReadingCalibration+0x104>)
 800534a:	6063      	str	r3, [r4, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointSectX;
 800534c:	4b19      	ldr	r3, [pc, #100]	; (80053b4 <R3_1_CurrentReadingCalibration+0x108>)
 800534e:	61a3      	str	r3, [r4, #24]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8005350:	4b19      	ldr	r3, [pc, #100]	; (80053b8 <R3_1_CurrentReadingCalibration+0x10c>)
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	400a      	ands	r2, r1
 8005356:	601a      	str	r2, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	400a      	ands	r2, r1
 800535c:	601a      	str	r2, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	400a      	ands	r2, r1
 8005362:	601a      	str	r2, [r3, #0]
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->Half_PWMPeriod );
 8005364:	0022      	movs	r2, r4
 8005366:	326c      	adds	r2, #108	; 0x6c
 8005368:	8812      	ldrh	r2, [r2, #0]
  pHandle->BrakeActionLock = false;
 800536a:	3476      	adds	r4, #118	; 0x76
  WRITE_REG(TIMx->CCR1, CompareValue);
 800536c:	636a      	str	r2, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800536e:	63aa      	str	r2, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005370:	63ea      	str	r2, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8005372:	2208      	movs	r2, #8
 8005374:	69a9      	ldr	r1, [r5, #24]
 8005376:	4311      	orrs	r1, r2
 8005378:	61a9      	str	r1, [r5, #24]
 800537a:	2180      	movs	r1, #128	; 0x80
 800537c:	69a8      	ldr	r0, [r5, #24]
 800537e:	0109      	lsls	r1, r1, #4
 8005380:	4301      	orrs	r1, r0
 8005382:	61a9      	str	r1, [r5, #24]
 8005384:	6819      	ldr	r1, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->CCER, Channels);
 800538a:	6a2a      	ldr	r2, [r5, #32]
 800538c:	4b0b      	ldr	r3, [pc, #44]	; (80053bc <R3_1_CurrentReadingCalibration+0x110>)
 800538e:	4313      	orrs	r3, r2
 8005390:	622b      	str	r3, [r5, #32]
  pHandle->BrakeActionLock = false;
 8005392:	7026      	strb	r6, [r4, #0]
}
 8005394:	b005      	add	sp, #20
 8005396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005398:	40012c00 	.word	0x40012c00
 800539c:	fffffaaa 	.word	0xfffffaaa
 80053a0:	08004e95 	.word	0x08004e95
 80053a4:	0800505b 	.word	0x0800505b
 80053a8:	08004ee1 	.word	0x08004ee1
 80053ac:	fffff7ff 	.word	0xfffff7ff
 80053b0:	08004d8d 	.word	0x08004d8d
 80053b4:	0800507b 	.word	0x0800507b
 80053b8:	40012c1c 	.word	0x40012c1c
 80053bc:	00000555 	.word	0x00000555

080053c0 <R3_1_TIMx_UP_IRQHandler>:
  * @brief  It contains the TIMx Update event interrupt
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
void * R3_1_TIMx_UP_IRQHandler( PWMC_R3_1_Handle_t * pHandle )
{
 80053c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053c2:	2580      	movs	r5, #128	; 0x80
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN, ExternalTriggerEdge);
 80053c4:	4b19      	ldr	r3, [pc, #100]	; (800542c <R3_1_TIMx_UP_IRQHandler+0x6c>)
  
  /* Set the trigger polarity as computed inside SetADCSampPointSectX*/
  LL_ADC_REG_SetTriggerEdge (ADC1, pHandle->ADCTriggerEdge);
 80053c6:	6e81      	ldr	r1, [r0, #104]	; 0x68
 80053c8:	4c19      	ldr	r4, [pc, #100]	; (8005430 <R3_1_TIMx_UP_IRQHandler+0x70>)
 80053ca:	68da      	ldr	r2, [r3, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 80053cc:	00ed      	lsls	r5, r5, #3
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN, ExternalTriggerEdge);
 80053ce:	4022      	ands	r2, r4
 80053d0:	430a      	orrs	r2, r1
 80053d2:	60da      	str	r2, [r3, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 80053d4:	68da      	ldr	r2, [r3, #12]
 80053d6:	4917      	ldr	r1, [pc, #92]	; (8005434 <R3_1_TIMx_UP_IRQHandler+0x74>)
 80053d8:	400a      	ands	r2, r1
 80053da:	432a      	orrs	r2, r5
 80053dc:	60da      	str	r2, [r3, #12]
  /* set ADC trigger source */
  LL_ADC_REG_SetTriggerSource(ADC1, LL_ADC_REG_TRIG_EXT_TIM1_TRGO);
  /* Set scan direction according to the sector */  
  LL_ADC_REG_SetSequencerScanDirection(ADC1, pHandle->pParams_str->ADCScandir[pHandle->_Super.Sector]<<ADC_CFGR1_SCANDIR_Pos);
 80053de:	0002      	movs	r2, r0
 80053e0:	323a      	adds	r2, #58	; 0x3a
 80053e2:	6f81      	ldr	r1, [r0, #120]	; 0x78
 80053e4:	7812      	ldrb	r2, [r2, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 80053e6:	68df      	ldr	r7, [r3, #12]
 80053e8:	188c      	adds	r4, r1, r2
 80053ea:	346c      	adds	r4, #108	; 0x6c
 80053ec:	7826      	ldrb	r6, [r4, #0]
 80053ee:	2404      	movs	r4, #4
 80053f0:	00b6      	lsls	r6, r6, #2
 80053f2:	43a7      	bics	r7, r4
  /* Configure the ADC scheduler as selected inside SetADCSampPointSectX*/
  ADC1->CHSELR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector];
 80053f4:	3206      	adds	r2, #6
 80053f6:	433e      	orrs	r6, r7
 80053f8:	0092      	lsls	r2, r2, #2
 80053fa:	60de      	str	r6, [r3, #12]
 80053fc:	188a      	adds	r2, r1, r2
 80053fe:	6852      	ldr	r2, [r2, #4]
  /* ReConfigure sampling time, as deconfigured by reg_conv_manager */
  LL_ADC_SetSamplingTimeCommonChannels ( ADC1, pHandle->pParams_str->b_ISamplingTime );
 8005400:	316a      	adds	r1, #106	; 0x6a
  ADC1->CHSELR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector];
 8005402:	629a      	str	r2, [r3, #40]	; 0x28
  LL_ADC_SetSamplingTimeCommonChannels ( ADC1, pHandle->pParams_str->b_ISamplingTime );
 8005404:	780a      	ldrb	r2, [r1, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8005406:	2107      	movs	r1, #7
 8005408:	695e      	ldr	r6, [r3, #20]
 800540a:	438e      	bics	r6, r1
 800540c:	4332      	orrs	r2, r6
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800540e:	2670      	movs	r6, #112	; 0x70
 8005410:	4909      	ldr	r1, [pc, #36]	; (8005438 <R3_1_TIMx_UP_IRQHandler+0x78>)
 8005412:	615a      	str	r2, [r3, #20]
 8005414:	684a      	ldr	r2, [r1, #4]
 8005416:	4332      	orrs	r2, r6
 8005418:	604a      	str	r2, [r1, #4]
  MODIFY_REG(ADCx->CR,
 800541a:	689a      	ldr	r2, [r3, #8]
 800541c:	4907      	ldr	r1, [pc, #28]	; (800543c <R3_1_TIMx_UP_IRQHandler+0x7c>)
 800541e:	400a      	ands	r2, r1
 8005420:	4314      	orrs	r4, r2
 8005422:	609c      	str	r4, [r3, #8]
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_OC4REF);
  /* ADC needs to be restarted because DMA is configured as limited */
  LL_ADC_REG_StartConversion( ADC1 );

  /* Reset the ADC trigger edge for next conversion */
  pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_RISING;
 8005424:	6685      	str	r5, [r0, #104]	; 0x68

  return &pHandle->_Super.Motor;
 8005426:	3046      	adds	r0, #70	; 0x46
}
 8005428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800542a:	46c0      	nop			; (mov r8, r8)
 800542c:	40012400 	.word	0x40012400
 8005430:	fffff3ff 	.word	0xfffff3ff
 8005434:	fffff23f 	.word	0xfffff23f
 8005438:	40012c00 	.word	0x40012c00
 800543c:	7fffffe8 	.word	0x7fffffe8

08005440 <F0XX_BRK_IRQHandler>:
 * @param  pHandle: handler of the current instance of the PWM component
 * @retval none
 */
__weak void * F0XX_BRK_IRQHandler( PWMC_R3_1_Handle_t * pHandle )
{
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005440:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005442:	001a      	movs	r2, r3
 8005444:	3272      	adds	r2, #114	; 0x72
 8005446:	7812      	ldrb	r2, [r2, #0]
 8005448:	2a02      	cmp	r2, #2
 800544a:	d108      	bne.n	800545e <F0XX_BRK_IRQHandler+0x1e>
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	6919      	ldr	r1, [r3, #16]
 8005450:	6291      	str	r1, [r2, #40]	; 0x28
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	6959      	ldr	r1, [r3, #20]
 8005456:	6291      	str	r1, [r2, #40]	; 0x28
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005458:	68da      	ldr	r2, [r3, #12]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	6293      	str	r3, [r2, #40]	; 0x28
  }
  pHandle->OverCurrentFlag = true;
 800545e:	2301      	movs	r3, #1
 8005460:	3074      	adds	r0, #116	; 0x74
 8005462:	7003      	strb	r3, [r0, #0]

  return MC_NULL;
}
 8005464:	2000      	movs	r0, #0
 8005466:	4770      	bx	lr

08005468 <R3_1_IsOverCurrentOccurred>:
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  uint16_t retVal = MC_NO_FAULTS;


  if ( pHandle->OverVoltageFlag == true )
 8005468:	0002      	movs	r2, r0
{
 800546a:	0003      	movs	r3, r0
 800546c:	2000      	movs	r0, #0
  if ( pHandle->OverVoltageFlag == true )
 800546e:	3275      	adds	r2, #117	; 0x75
 8005470:	7811      	ldrb	r1, [r2, #0]
 8005472:	4281      	cmp	r1, r0
 8005474:	d001      	beq.n	800547a <R3_1_IsOverCurrentOccurred+0x12>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 8005476:	7010      	strb	r0, [r2, #0]
    retVal = MC_OVER_VOLT;
 8005478:	3002      	adds	r0, #2
  }

  if ( pHandle->OverCurrentFlag == true )
 800547a:	3374      	adds	r3, #116	; 0x74
 800547c:	781a      	ldrb	r2, [r3, #0]
 800547e:	2a00      	cmp	r2, #0
 8005480:	d003      	beq.n	800548a <R3_1_IsOverCurrentOccurred+0x22>
  {
    retVal |= MC_BREAK_IN;
 8005482:	2240      	movs	r2, #64	; 0x40
 8005484:	4310      	orrs	r0, r2
    pHandle->OverCurrentFlag = false;
 8005486:	2200      	movs	r2, #0
 8005488:	701a      	strb	r2, [r3, #0]
  }
  return retVal;
}
 800548a:	4770      	bx	lr

0800548c <RVBS_Clear>:
  *         value
  * @param  pHandle related RDivider_Handle_t
  * @retval none
  */
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
 800548c:	b510      	push	{r4, lr}
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 800548e:	8b82      	ldrh	r2, [r0, #28]
 8005490:	8b43      	ldrh	r3, [r0, #26]
 8005492:	189b      	adds	r3, r3, r2
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8005494:	2200      	movs	r2, #0
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8005496:	085b      	lsrs	r3, r3, #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8005498:	8b01      	ldrh	r1, [r0, #24]
 800549a:	4291      	cmp	r1, r2
 800549c:	d805      	bhi.n	80054aa <RVBS_Clear+0x1e>
  {
    pHandle->aBuffer[index] = aux;
  }
  pHandle->_Super.LatestConv = aux;
  pHandle->_Super.AvBusVoltage_d = aux;
 800549e:	80c3      	strh	r3, [r0, #6]
  pHandle->_Super.LatestConv = aux;
 80054a0:	8083      	strh	r3, [r0, #4]
  pHandle->index = 0;
 80054a2:	2300      	movs	r3, #0
 80054a4:	3006      	adds	r0, #6
 80054a6:	77c3      	strb	r3, [r0, #31]
}
 80054a8:	bd10      	pop	{r4, pc}
    pHandle->aBuffer[index] = aux;
 80054aa:	6a04      	ldr	r4, [r0, #32]
 80054ac:	0051      	lsls	r1, r2, #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80054ae:	3201      	adds	r2, #1
    pHandle->aBuffer[index] = aux;
 80054b0:	530b      	strh	r3, [r1, r4]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80054b2:	b292      	uxth	r2, r2
 80054b4:	e7f0      	b.n	8005498 <RVBS_Clear+0xc>

080054b6 <RVBS_Init>:
{
 80054b6:	b510      	push	{r4, lr}
 80054b8:	0004      	movs	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 80054ba:	300c      	adds	r0, #12
 80054bc:	f7fc fa2a 	bl	8001914 <RCM_RegisterRegConv>
 80054c0:	1de3      	adds	r3, r4, #7
 80054c2:	77d8      	strb	r0, [r3, #31]
  RVBS_Clear( pHandle );
 80054c4:	0020      	movs	r0, r4
 80054c6:	f7ff ffe1 	bl	800548c <RVBS_Clear>
}
 80054ca:	bd10      	pop	{r4, pc}

080054cc <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 80054cc:	88c3      	ldrh	r3, [r0, #6]
 80054ce:	8b41      	ldrh	r1, [r0, #26]
{
 80054d0:	0002      	movs	r2, r0
  {
    fault = MC_OVER_VOLT;
 80054d2:	2002      	movs	r0, #2
  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 80054d4:	4299      	cmp	r1, r3
 80054d6:	d304      	bcc.n	80054e2 <RVBS_CheckFaultState+0x16>
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 80054d8:	8b90      	ldrh	r0, [r2, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 80054da:	4283      	cmp	r3, r0
 80054dc:	4180      	sbcs	r0, r0
 80054de:	4240      	negs	r0, r0
 80054e0:	0080      	lsls	r0, r0, #2
  }
  return fault;
}
 80054e2:	4770      	bx	lr

080054e4 <RVBS_CalcAvVbus>:
{
 80054e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 80054e6:	1dc3      	adds	r3, r0, #7
{
 80054e8:	0004      	movs	r4, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 80054ea:	7fd8      	ldrb	r0, [r3, #31]
 80054ec:	f7fc fa5a 	bl	80019a4 <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 80054f0:	4b14      	ldr	r3, [pc, #80]	; (8005544 <RVBS_CalcAvVbus+0x60>)
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 80054f2:	0007      	movs	r7, r0
  if ( hAux != 0xFFFF )
 80054f4:	4298      	cmp	r0, r3
 80054f6:	d015      	beq.n	8005524 <RVBS_CalcAvVbus+0x40>
    pHandle->aBuffer[pHandle->index] = hAux;
 80054f8:	1da3      	adds	r3, r4, #6
 80054fa:	9301      	str	r3, [sp, #4]
 80054fc:	7fdd      	ldrb	r5, [r3, #31]
 80054fe:	6a22      	ldr	r2, [r4, #32]
 8005500:	006b      	lsls	r3, r5, #1
 8005502:	5298      	strh	r0, [r3, r2]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8005504:	2300      	movs	r3, #0
    wtemp = 0;
 8005506:	0018      	movs	r0, r3
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8005508:	8b26      	ldrh	r6, [r4, #24]
 800550a:	42b3      	cmp	r3, r6
 800550c:	d30f      	bcc.n	800552e <RVBS_CalcAvVbus+0x4a>
    wtemp /= pHandle->LowPassFilterBW;
 800550e:	0031      	movs	r1, r6
 8005510:	f7fa fe22 	bl	8000158 <__udivsi3>
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8005514:	3e01      	subs	r6, #1
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8005516:	80e0      	strh	r0, [r4, #6]
    pHandle->_Super.LatestConv = hAux;
 8005518:	80a7      	strh	r7, [r4, #4]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 800551a:	42b5      	cmp	r5, r6
 800551c:	da0d      	bge.n	800553a <RVBS_CalcAvVbus+0x56>
      pHandle->index++;
 800551e:	9b01      	ldr	r3, [sp, #4]
 8005520:	3501      	adds	r5, #1
 8005522:	77dd      	strb	r5, [r3, #31]
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8005524:	0020      	movs	r0, r4
 8005526:	f7ff ffd1 	bl	80054cc <RVBS_CheckFaultState>
 800552a:	8120      	strh	r0, [r4, #8]
}
 800552c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      wtemp += pHandle->aBuffer[i];
 800552e:	0059      	lsls	r1, r3, #1
 8005530:	5a89      	ldrh	r1, [r1, r2]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8005532:	3301      	adds	r3, #1
      wtemp += pHandle->aBuffer[i];
 8005534:	1840      	adds	r0, r0, r1
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8005536:	b2db      	uxtb	r3, r3
 8005538:	e7e7      	b.n	800550a <RVBS_CalcAvVbus+0x26>
      pHandle->index = 0;
 800553a:	2300      	movs	r3, #0
 800553c:	9a01      	ldr	r2, [sp, #4]
 800553e:	77d3      	strb	r3, [r2, #31]
 8005540:	e7f0      	b.n	8005524 <RVBS_CalcAvVbus+0x40>
 8005542:	46c0      	nop			; (mov r8, r8)
 8005544:	0000ffff 	.word	0x0000ffff

08005548 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 8005548:	2300      	movs	r3, #0
{
 800554a:	b510      	push	{r4, lr}
  pHandle->Ext = 0;
 800554c:	6083      	str	r3, [r0, #8]
  pHandle->TargetFinal = 0;
 800554e:	6043      	str	r3, [r0, #4]
  pHandle->RampRemainingStep = 0u;
 8005550:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8005552:	6103      	str	r3, [r0, #16]
  pHandle->ScalingFactor = 1u;
 8005554:	3301      	adds	r3, #1
 8005556:	6143      	str	r3, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
 8005558:	3018      	adds	r0, #24
 800555a:	f000 fab9 	bl	8005ad0 <FD_Init>
#endif

}
 800555e:	bd10      	pop	{r4, pc}

08005560 <SPD_GetElAngle>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
 8005560:	2304      	movs	r3, #4
 8005562:	5ec0      	ldrsh	r0, [r0, r3]
}
 8005564:	4770      	bx	lr

08005566 <SPD_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
 8005566:	230c      	movs	r3, #12
 8005568:	5ec0      	ldrsh	r0, [r0, r3]
}
 800556a:	4770      	bx	lr

0800556c <SPD_GetInstElSpeedDpp>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
 800556c:	2310      	movs	r3, #16
 800556e:	5ec0      	ldrsh	r0, [r0, r3]
}
 8005570:	4770      	bx	lr

08005572 <SPD_IsMecSpeedReliable>:
  * @param  pMecSpeedUnit pointer to int16_t, used to return the rotor average
  *         mechanical speed (expressed in the unit defined by #SPEED_UNIT)
  * @retval none
  */
__weak bool SPD_IsMecSpeedReliable( SpeednPosFdbk_Handle_t * pHandle, int16_t * pMecSpeedUnit )
{
 8005572:	b570      	push	{r4, r5, r6, lr}
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8005574:	2200      	movs	r2, #0
 8005576:	5e89      	ldrsh	r1, [r1, r2]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8005578:	78c4      	ldrb	r4, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800557a:	7803      	ldrb	r3, [r0, #0]
  {
    hAux = -( *pMecSpeedUnit );
 800557c:	b28a      	uxth	r2, r1
  if ( *pMecSpeedUnit < 0 )
 800557e:	2900      	cmp	r1, #0
 8005580:	da01      	bge.n	8005586 <SPD_IsMecSpeedReliable+0x14>
    hAux = -( *pMecSpeedUnit );
 8005582:	4252      	negs	r2, r2
 8005584:	b292      	uxth	r2, r2
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8005586:	8ac6      	ldrh	r6, [r0, #22]
  {
    SpeedError = true;
 8005588:	2501      	movs	r5, #1
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 800558a:	8a81      	ldrh	r1, [r0, #20]
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 800558c:	4296      	cmp	r6, r2
 800558e:	d802      	bhi.n	8005596 <SPD_IsMecSpeedReliable+0x24>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8005590:	4291      	cmp	r1, r2
 8005592:	4192      	sbcs	r2, r2
 8005594:	4255      	negs	r5, r2
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 8005596:	2112      	movs	r1, #18
 8005598:	5e42      	ldrsh	r2, [r0, r1]
  {
    hAux = -( pHandle->hMecAccelUnitP );
 800559a:	b291      	uxth	r1, r2
  if ( pHandle->hMecAccelUnitP < 0 )
 800559c:	2a00      	cmp	r2, #0
 800559e:	da01      	bge.n	80055a4 <SPD_IsMecSpeedReliable+0x32>
    hAux = -( pHandle->hMecAccelUnitP );
 80055a0:	4249      	negs	r1, r1
 80055a2:	b289      	uxth	r1, r1
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 80055a4:	8b02      	ldrh	r2, [r0, #24]
 80055a6:	428a      	cmp	r2, r1
 80055a8:	d301      	bcc.n	80055ae <SPD_IsMecSpeedReliable+0x3c>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 80055aa:	2d00      	cmp	r5, #0
 80055ac:	d009      	beq.n	80055c2 <SPD_IsMecSpeedReliable+0x50>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 80055ae:	429c      	cmp	r4, r3
 80055b0:	d901      	bls.n	80055b6 <SPD_IsMecSpeedReliable+0x44>
    {
      bSpeedErrorNumber++;
 80055b2:	3301      	adds	r3, #1
 80055b4:	b2db      	uxtb	r3, r3
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 80055b6:	7003      	strb	r3, [r0, #0]
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
 80055b8:	1b18      	subs	r0, r3, r4
 80055ba:	1e42      	subs	r2, r0, #1
 80055bc:	4190      	sbcs	r0, r2

  return ( SpeedSensorReliability );
 80055be:	b2c0      	uxtb	r0, r0
}
 80055c0:	bd70      	pop	{r4, r5, r6, pc}
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 80055c2:	429c      	cmp	r4, r3
 80055c4:	d9f7      	bls.n	80055b6 <SPD_IsMecSpeedReliable+0x44>
      bSpeedErrorNumber = 0u;
 80055c6:	002b      	movs	r3, r5
 80055c8:	e7f5      	b.n	80055b6 <SPD_IsMecSpeedReliable+0x44>

080055ca <SPD_GetS16Speed>:
  *         -hMaxReliableMecSpeedUnit.
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
 80055ca:	0003      	movs	r3, r0
 80055cc:	b510      	push	{r4, lr}
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
 80055ce:	210c      	movs	r1, #12
 80055d0:	5e42      	ldrsh	r2, [r0, r1]
  wAux *= INT16_MAX;
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 80055d2:	2114      	movs	r1, #20
 80055d4:	5e59      	ldrsh	r1, [r3, r1]
  wAux *= INT16_MAX;
 80055d6:	03d0      	lsls	r0, r2, #15
 80055d8:	1a80      	subs	r0, r0, r2
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 80055da:	f7fa fe47 	bl	800026c <__divsi3>
  return ( int16_t )wAux;
 80055de:	b200      	sxth	r0, r0
}
 80055e0:	bd10      	pop	{r4, pc}

080055e2 <STC_Init>:
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
 80055e2:	0003      	movs	r3, r0
  pHandle->SPD = SPD_Handle;
 80055e4:	6142      	str	r2, [r0, #20]
  pHandle->PISpeed = pPI;
 80055e6:	6101      	str	r1, [r0, #16]
  pHandle->Mode = pHandle->ModeDefault;
 80055e8:	332a      	adds	r3, #42	; 0x2a
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	7003      	strb	r3, [r0, #0]
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 80055ee:	222c      	movs	r2, #44	; 0x2c
 80055f0:	5e83      	ldrsh	r3, [r0, r2]
 80055f2:	041b      	lsls	r3, r3, #16
 80055f4:	6043      	str	r3, [r0, #4]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 80055f6:	222e      	movs	r2, #46	; 0x2e
 80055f8:	5e83      	ldrsh	r3, [r0, r2]
 80055fa:	041b      	lsls	r3, r3, #16
 80055fc:	6083      	str	r3, [r0, #8]
  pHandle->TargetFinal = 0;
 80055fe:	2300      	movs	r3, #0
 8005600:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 8005602:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8005604:	6183      	str	r3, [r0, #24]
}
 8005606:	4770      	bx	lr

08005608 <STC_GetSpeedSensor>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
 8005608:	6940      	ldr	r0, [r0, #20]
}
 800560a:	4770      	bx	lr

0800560c <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 800560c:	7803      	ldrb	r3, [r0, #0]
{
 800560e:	b510      	push	{r4, lr}
  if ( pHandle->Mode == STC_SPEED_MODE )
 8005610:	2b01      	cmp	r3, #1
 8005612:	d103      	bne.n	800561c <STC_Clear+0x10>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8005614:	2100      	movs	r1, #0
 8005616:	6900      	ldr	r0, [r0, #16]
 8005618:	f7ff f9fb 	bl	8004a12 <PID_SetIntegralTerm>
  }
}
 800561c:	bd10      	pop	{r4, pc}

0800561e <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 800561e:	6842      	ldr	r2, [r0, #4]
 8005620:	17d0      	asrs	r0, r2, #31
 8005622:	b280      	uxth	r0, r0
 8005624:	1880      	adds	r0, r0, r2
 8005626:	1400      	asrs	r0, r0, #16
}
 8005628:	4770      	bx	lr

0800562a <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 800562a:	6882      	ldr	r2, [r0, #8]
 800562c:	17d0      	asrs	r0, r2, #31
 800562e:	b280      	uxth	r0, r0
 8005630:	1880      	adds	r0, r0, r2
 8005632:	1400      	asrs	r0, r0, #16
}
 8005634:	4770      	bx	lr

08005636 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8005636:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 8005638:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800563a:	60c3      	str	r3, [r0, #12]
}
 800563c:	4770      	bx	lr

0800563e <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 800563e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8005640:	7803      	ldrb	r3, [r0, #0]
{
 8005642:	0004      	movs	r4, r0
 8005644:	000d      	movs	r5, r1
 8005646:	0017      	movs	r7, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8005648:	2b00      	cmp	r3, #0
 800564a:	d108      	bne.n	800565e <STC_ExecRamp+0x20>
  {
    hCurrentReference = STC_GetTorqueRef( pHandle );
 800564c:	f7ff ffed 	bl	800562a <STC_GetTorqueRef>
#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
    {
      AllowedRange = false;
    }
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8005650:	2228      	movs	r2, #40	; 0x28
 8005652:	5ea3      	ldrsh	r3, [r4, r2]
    hCurrentReference = STC_GetTorqueRef( pHandle );
 8005654:	0006      	movs	r6, r0
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8005656:	42ab      	cmp	r3, r5
 8005658:	dd20      	ble.n	800569c <STC_ExecRamp+0x5e>
    {
      AllowedRange = false;
 800565a:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 800565c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 800565e:	6840      	ldr	r0, [r0, #4]
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8005660:	8be3      	ldrh	r3, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8005662:	17c6      	asrs	r6, r0, #31
 8005664:	b2b6      	uxth	r6, r6
 8005666:	1836      	adds	r6, r6, r0
 8005668:	1436      	asrs	r6, r6, #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800566a:	428b      	cmp	r3, r1
 800566c:	dbf5      	blt.n	800565a <STC_ExecRamp+0x1c>
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 800566e:	2224      	movs	r2, #36	; 0x24
 8005670:	5ea3      	ldrsh	r3, [r4, r2]
 8005672:	428b      	cmp	r3, r1
 8005674:	dcf1      	bgt.n	800565a <STC_ExecRamp+0x1c>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 8005676:	8c23      	ldrh	r3, [r4, #32]
 8005678:	428b      	cmp	r3, r1
 800567a:	dd03      	ble.n	8005684 <STC_ExecRamp+0x46>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 800567c:	2222      	movs	r2, #34	; 0x22
 800567e:	5ea3      	ldrsh	r3, [r4, r2]
  if ( AllowedRange == true )
 8005680:	42ab      	cmp	r3, r5
 8005682:	dbea      	blt.n	800565a <STC_ExecRamp+0x1c>
    if ( hDurationms == 0u )
 8005684:	2f00      	cmp	r7, #0
 8005686:	d10d      	bne.n	80056a4 <STC_ExecRamp+0x66>
      if ( pHandle->Mode == STC_SPEED_MODE )
 8005688:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 800568a:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 800568c:	2b01      	cmp	r3, #1
 800568e:	d107      	bne.n	80056a0 <STC_ExecRamp+0x62>
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8005690:	6065      	str	r5, [r4, #4]
      pHandle->RampRemainingStep = 0u;
 8005692:	2300      	movs	r3, #0
 8005694:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 8005696:	61a3      	str	r3, [r4, #24]
      pHandle->IncDecAmount = wAux1;
 8005698:	2001      	movs	r0, #1
 800569a:	e7df      	b.n	800565c <STC_ExecRamp+0x1e>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 800569c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800569e:	e7ef      	b.n	8005680 <STC_ExecRamp+0x42>
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 80056a0:	60a5      	str	r5, [r4, #8]
 80056a2:	e7f6      	b.n	8005692 <STC_ExecRamp+0x54>
      wAux /= 1000u;
 80056a4:	21fa      	movs	r1, #250	; 0xfa
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 80056a6:	8ba0      	ldrh	r0, [r4, #28]
      pHandle->TargetFinal = hTargetFinal;
 80056a8:	8065      	strh	r5, [r4, #2]
      wAux /= 1000u;
 80056aa:	0089      	lsls	r1, r1, #2
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 80056ac:	4378      	muls	r0, r7
      wAux /= 1000u;
 80056ae:	f7fa fd53 	bl	8000158 <__udivsi3>
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 80056b2:	1bad      	subs	r5, r5, r6
      pHandle->RampRemainingStep++;
 80056b4:	1c41      	adds	r1, r0, #1
 80056b6:	60e1      	str	r1, [r4, #12]
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 80056b8:	0428      	lsls	r0, r5, #16
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 80056ba:	f7fa fdd7 	bl	800026c <__divsi3>
      pHandle->IncDecAmount = wAux1;
 80056be:	61a0      	str	r0, [r4, #24]
 80056c0:	e7ea      	b.n	8005698 <STC_ExecRamp+0x5a>

080056c2 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 80056c2:	2300      	movs	r3, #0
 80056c4:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 80056c6:	6183      	str	r3, [r0, #24]
}
 80056c8:	4770      	bx	lr

080056ca <STC_CalcTorqueReference>:
  int16_t hTorqueReference = 0;
  int16_t hMeasuredSpeed;
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
 80056ca:	7802      	ldrb	r2, [r0, #0]
{
 80056cc:	b570      	push	{r4, r5, r6, lr}
 80056ce:	0004      	movs	r4, r0
  if ( pHandle->Mode == STC_TORQUE_MODE )
 80056d0:	2a00      	cmp	r2, #0
 80056d2:	d119      	bne.n	8005708 <STC_CalcTorqueReference+0x3e>
  {
    wCurrentReference = pHandle->TorqueRef;
 80056d4:	6886      	ldr	r6, [r0, #8]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 80056d6:	68e3      	ldr	r3, [r4, #12]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d917      	bls.n	800570c <STC_CalcTorqueReference+0x42>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 80056dc:	69a1      	ldr	r1, [r4, #24]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 80056de:	3b01      	subs	r3, #1
    wCurrentReference += pHandle->IncDecAmount;
 80056e0:	1876      	adds	r6, r6, r1
  }
  else if ( pHandle->RampRemainingStep == 1u )
  {
    /* Set the backup value of hTargetFinal. */
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
    pHandle->RampRemainingStep = 0u;
 80056e2:	60e3      	str	r3, [r4, #12]
  if ( pHandle->Mode == STC_SPEED_MODE )
  {
    /* Run the speed control loop */

    /* Compute speed error */
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 80056e4:	17f0      	asrs	r0, r6, #31
 80056e6:	b280      	uxth	r0, r0
 80056e8:	1980      	adds	r0, r0, r6
 80056ea:	1405      	asrs	r5, r0, #16
  if ( pHandle->Mode == STC_SPEED_MODE )
 80056ec:	2a01      	cmp	r2, #1
 80056ee:	d114      	bne.n	800571a <STC_CalcTorqueReference+0x50>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 80056f0:	6960      	ldr	r0, [r4, #20]
 80056f2:	f7ff ff38 	bl	8005566 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 80056f6:	1a28      	subs	r0, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 80056f8:	b201      	sxth	r1, r0
 80056fa:	6920      	ldr	r0, [r4, #16]
 80056fc:	f7ff f994 	bl	8004a28 <PI_Controller>

    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8005700:	0403      	lsls	r3, r0, #16
    pHandle->SpeedRefUnitExt = wCurrentReference;
 8005702:	6066      	str	r6, [r4, #4]
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8005704:	60a3      	str	r3, [r4, #8]
    pHandle->TorqueRef = wCurrentReference;
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
  }

  return hTorqueReference;
}
 8005706:	bd70      	pop	{r4, r5, r6, pc}
    wCurrentReference = pHandle->SpeedRefUnitExt;
 8005708:	6846      	ldr	r6, [r0, #4]
 800570a:	e7e4      	b.n	80056d6 <STC_CalcTorqueReference+0xc>
  else if ( pHandle->RampRemainingStep == 1u )
 800570c:	2b01      	cmp	r3, #1
 800570e:	d1e9      	bne.n	80056e4 <STC_CalcTorqueReference+0x1a>
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8005710:	2302      	movs	r3, #2
 8005712:	5ee6      	ldrsh	r6, [r4, r3]
    pHandle->RampRemainingStep = 0u;
 8005714:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8005716:	0436      	lsls	r6, r6, #16
    pHandle->RampRemainingStep = 0u;
 8005718:	e7e3      	b.n	80056e2 <STC_CalcTorqueReference+0x18>
    pHandle->TorqueRef = wCurrentReference;
 800571a:	60a6      	str	r6, [r4, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 800571c:	b228      	sxth	r0, r5
 800571e:	e7f2      	b.n	8005706 <STC_CalcTorqueReference+0x3c>

08005720 <STC_GetMecSpeedRefUnitDefault>:
  * @retval int16_t It returns the Default mechanical rotor speed. reference
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
 8005720:	232c      	movs	r3, #44	; 0x2c
 8005722:	5ec0      	ldrsh	r0, [r0, r3]
}
 8005724:	4770      	bx	lr

08005726 <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @brief  Returns the Application maximum positive value of rotor speed. Expressed in the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
 8005726:	8bc0      	ldrh	r0, [r0, #30]
}
 8005728:	4770      	bx	lr

0800572a <STC_GetMinAppNegativeMecSpeedUnit>:
  * @brief  Returns the Application minimum negative value of rotor speed. Expressed in the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
 800572a:	2324      	movs	r3, #36	; 0x24
 800572c:	5ec0      	ldrsh	r0, [r0, r3]
}
 800572e:	4770      	bx	lr

08005730 <STC_GetDefaultIqdref>:
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 8005730:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8005732:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8005734:	0412      	lsls	r2, r2, #16
 8005736:	b298      	uxth	r0, r3
{
 8005738:	b082      	sub	sp, #8
  return IqdRefDefault;
 800573a:	4310      	orrs	r0, r2
}
 800573c:	b002      	add	sp, #8
 800573e:	4770      	bx	lr

08005740 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8005740:	b510      	push	{r4, lr}
 8005742:	0004      	movs	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8005744:	6940      	ldr	r0, [r0, #20]
 8005746:	f7ff ff0e 	bl	8005566 <SPD_GetAvrgMecSpeedUnit>
 800574a:	0400      	lsls	r0, r0, #16
 800574c:	6060      	str	r0, [r4, #4]
}
 800574e:	bd10      	pop	{r4, pc}

08005750 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 8005750:	2300      	movs	r3, #0
 8005752:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 8005754:	8043      	strh	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
 8005756:	8083      	strh	r3, [r0, #4]
}
 8005758:	4770      	bx	lr

0800575a <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 800575a:	0003      	movs	r3, r0
 800575c:	b510      	push	{r4, lr}
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800575e:	885c      	ldrh	r4, [r3, #2]
  State_t LocalState =  pHandle->bState;
 8005760:	7800      	ldrb	r0, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8005762:	430c      	orrs	r4, r1
 8005764:	4394      	bics	r4, r2
 8005766:	0022      	movs	r2, r4
 8005768:	805c      	strh	r4, [r3, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 800576a:	889c      	ldrh	r4, [r3, #4]
 800576c:	4321      	orrs	r1, r4
 800576e:	8099      	strh	r1, [r3, #4]

  if ( LocalState == FAULT_NOW )
 8005770:	280a      	cmp	r0, #10
 8005772:	d104      	bne.n	800577e <STM_FaultProcessing+0x24>
  {
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 8005774:	2a00      	cmp	r2, #0
 8005776:	d101      	bne.n	800577c <STM_FaultProcessing+0x22>
    {
      pHandle->bState = FAULT_OVER;
 8005778:	3001      	adds	r0, #1
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
    {
      pHandle->bState = FAULT_NOW;
 800577a:	7018      	strb	r0, [r3, #0]
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 800577c:	bd10      	pop	{r4, pc}
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 800577e:	2a00      	cmp	r2, #0
 8005780:	d0fc      	beq.n	800577c <STM_FaultProcessing+0x22>
      pHandle->bState = FAULT_NOW;
 8005782:	200a      	movs	r0, #10
 8005784:	e7f9      	b.n	800577a <STM_FaultProcessing+0x20>
	...

08005788 <STM_NextState>:
{
 8005788:	0003      	movs	r3, r0
  switch ( bCurrentState )
 800578a:	7800      	ldrb	r0, [r0, #0]
{
 800578c:	b510      	push	{r4, lr}
  switch ( bCurrentState )
 800578e:	2814      	cmp	r0, #20
 8005790:	d80e      	bhi.n	80057b0 <STM_NextState+0x28>
 8005792:	f7fa fcc3 	bl	800011c <__gnu_thumb1_case_uqi>
 8005796:	281e      	.short	0x281e
 8005798:	61553d31 	.word	0x61553d31
 800579c:	69666331 	.word	0x69666331
 80057a0:	2f0b0d0d 	.word	0x2f0b0d0d
 80057a4:	49463a34 	.word	0x49463a34
 80057a8:	5d52      	.short	0x5d52
 80057aa:	4f          	.byte	0x4f
 80057ab:	00          	.byte	0x00
      if ( bState == IDLE )
 80057ac:	2900      	cmp	r1, #0
 80057ae:	d017      	beq.n	80057e0 <STM_NextState+0x58>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80057b0:	2202      	movs	r2, #2
 80057b2:	0008      	movs	r0, r1
 80057b4:	4390      	bics	r0, r2
 80057b6:	0002      	movs	r2, r0
 80057b8:	2000      	movs	r0, #0
 80057ba:	2a01      	cmp	r2, #1
 80057bc:	d012      	beq.n	80057e4 <STM_NextState+0x5c>
 80057be:	2000      	movs	r0, #0
 80057c0:	2907      	cmp	r1, #7
 80057c2:	d00f      	beq.n	80057e4 <STM_NextState+0x5c>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 80057c4:	2200      	movs	r2, #0
 80057c6:	2180      	movs	r1, #128	; 0x80
 80057c8:	0018      	movs	r0, r3
 80057ca:	f7ff ffc6 	bl	800575a <STM_FaultProcessing>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80057ce:	2000      	movs	r0, #0
  return ( bChangeState );
 80057d0:	e008      	b.n	80057e4 <STM_NextState+0x5c>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80057d2:	2202      	movs	r2, #2
 80057d4:	0008      	movs	r0, r1
 80057d6:	4390      	bics	r0, r2
 80057d8:	2801      	cmp	r0, #1
 80057da:	d001      	beq.n	80057e0 <STM_NextState+0x58>
           || ( bState == ICLWAIT ) )
 80057dc:	290c      	cmp	r1, #12
 80057de:	d1ee      	bne.n	80057be <STM_NextState+0x36>
    pHandle->bState = bNewState;
 80057e0:	2001      	movs	r0, #1
 80057e2:	7019      	strb	r1, [r3, #0]
}
 80057e4:	bd10      	pop	{r4, pc}
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 80057e6:	2907      	cmp	r1, #7
 80057e8:	d0fa      	beq.n	80057e0 <STM_NextState+0x58>
 80057ea:	000a      	movs	r2, r1
 80057ec:	3a0d      	subs	r2, #13
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 80057ee:	2a01      	cmp	r2, #1
 80057f0:	d8de      	bhi.n	80057b0 <STM_NextState+0x28>
 80057f2:	e7f5      	b.n	80057e0 <STM_NextState+0x58>
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 80057f4:	290e      	cmp	r1, #14
 80057f6:	d0f3      	beq.n	80057e0 <STM_NextState+0x58>
      if ( bState == ANY_STOP )
 80057f8:	2907      	cmp	r1, #7
 80057fa:	d1d9      	bne.n	80057b0 <STM_NextState+0x28>
 80057fc:	e7f0      	b.n	80057e0 <STM_NextState+0x58>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 80057fe:	2208      	movs	r2, #8
 8005800:	0008      	movs	r0, r1
 8005802:	4390      	bics	r0, r2
 8005804:	2807      	cmp	r0, #7
 8005806:	d1d3      	bne.n	80057b0 <STM_NextState+0x28>
 8005808:	e7ea      	b.n	80057e0 <STM_NextState+0x58>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 800580a:	2902      	cmp	r1, #2
 800580c:	d1f4      	bne.n	80057f8 <STM_NextState+0x70>
 800580e:	e7e7      	b.n	80057e0 <STM_NextState+0x58>
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 8005810:	2911      	cmp	r1, #17
 8005812:	d8d7      	bhi.n	80057c4 <STM_NextState+0x3c>
 8005814:	4a17      	ldr	r2, [pc, #92]	; (8005874 <STM_NextState+0xec>)
 8005816:	40ca      	lsrs	r2, r1
 8005818:	07d2      	lsls	r2, r2, #31
 800581a:	d4e1      	bmi.n	80057e0 <STM_NextState+0x58>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800581c:	2903      	cmp	r1, #3
 800581e:	d0d6      	beq.n	80057ce <STM_NextState+0x46>
 8005820:	e7d0      	b.n	80057c4 <STM_NextState+0x3c>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8005822:	2911      	cmp	r1, #17
 8005824:	d1e8      	bne.n	80057f8 <STM_NextState+0x70>
 8005826:	e7db      	b.n	80057e0 <STM_NextState+0x58>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 8005828:	000a      	movs	r2, r1
 800582a:	20fd      	movs	r0, #253	; 0xfd
 800582c:	3a12      	subs	r2, #18
 800582e:	4202      	tst	r2, r0
 8005830:	d1e2      	bne.n	80057f8 <STM_NextState+0x70>
 8005832:	e7d5      	b.n	80057e0 <STM_NextState+0x58>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 8005834:	2912      	cmp	r1, #18
 8005836:	d1df      	bne.n	80057f8 <STM_NextState+0x70>
 8005838:	e7d2      	b.n	80057e0 <STM_NextState+0x58>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 800583a:	2904      	cmp	r1, #4
 800583c:	d1dc      	bne.n	80057f8 <STM_NextState+0x70>
 800583e:	e7cf      	b.n	80057e0 <STM_NextState+0x58>
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8005840:	2913      	cmp	r1, #19
 8005842:	d0cd      	beq.n	80057e0 <STM_NextState+0x58>
 8005844:	2202      	movs	r2, #2
 8005846:	0008      	movs	r0, r1
 8005848:	4390      	bics	r0, r2
 800584a:	2805      	cmp	r0, #5
 800584c:	d1b0      	bne.n	80057b0 <STM_NextState+0x28>
 800584e:	e7c7      	b.n	80057e0 <STM_NextState+0x58>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8005850:	1f0a      	subs	r2, r1, #4
 8005852:	2a01      	cmp	r2, #1
 8005854:	d8d0      	bhi.n	80057f8 <STM_NextState+0x70>
 8005856:	e7c3      	b.n	80057e0 <STM_NextState+0x58>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 8005858:	1f8a      	subs	r2, r1, #6
 800585a:	e7c8      	b.n	80057ee <STM_NextState+0x66>
      if ( bState == STOP )
 800585c:	2908      	cmp	r1, #8
 800585e:	d1a7      	bne.n	80057b0 <STM_NextState+0x28>
 8005860:	e7be      	b.n	80057e0 <STM_NextState+0x58>
      if ( bState == STOP_IDLE )
 8005862:	2909      	cmp	r1, #9
 8005864:	d1a4      	bne.n	80057b0 <STM_NextState+0x28>
 8005866:	e7bb      	b.n	80057e0 <STM_NextState+0x58>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 8005868:	2900      	cmp	r1, #0
 800586a:	d0b9      	beq.n	80057e0 <STM_NextState+0x58>
 800586c:	290c      	cmp	r1, #12
 800586e:	d19f      	bne.n	80057b0 <STM_NextState+0x28>
 8005870:	e7b6      	b.n	80057e0 <STM_NextState+0x58>
 8005872:	46c0      	nop			; (mov r8, r8)
 8005874:	00030092 	.word	0x00030092

08005878 <STM_GetState>:
  * @param  pHanlde pointer of type  STM_Handle_t
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
 8005878:	7800      	ldrb	r0, [r0, #0]
}
 800587a:	4770      	bx	lr

0800587c <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 800587c:	7802      	ldrb	r2, [r0, #0]
{
 800587e:	0003      	movs	r3, r0
 8005880:	2000      	movs	r0, #0
  if ( pHandle->bState == FAULT_OVER )
 8005882:	2a0b      	cmp	r2, #11
 8005884:	d103      	bne.n	800588e <STM_FaultAcknowledged+0x12>
  {
    pHandle->bState = STOP_IDLE;
 8005886:	3a02      	subs	r2, #2
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8005888:	8098      	strh	r0, [r3, #4]
    pHandle->bState = STOP_IDLE;
 800588a:	701a      	strb	r2, [r3, #0]
    bToBeReturned = true;
 800588c:	3001      	adds	r0, #1
  }

  return ( bToBeReturned );
}
 800588e:	4770      	bx	lr

08005890 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 8005890:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 8005892:	8840      	ldrh	r0, [r0, #2]
 8005894:	0400      	lsls	r0, r0, #16
 8005896:	4318      	orrs	r0, r3

  return LocalFaultState;
}
 8005898:	4770      	bx	lr

0800589a <UFCP_Init>:
static const uint16_t UFCP_Usart_Timeout_stop = 2;

/* Functions ---------------------------------------------------------*/

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{
 800589a:	b510      	push	{r4, lr}

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 800589c:	f7fe fc83 	bl	80041a6 <FCP_Init>
}
 80058a0:	bd10      	pop	{r4, pc}

080058a2 <UFCP_TX_IRQ_Handler>:

/*
 *
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
 80058a2:	b570      	push	{r4, r5, r6, lr}
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 80058a4:	0004      	movs	r4, r0
 80058a6:	3497      	adds	r4, #151	; 0x97
 80058a8:	7823      	ldrb	r3, [r4, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d017      	beq.n	80058de <UFCP_TX_IRQ_Handler+0x3c>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 80058ae:	0005      	movs	r5, r0
 80058b0:	3598      	adds	r5, #152	; 0x98
      case 0:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
        break;

      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 80058b2:	7d42      	ldrb	r2, [r0, #21]
    switch ( pBaseHandle->TxFrameLevel )
 80058b4:	782b      	ldrb	r3, [r5, #0]
        break;

      default:
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 80058b6:	1c56      	adds	r6, r2, #1
    switch ( pBaseHandle->TxFrameLevel )
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d007      	beq.n	80058cc <UFCP_TX_IRQ_Handler+0x2a>
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 80058bc:	b292      	uxth	r2, r2
    switch ( pBaseHandle->TxFrameLevel )
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d005      	beq.n	80058ce <UFCP_TX_IRQ_Handler+0x2c>
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 80058c2:	42b3      	cmp	r3, r6
 80058c4:	dc0c      	bgt.n	80058e0 <UFCP_TX_IRQ_Handler+0x3e>
        {
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 80058c6:	18c2      	adds	r2, r0, r3
 80058c8:	7d12      	ldrb	r2, [r2, #20]
 80058ca:	e000      	b.n	80058ce <UFCP_TX_IRQ_Handler+0x2c>
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 80058cc:	7d02      	ldrb	r2, [r0, #20]
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 80058ce:	0001      	movs	r1, r0
 80058d0:	31fc      	adds	r1, #252	; 0xfc
 80058d2:	6a49      	ldr	r1, [r1, #36]	; 0x24
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 80058d4:	850a      	strh	r2, [r1, #40]	; 0x28

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 80058d6:	42b3      	cmp	r3, r6
 80058d8:	dc06      	bgt.n	80058e8 <UFCP_TX_IRQ_Handler+0x46>
    {
      pBaseHandle->TxFrameLevel++;
 80058da:	3301      	adds	r3, #1
 80058dc:	702b      	strb	r3, [r5, #0]

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 80058de:	bd70      	pop	{r4, r5, r6, pc}
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
 80058e0:	0002      	movs	r2, r0
 80058e2:	3296      	adds	r2, #150	; 0x96
 80058e4:	7812      	ldrb	r2, [r2, #0]
 80058e6:	e7f2      	b.n	80058ce <UFCP_TX_IRQ_Handler+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058e8:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ec:	2301      	movs	r3, #1
 80058ee:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80058f2:	2580      	movs	r5, #128	; 0x80
 80058f4:	680b      	ldr	r3, [r1, #0]
 80058f6:	43ab      	bics	r3, r5
 80058f8:	600b      	str	r3, [r1, #0]
 80058fa:	f382 8810 	msr	PRIMASK, r2
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 80058fe:	2300      	movs	r3, #0
 8005900:	7023      	strb	r3, [r4, #0]
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8005902:	c809      	ldmia	r0, {r0, r3}
 8005904:	4798      	blx	r3
}
 8005906:	e7ea      	b.n	80058de <UFCP_TX_IRQ_Handler+0x3c>

08005908 <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8005908:	0002      	movs	r2, r0
 800590a:	32ff      	adds	r2, #255	; 0xff
 800590c:	7f52      	ldrb	r2, [r2, #29]
{
 800590e:	0003      	movs	r3, r0
 8005910:	2001      	movs	r0, #1
  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8005912:	2a00      	cmp	r2, #0
 8005914:	d10f      	bne.n	8005936 <UFCP_Receive+0x2e>
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;

    pHandle->RxFrameLevel = 0;
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 8005916:	001a      	movs	r2, r3
 8005918:	32fe      	adds	r2, #254	; 0xfe
 800591a:	83d0      	strh	r0, [r2, #30]

    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 800591c:	33fc      	adds	r3, #252	; 0xfc
 800591e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005920:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005924:	f380 8810 	msr	PRIMASK, r0
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8005928:	2320      	movs	r3, #32
 800592a:	6810      	ldr	r0, [r2, #0]
 800592c:	4303      	orrs	r3, r0
 800592e:	6013      	str	r3, [r2, #0]
 8005930:	f381 8810 	msr	PRIMASK, r1
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 8005934:	2002      	movs	r0, #2
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
  }

  return ret_val;
}
 8005936:	4770      	bx	lr

08005938 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 8005938:	b570      	push	{r4, r5, r6, lr}
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 800593a:	0005      	movs	r5, r0
 800593c:	3597      	adds	r5, #151	; 0x97
{
 800593e:	000e      	movs	r6, r1
  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8005940:	7829      	ldrb	r1, [r5, #0]
{
 8005942:	0004      	movs	r4, r0
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8005944:	2001      	movs	r0, #1
  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8005946:	2900      	cmp	r1, #0
 8005948:	d11d      	bne.n	8005986 <UFCP_Send+0x4e>
    while ( size-- ) *dest++ = *buffer++;
 800594a:	0020      	movs	r0, r4
    pHandle->TxFrame.Code = code;
 800594c:	7526      	strb	r6, [r4, #20]
    pHandle->TxFrame.Size = size;
 800594e:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 8005950:	3016      	adds	r0, #22
 8005952:	4299      	cmp	r1, r3
 8005954:	d118      	bne.n	8005988 <UFCP_Send+0x50>
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8005956:	0020      	movs	r0, r4
 8005958:	3014      	adds	r0, #20
 800595a:	f7fe fc39 	bl	80041d0 <FCP_CalcCRC>
 800595e:	0023      	movs	r3, r4
    pHandle->TxFrameLevel = 0;
 8005960:	2200      	movs	r2, #0
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8005962:	3396      	adds	r3, #150	; 0x96
 8005964:	7018      	strb	r0, [r3, #0]
    pHandle->TxFrameLevel = 0;
 8005966:	709a      	strb	r2, [r3, #2]
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8005968:	2301      	movs	r3, #1
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 800596a:	34fc      	adds	r4, #252	; 0xfc
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 800596c:	702b      	strb	r3, [r5, #0]
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 800596e:	6a62      	ldr	r2, [r4, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005970:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005974:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8005978:	6810      	ldr	r0, [r2, #0]
 800597a:	337f      	adds	r3, #127	; 0x7f
 800597c:	4303      	orrs	r3, r0
 800597e:	6013      	str	r3, [r2, #0]
 8005980:	f381 8810 	msr	PRIMASK, r1
 8005984:	2002      	movs	r0, #2
  }

  return ret_val;
}
 8005986:	bd70      	pop	{r4, r5, r6, pc}
    while ( size-- ) *dest++ = *buffer++;
 8005988:	5c56      	ldrb	r6, [r2, r1]
 800598a:	5446      	strb	r6, [r0, r1]
 800598c:	3101      	adds	r1, #1
 800598e:	e7e0      	b.n	8005952 <UFCP_Send+0x1a>

08005990 <UFCP_RX_IRQ_Handler>:
{
 8005990:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8005992:	0005      	movs	r5, r0
 8005994:	35ff      	adds	r5, #255	; 0xff
 8005996:	7f6b      	ldrb	r3, [r5, #29]
{
 8005998:	0004      	movs	r4, r0
 800599a:	b085      	sub	sp, #20
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 800599c:	2b00      	cmp	r3, #0
 800599e:	d101      	bne.n	80059a4 <UFCP_RX_IRQ_Handler+0x14>
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 80059a0:	482b      	ldr	r0, [pc, #172]	; (8005a50 <UFCP_RX_IRQ_Handler+0xc0>)
 80059a2:	e018      	b.n	80059d6 <UFCP_RX_IRQ_Handler+0x46>
    switch ( pBaseHandle->RxFrameLevel )
 80059a4:	7fab      	ldrb	r3, [r5, #30]
    uint8_t rx_byte = (uint8_t) rx_data;
 80059a6:	b2ca      	uxtb	r2, r1
    switch ( pBaseHandle->RxFrameLevel )
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00c      	beq.n	80059c6 <UFCP_RX_IRQ_Handler+0x36>
 80059ac:	0006      	movs	r6, r0
 80059ae:	369a      	adds	r6, #154	; 0x9a
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d012      	beq.n	80059da <UFCP_RX_IRQ_Handler+0x4a>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 80059b4:	7831      	ldrb	r1, [r6, #0]
 80059b6:	3101      	adds	r1, #1
 80059b8:	428b      	cmp	r3, r1
 80059ba:	dc16      	bgt.n	80059ea <UFCP_RX_IRQ_Handler+0x5a>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 80059bc:	18c4      	adds	r4, r0, r3
 80059be:	3499      	adds	r4, #153	; 0x99
 80059c0:	7022      	strb	r2, [r4, #0]
          pBaseHandle->RxFrameLevel++;
 80059c2:	3301      	adds	r3, #1
 80059c4:	e00d      	b.n	80059e2 <UFCP_RX_IRQ_Handler+0x52>
        pBaseHandle->RxFrame.Code = rx_byte;
 80059c6:	0003      	movs	r3, r0
 80059c8:	3399      	adds	r3, #153	; 0x99
 80059ca:	701a      	strb	r2, [r3, #0]
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 80059cc:	8a03      	ldrh	r3, [r0, #16]
 80059ce:	8243      	strh	r3, [r0, #18]
        pBaseHandle->RxFrameLevel++;
 80059d0:	2301      	movs	r3, #1
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 80059d2:	4820      	ldr	r0, [pc, #128]	; (8005a54 <UFCP_RX_IRQ_Handler+0xc4>)
        pBaseHandle->RxFrameLevel++;
 80059d4:	77ab      	strb	r3, [r5, #30]
}
 80059d6:	b005      	add	sp, #20
 80059d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pBaseHandle->RxFrame.Size = rx_byte;
 80059da:	7032      	strb	r2, [r6, #0]
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 80059dc:	060b      	lsls	r3, r1, #24
 80059de:	d402      	bmi.n	80059e6 <UFCP_RX_IRQ_Handler+0x56>
        pBaseHandle->RxFrameLevel++;
 80059e0:	2302      	movs	r3, #2
          pBaseHandle->RxFrameLevel++;
 80059e2:	77ab      	strb	r3, [r5, #30]
 80059e4:	e7dc      	b.n	80059a0 <UFCP_RX_IRQ_Handler+0x10>
          pBaseHandle->RxFrameLevel =0 ;
 80059e6:	2300      	movs	r3, #0
 80059e8:	e7fb      	b.n	80059e2 <UFCP_RX_IRQ_Handler+0x52>
          pBaseHandle->RxTimeoutCountdown = 0;
 80059ea:	2300      	movs	r3, #0
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 80059ec:	772a      	strb	r2, [r5, #28]
          pBaseHandle->RxTimeoutCountdown = 0;
 80059ee:	8243      	strh	r3, [r0, #18]
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 80059f0:	0003      	movs	r3, r0
 80059f2:	33fc      	adds	r3, #252	; 0xfc
 80059f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059f6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059fa:	2701      	movs	r7, #1
 80059fc:	f387 8810 	msr	PRIMASK, r7
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8005a00:	680b      	ldr	r3, [r1, #0]
 8005a02:	001a      	movs	r2, r3
 8005a04:	2320      	movs	r3, #32
 8005a06:	439a      	bics	r2, r3
 8005a08:	600a      	str	r2, [r1, #0]
 8005a0a:	f380 8810 	msr	PRIMASK, r0
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	776b      	strb	r3, [r5, #29]
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8005a12:	0023      	movs	r3, r4
 8005a14:	3399      	adds	r3, #153	; 0x99
 8005a16:	0018      	movs	r0, r3
 8005a18:	9301      	str	r3, [sp, #4]
 8005a1a:	f7fe fbd9 	bl	80041d0 <FCP_CalcCRC>
 8005a1e:	7f2b      	ldrb	r3, [r5, #28]
 8005a20:	4d0d      	ldr	r5, [pc, #52]	; (8005a58 <UFCP_RX_IRQ_Handler+0xc8>)
 8005a22:	4283      	cmp	r3, r0
 8005a24:	d109      	bne.n	8005a3a <UFCP_RX_IRQ_Handler+0xaa>
                                                      pBaseHandle->RxFrame.Buffer,
 8005a26:	0022      	movs	r2, r4
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 8005a28:	9901      	ldr	r1, [sp, #4]
 8005a2a:	7833      	ldrb	r3, [r6, #0]
 8005a2c:	7809      	ldrb	r1, [r1, #0]
 8005a2e:	68a6      	ldr	r6, [r4, #8]
 8005a30:	6820      	ldr	r0, [r4, #0]
                                                      pBaseHandle->RxFrame.Buffer,
 8005a32:	329b      	adds	r2, #155	; 0x9b
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 8005a34:	47b0      	blx	r6
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8005a36:	0028      	movs	r0, r5
  return ret_val;
 8005a38:	e7cd      	b.n	80059d6 <UFCP_RX_IRQ_Handler+0x46>
            error_code = FCP_MSG_RX_BAD_CRC;
 8005a3a:	ab02      	add	r3, sp, #8
 8005a3c:	1dda      	adds	r2, r3, #7
 8005a3e:	230a      	movs	r3, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8005a40:	21ff      	movs	r1, #255	; 0xff
            error_code = FCP_MSG_RX_BAD_CRC;
 8005a42:	7013      	strb	r3, [r2, #0]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8005a44:	0020      	movs	r0, r4
 8005a46:	003b      	movs	r3, r7
 8005a48:	f7ff ff76 	bl	8005938 <UFCP_Send>
 8005a4c:	e7f3      	b.n	8005a36 <UFCP_RX_IRQ_Handler+0xa6>
 8005a4e:	46c0      	nop			; (mov r8, r8)
 8005a50:	08006726 	.word	0x08006726
 8005a54:	08006728 	.word	0x08006728
 8005a58:	0800672a 	.word	0x0800672a

08005a5c <UFCP_OVR_IRQ_Handler>:
{
 8005a5c:	b507      	push	{r0, r1, r2, lr}
  error_code = UFCP_MSG_OVERRUN;
 8005a5e:	466b      	mov	r3, sp
 8005a60:	1dda      	adds	r2, r3, #7
 8005a62:	2308      	movs	r3, #8
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8005a64:	21ff      	movs	r1, #255	; 0xff
  error_code = UFCP_MSG_OVERRUN;
 8005a66:	7013      	strb	r3, [r2, #0]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8005a68:	3b07      	subs	r3, #7
 8005a6a:	f7ff ff65 	bl	8005938 <UFCP_Send>
}
 8005a6e:	bd07      	pop	{r0, r1, r2, pc}

08005a70 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8005a70:	2300      	movs	r3, #0
 8005a72:	30ff      	adds	r0, #255	; 0xff
 8005a74:	7743      	strb	r3, [r0, #29]
}
 8005a76:	4770      	bx	lr

08005a78 <RUC_SetPhaseDurationms>:
 8005a78:	004b      	lsls	r3, r1, #1
 8005a7a:	1859      	adds	r1, r3, r1
 8005a7c:	0089      	lsls	r1, r1, #2
 8005a7e:	1841      	adds	r1, r0, r1
 8005a80:	818a      	strh	r2, [r1, #12]
 8005a82:	4770      	bx	lr

08005a84 <RUC_SetPhaseFinalMecSpeedUnit>:
 8005a84:	004b      	lsls	r3, r1, #1
 8005a86:	1859      	adds	r1, r3, r1
 8005a88:	0089      	lsls	r1, r1, #2
 8005a8a:	1841      	adds	r1, r0, r1
 8005a8c:	81ca      	strh	r2, [r1, #14]
 8005a8e:	4770      	bx	lr

08005a90 <RUC_SetPhaseFinalTorque>:
 8005a90:	004b      	lsls	r3, r1, #1
 8005a92:	1859      	adds	r1, r3, r1
 8005a94:	0089      	lsls	r1, r1, #2
 8005a96:	1841      	adds	r1, r0, r1
 8005a98:	820a      	strh	r2, [r1, #16]
 8005a9a:	4770      	bx	lr

08005a9c <RUC_GetPhaseDurationms>:
 8005a9c:	004b      	lsls	r3, r1, #1
 8005a9e:	1859      	adds	r1, r3, r1
 8005aa0:	0089      	lsls	r1, r1, #2
 8005aa2:	1841      	adds	r1, r0, r1
 8005aa4:	8988      	ldrh	r0, [r1, #12]
 8005aa6:	4770      	bx	lr

08005aa8 <RUC_GetPhaseFinalMecSpeedUnit>:
 8005aa8:	004b      	lsls	r3, r1, #1
 8005aaa:	1859      	adds	r1, r3, r1
 8005aac:	0089      	lsls	r1, r1, #2
 8005aae:	1841      	adds	r1, r0, r1
 8005ab0:	230e      	movs	r3, #14
 8005ab2:	5ec8      	ldrsh	r0, [r1, r3]
 8005ab4:	4770      	bx	lr
 8005ab6:	46c0      	nop			; (mov r8, r8)

08005ab8 <RUC_GetPhaseFinalTorque>:
 8005ab8:	004b      	lsls	r3, r1, #1
 8005aba:	1859      	adds	r1, r3, r1
 8005abc:	0089      	lsls	r1, r1, #2
 8005abe:	1841      	adds	r1, r0, r1
 8005ac0:	2310      	movs	r3, #16
 8005ac2:	5ec8      	ldrsh	r0, [r1, r3]
 8005ac4:	4770      	bx	lr
 8005ac6:	46c0      	nop			; (mov r8, r8)

08005ac8 <RUC_GetNumberOfPhases>:
 8005ac8:	2348      	movs	r3, #72	; 0x48
 8005aca:	5cc0      	ldrb	r0, [r0, r3]
 8005acc:	4770      	bx	lr
 8005ace:	46c0      	nop			; (mov r8, r8)

08005ad0 <FD_Init>:
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	7003      	strb	r3, [r0, #0]
 8005ad4:	6043      	str	r3, [r0, #4]
 8005ad6:	6083      	str	r3, [r0, #8]
 8005ad8:	60c3      	str	r3, [r0, #12]
 8005ada:	6103      	str	r3, [r0, #16]
 8005adc:	6143      	str	r3, [r0, #20]
 8005ade:	6183      	str	r3, [r0, #24]
 8005ae0:	61c3      	str	r3, [r0, #28]
 8005ae2:	6203      	str	r3, [r0, #32]
 8005ae4:	6243      	str	r3, [r0, #36]	; 0x24
 8005ae6:	6283      	str	r3, [r0, #40]	; 0x28
 8005ae8:	62c3      	str	r3, [r0, #44]	; 0x2c
 8005aea:	6303      	str	r3, [r0, #48]	; 0x30
 8005aec:	6343      	str	r3, [r0, #52]	; 0x34
 8005aee:	6383      	str	r3, [r0, #56]	; 0x38
 8005af0:	63c3      	str	r3, [r0, #60]	; 0x3c
 8005af2:	4770      	bx	lr

08005af4 <__errno>:
 8005af4:	4b01      	ldr	r3, [pc, #4]	; (8005afc <__errno+0x8>)
 8005af6:	6818      	ldr	r0, [r3, #0]
 8005af8:	4770      	bx	lr
 8005afa:	46c0      	nop			; (mov r8, r8)
 8005afc:	20000628 	.word	0x20000628

08005b00 <__libc_init_array>:
 8005b00:	b570      	push	{r4, r5, r6, lr}
 8005b02:	2600      	movs	r6, #0
 8005b04:	4d0c      	ldr	r5, [pc, #48]	; (8005b38 <__libc_init_array+0x38>)
 8005b06:	4c0d      	ldr	r4, [pc, #52]	; (8005b3c <__libc_init_array+0x3c>)
 8005b08:	1b64      	subs	r4, r4, r5
 8005b0a:	10a4      	asrs	r4, r4, #2
 8005b0c:	42a6      	cmp	r6, r4
 8005b0e:	d109      	bne.n	8005b24 <__libc_init_array+0x24>
 8005b10:	2600      	movs	r6, #0
 8005b12:	f000 fc8b 	bl	800642c <_init>
 8005b16:	4d0a      	ldr	r5, [pc, #40]	; (8005b40 <__libc_init_array+0x40>)
 8005b18:	4c0a      	ldr	r4, [pc, #40]	; (8005b44 <__libc_init_array+0x44>)
 8005b1a:	1b64      	subs	r4, r4, r5
 8005b1c:	10a4      	asrs	r4, r4, #2
 8005b1e:	42a6      	cmp	r6, r4
 8005b20:	d105      	bne.n	8005b2e <__libc_init_array+0x2e>
 8005b22:	bd70      	pop	{r4, r5, r6, pc}
 8005b24:	00b3      	lsls	r3, r6, #2
 8005b26:	58eb      	ldr	r3, [r5, r3]
 8005b28:	4798      	blx	r3
 8005b2a:	3601      	adds	r6, #1
 8005b2c:	e7ee      	b.n	8005b0c <__libc_init_array+0xc>
 8005b2e:	00b3      	lsls	r3, r6, #2
 8005b30:	58eb      	ldr	r3, [r5, r3]
 8005b32:	4798      	blx	r3
 8005b34:	3601      	adds	r6, #1
 8005b36:	e7f2      	b.n	8005b1e <__libc_init_array+0x1e>
 8005b38:	08006760 	.word	0x08006760
 8005b3c:	08006760 	.word	0x08006760
 8005b40:	08006760 	.word	0x08006760
 8005b44:	08006764 	.word	0x08006764

08005b48 <memcpy>:
 8005b48:	2300      	movs	r3, #0
 8005b4a:	b510      	push	{r4, lr}
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d100      	bne.n	8005b52 <memcpy+0xa>
 8005b50:	bd10      	pop	{r4, pc}
 8005b52:	5ccc      	ldrb	r4, [r1, r3]
 8005b54:	54c4      	strb	r4, [r0, r3]
 8005b56:	3301      	adds	r3, #1
 8005b58:	e7f8      	b.n	8005b4c <memcpy+0x4>

08005b5a <memset>:
 8005b5a:	0003      	movs	r3, r0
 8005b5c:	1882      	adds	r2, r0, r2
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d100      	bne.n	8005b64 <memset+0xa>
 8005b62:	4770      	bx	lr
 8005b64:	7019      	strb	r1, [r3, #0]
 8005b66:	3301      	adds	r3, #1
 8005b68:	e7f9      	b.n	8005b5e <memset+0x4>
	...

08005b6c <siprintf>:
 8005b6c:	b40e      	push	{r1, r2, r3}
 8005b6e:	b500      	push	{lr}
 8005b70:	490b      	ldr	r1, [pc, #44]	; (8005ba0 <siprintf+0x34>)
 8005b72:	b09c      	sub	sp, #112	; 0x70
 8005b74:	ab1d      	add	r3, sp, #116	; 0x74
 8005b76:	9002      	str	r0, [sp, #8]
 8005b78:	9006      	str	r0, [sp, #24]
 8005b7a:	9107      	str	r1, [sp, #28]
 8005b7c:	9104      	str	r1, [sp, #16]
 8005b7e:	4809      	ldr	r0, [pc, #36]	; (8005ba4 <siprintf+0x38>)
 8005b80:	4909      	ldr	r1, [pc, #36]	; (8005ba8 <siprintf+0x3c>)
 8005b82:	cb04      	ldmia	r3!, {r2}
 8005b84:	9105      	str	r1, [sp, #20]
 8005b86:	6800      	ldr	r0, [r0, #0]
 8005b88:	a902      	add	r1, sp, #8
 8005b8a:	9301      	str	r3, [sp, #4]
 8005b8c:	f000 f870 	bl	8005c70 <_svfiprintf_r>
 8005b90:	2300      	movs	r3, #0
 8005b92:	9a02      	ldr	r2, [sp, #8]
 8005b94:	7013      	strb	r3, [r2, #0]
 8005b96:	b01c      	add	sp, #112	; 0x70
 8005b98:	bc08      	pop	{r3}
 8005b9a:	b003      	add	sp, #12
 8005b9c:	4718      	bx	r3
 8005b9e:	46c0      	nop			; (mov r8, r8)
 8005ba0:	7fffffff 	.word	0x7fffffff
 8005ba4:	20000628 	.word	0x20000628
 8005ba8:	ffff0208 	.word	0xffff0208

08005bac <__ssputs_r>:
 8005bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bae:	688e      	ldr	r6, [r1, #8]
 8005bb0:	b085      	sub	sp, #20
 8005bb2:	0007      	movs	r7, r0
 8005bb4:	000c      	movs	r4, r1
 8005bb6:	9203      	str	r2, [sp, #12]
 8005bb8:	9301      	str	r3, [sp, #4]
 8005bba:	429e      	cmp	r6, r3
 8005bbc:	d83c      	bhi.n	8005c38 <__ssputs_r+0x8c>
 8005bbe:	2390      	movs	r3, #144	; 0x90
 8005bc0:	898a      	ldrh	r2, [r1, #12]
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	421a      	tst	r2, r3
 8005bc6:	d034      	beq.n	8005c32 <__ssputs_r+0x86>
 8005bc8:	6909      	ldr	r1, [r1, #16]
 8005bca:	6823      	ldr	r3, [r4, #0]
 8005bcc:	6960      	ldr	r0, [r4, #20]
 8005bce:	1a5b      	subs	r3, r3, r1
 8005bd0:	9302      	str	r3, [sp, #8]
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	4343      	muls	r3, r0
 8005bd6:	0fdd      	lsrs	r5, r3, #31
 8005bd8:	18ed      	adds	r5, r5, r3
 8005bda:	9b01      	ldr	r3, [sp, #4]
 8005bdc:	9802      	ldr	r0, [sp, #8]
 8005bde:	3301      	adds	r3, #1
 8005be0:	181b      	adds	r3, r3, r0
 8005be2:	106d      	asrs	r5, r5, #1
 8005be4:	42ab      	cmp	r3, r5
 8005be6:	d900      	bls.n	8005bea <__ssputs_r+0x3e>
 8005be8:	001d      	movs	r5, r3
 8005bea:	0553      	lsls	r3, r2, #21
 8005bec:	d532      	bpl.n	8005c54 <__ssputs_r+0xa8>
 8005bee:	0029      	movs	r1, r5
 8005bf0:	0038      	movs	r0, r7
 8005bf2:	f000 fb49 	bl	8006288 <_malloc_r>
 8005bf6:	1e06      	subs	r6, r0, #0
 8005bf8:	d109      	bne.n	8005c0e <__ssputs_r+0x62>
 8005bfa:	230c      	movs	r3, #12
 8005bfc:	603b      	str	r3, [r7, #0]
 8005bfe:	2340      	movs	r3, #64	; 0x40
 8005c00:	2001      	movs	r0, #1
 8005c02:	89a2      	ldrh	r2, [r4, #12]
 8005c04:	4240      	negs	r0, r0
 8005c06:	4313      	orrs	r3, r2
 8005c08:	81a3      	strh	r3, [r4, #12]
 8005c0a:	b005      	add	sp, #20
 8005c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c0e:	9a02      	ldr	r2, [sp, #8]
 8005c10:	6921      	ldr	r1, [r4, #16]
 8005c12:	f7ff ff99 	bl	8005b48 <memcpy>
 8005c16:	89a3      	ldrh	r3, [r4, #12]
 8005c18:	4a14      	ldr	r2, [pc, #80]	; (8005c6c <__ssputs_r+0xc0>)
 8005c1a:	401a      	ands	r2, r3
 8005c1c:	2380      	movs	r3, #128	; 0x80
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	81a3      	strh	r3, [r4, #12]
 8005c22:	9b02      	ldr	r3, [sp, #8]
 8005c24:	6126      	str	r6, [r4, #16]
 8005c26:	18f6      	adds	r6, r6, r3
 8005c28:	6026      	str	r6, [r4, #0]
 8005c2a:	6165      	str	r5, [r4, #20]
 8005c2c:	9e01      	ldr	r6, [sp, #4]
 8005c2e:	1aed      	subs	r5, r5, r3
 8005c30:	60a5      	str	r5, [r4, #8]
 8005c32:	9b01      	ldr	r3, [sp, #4]
 8005c34:	429e      	cmp	r6, r3
 8005c36:	d900      	bls.n	8005c3a <__ssputs_r+0x8e>
 8005c38:	9e01      	ldr	r6, [sp, #4]
 8005c3a:	0032      	movs	r2, r6
 8005c3c:	9903      	ldr	r1, [sp, #12]
 8005c3e:	6820      	ldr	r0, [r4, #0]
 8005c40:	f000 faa3 	bl	800618a <memmove>
 8005c44:	68a3      	ldr	r3, [r4, #8]
 8005c46:	2000      	movs	r0, #0
 8005c48:	1b9b      	subs	r3, r3, r6
 8005c4a:	60a3      	str	r3, [r4, #8]
 8005c4c:	6823      	ldr	r3, [r4, #0]
 8005c4e:	199e      	adds	r6, r3, r6
 8005c50:	6026      	str	r6, [r4, #0]
 8005c52:	e7da      	b.n	8005c0a <__ssputs_r+0x5e>
 8005c54:	002a      	movs	r2, r5
 8005c56:	0038      	movs	r0, r7
 8005c58:	f000 fb8c 	bl	8006374 <_realloc_r>
 8005c5c:	1e06      	subs	r6, r0, #0
 8005c5e:	d1e0      	bne.n	8005c22 <__ssputs_r+0x76>
 8005c60:	0038      	movs	r0, r7
 8005c62:	6921      	ldr	r1, [r4, #16]
 8005c64:	f000 faa4 	bl	80061b0 <_free_r>
 8005c68:	e7c7      	b.n	8005bfa <__ssputs_r+0x4e>
 8005c6a:	46c0      	nop			; (mov r8, r8)
 8005c6c:	fffffb7f 	.word	0xfffffb7f

08005c70 <_svfiprintf_r>:
 8005c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c72:	b0a1      	sub	sp, #132	; 0x84
 8005c74:	9003      	str	r0, [sp, #12]
 8005c76:	001d      	movs	r5, r3
 8005c78:	898b      	ldrh	r3, [r1, #12]
 8005c7a:	000f      	movs	r7, r1
 8005c7c:	0016      	movs	r6, r2
 8005c7e:	061b      	lsls	r3, r3, #24
 8005c80:	d511      	bpl.n	8005ca6 <_svfiprintf_r+0x36>
 8005c82:	690b      	ldr	r3, [r1, #16]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10e      	bne.n	8005ca6 <_svfiprintf_r+0x36>
 8005c88:	2140      	movs	r1, #64	; 0x40
 8005c8a:	f000 fafd 	bl	8006288 <_malloc_r>
 8005c8e:	6038      	str	r0, [r7, #0]
 8005c90:	6138      	str	r0, [r7, #16]
 8005c92:	2800      	cmp	r0, #0
 8005c94:	d105      	bne.n	8005ca2 <_svfiprintf_r+0x32>
 8005c96:	230c      	movs	r3, #12
 8005c98:	9a03      	ldr	r2, [sp, #12]
 8005c9a:	3801      	subs	r0, #1
 8005c9c:	6013      	str	r3, [r2, #0]
 8005c9e:	b021      	add	sp, #132	; 0x84
 8005ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ca2:	2340      	movs	r3, #64	; 0x40
 8005ca4:	617b      	str	r3, [r7, #20]
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	ac08      	add	r4, sp, #32
 8005caa:	6163      	str	r3, [r4, #20]
 8005cac:	3320      	adds	r3, #32
 8005cae:	7663      	strb	r3, [r4, #25]
 8005cb0:	3310      	adds	r3, #16
 8005cb2:	76a3      	strb	r3, [r4, #26]
 8005cb4:	9507      	str	r5, [sp, #28]
 8005cb6:	0035      	movs	r5, r6
 8005cb8:	782b      	ldrb	r3, [r5, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d001      	beq.n	8005cc2 <_svfiprintf_r+0x52>
 8005cbe:	2b25      	cmp	r3, #37	; 0x25
 8005cc0:	d147      	bne.n	8005d52 <_svfiprintf_r+0xe2>
 8005cc2:	1bab      	subs	r3, r5, r6
 8005cc4:	9305      	str	r3, [sp, #20]
 8005cc6:	42b5      	cmp	r5, r6
 8005cc8:	d00c      	beq.n	8005ce4 <_svfiprintf_r+0x74>
 8005cca:	0032      	movs	r2, r6
 8005ccc:	0039      	movs	r1, r7
 8005cce:	9803      	ldr	r0, [sp, #12]
 8005cd0:	f7ff ff6c 	bl	8005bac <__ssputs_r>
 8005cd4:	1c43      	adds	r3, r0, #1
 8005cd6:	d100      	bne.n	8005cda <_svfiprintf_r+0x6a>
 8005cd8:	e0ae      	b.n	8005e38 <_svfiprintf_r+0x1c8>
 8005cda:	6962      	ldr	r2, [r4, #20]
 8005cdc:	9b05      	ldr	r3, [sp, #20]
 8005cde:	4694      	mov	ip, r2
 8005ce0:	4463      	add	r3, ip
 8005ce2:	6163      	str	r3, [r4, #20]
 8005ce4:	782b      	ldrb	r3, [r5, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d100      	bne.n	8005cec <_svfiprintf_r+0x7c>
 8005cea:	e0a5      	b.n	8005e38 <_svfiprintf_r+0x1c8>
 8005cec:	2201      	movs	r2, #1
 8005cee:	2300      	movs	r3, #0
 8005cf0:	4252      	negs	r2, r2
 8005cf2:	6062      	str	r2, [r4, #4]
 8005cf4:	a904      	add	r1, sp, #16
 8005cf6:	3254      	adds	r2, #84	; 0x54
 8005cf8:	1852      	adds	r2, r2, r1
 8005cfa:	1c6e      	adds	r6, r5, #1
 8005cfc:	6023      	str	r3, [r4, #0]
 8005cfe:	60e3      	str	r3, [r4, #12]
 8005d00:	60a3      	str	r3, [r4, #8]
 8005d02:	7013      	strb	r3, [r2, #0]
 8005d04:	65a3      	str	r3, [r4, #88]	; 0x58
 8005d06:	2205      	movs	r2, #5
 8005d08:	7831      	ldrb	r1, [r6, #0]
 8005d0a:	4854      	ldr	r0, [pc, #336]	; (8005e5c <_svfiprintf_r+0x1ec>)
 8005d0c:	f000 fa32 	bl	8006174 <memchr>
 8005d10:	1c75      	adds	r5, r6, #1
 8005d12:	2800      	cmp	r0, #0
 8005d14:	d11f      	bne.n	8005d56 <_svfiprintf_r+0xe6>
 8005d16:	6822      	ldr	r2, [r4, #0]
 8005d18:	06d3      	lsls	r3, r2, #27
 8005d1a:	d504      	bpl.n	8005d26 <_svfiprintf_r+0xb6>
 8005d1c:	2353      	movs	r3, #83	; 0x53
 8005d1e:	a904      	add	r1, sp, #16
 8005d20:	185b      	adds	r3, r3, r1
 8005d22:	2120      	movs	r1, #32
 8005d24:	7019      	strb	r1, [r3, #0]
 8005d26:	0713      	lsls	r3, r2, #28
 8005d28:	d504      	bpl.n	8005d34 <_svfiprintf_r+0xc4>
 8005d2a:	2353      	movs	r3, #83	; 0x53
 8005d2c:	a904      	add	r1, sp, #16
 8005d2e:	185b      	adds	r3, r3, r1
 8005d30:	212b      	movs	r1, #43	; 0x2b
 8005d32:	7019      	strb	r1, [r3, #0]
 8005d34:	7833      	ldrb	r3, [r6, #0]
 8005d36:	2b2a      	cmp	r3, #42	; 0x2a
 8005d38:	d016      	beq.n	8005d68 <_svfiprintf_r+0xf8>
 8005d3a:	0035      	movs	r5, r6
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	200a      	movs	r0, #10
 8005d40:	68e3      	ldr	r3, [r4, #12]
 8005d42:	782a      	ldrb	r2, [r5, #0]
 8005d44:	1c6e      	adds	r6, r5, #1
 8005d46:	3a30      	subs	r2, #48	; 0x30
 8005d48:	2a09      	cmp	r2, #9
 8005d4a:	d94e      	bls.n	8005dea <_svfiprintf_r+0x17a>
 8005d4c:	2900      	cmp	r1, #0
 8005d4e:	d111      	bne.n	8005d74 <_svfiprintf_r+0x104>
 8005d50:	e017      	b.n	8005d82 <_svfiprintf_r+0x112>
 8005d52:	3501      	adds	r5, #1
 8005d54:	e7b0      	b.n	8005cb8 <_svfiprintf_r+0x48>
 8005d56:	4b41      	ldr	r3, [pc, #260]	; (8005e5c <_svfiprintf_r+0x1ec>)
 8005d58:	6822      	ldr	r2, [r4, #0]
 8005d5a:	1ac0      	subs	r0, r0, r3
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	4083      	lsls	r3, r0
 8005d60:	4313      	orrs	r3, r2
 8005d62:	002e      	movs	r6, r5
 8005d64:	6023      	str	r3, [r4, #0]
 8005d66:	e7ce      	b.n	8005d06 <_svfiprintf_r+0x96>
 8005d68:	9b07      	ldr	r3, [sp, #28]
 8005d6a:	1d19      	adds	r1, r3, #4
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	9107      	str	r1, [sp, #28]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	db01      	blt.n	8005d78 <_svfiprintf_r+0x108>
 8005d74:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d76:	e004      	b.n	8005d82 <_svfiprintf_r+0x112>
 8005d78:	425b      	negs	r3, r3
 8005d7a:	60e3      	str	r3, [r4, #12]
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	6023      	str	r3, [r4, #0]
 8005d82:	782b      	ldrb	r3, [r5, #0]
 8005d84:	2b2e      	cmp	r3, #46	; 0x2e
 8005d86:	d10a      	bne.n	8005d9e <_svfiprintf_r+0x12e>
 8005d88:	786b      	ldrb	r3, [r5, #1]
 8005d8a:	2b2a      	cmp	r3, #42	; 0x2a
 8005d8c:	d135      	bne.n	8005dfa <_svfiprintf_r+0x18a>
 8005d8e:	9b07      	ldr	r3, [sp, #28]
 8005d90:	3502      	adds	r5, #2
 8005d92:	1d1a      	adds	r2, r3, #4
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	9207      	str	r2, [sp, #28]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	db2b      	blt.n	8005df4 <_svfiprintf_r+0x184>
 8005d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d9e:	4e30      	ldr	r6, [pc, #192]	; (8005e60 <_svfiprintf_r+0x1f0>)
 8005da0:	2203      	movs	r2, #3
 8005da2:	0030      	movs	r0, r6
 8005da4:	7829      	ldrb	r1, [r5, #0]
 8005da6:	f000 f9e5 	bl	8006174 <memchr>
 8005daa:	2800      	cmp	r0, #0
 8005dac:	d006      	beq.n	8005dbc <_svfiprintf_r+0x14c>
 8005dae:	2340      	movs	r3, #64	; 0x40
 8005db0:	1b80      	subs	r0, r0, r6
 8005db2:	4083      	lsls	r3, r0
 8005db4:	6822      	ldr	r2, [r4, #0]
 8005db6:	3501      	adds	r5, #1
 8005db8:	4313      	orrs	r3, r2
 8005dba:	6023      	str	r3, [r4, #0]
 8005dbc:	7829      	ldrb	r1, [r5, #0]
 8005dbe:	2206      	movs	r2, #6
 8005dc0:	4828      	ldr	r0, [pc, #160]	; (8005e64 <_svfiprintf_r+0x1f4>)
 8005dc2:	1c6e      	adds	r6, r5, #1
 8005dc4:	7621      	strb	r1, [r4, #24]
 8005dc6:	f000 f9d5 	bl	8006174 <memchr>
 8005dca:	2800      	cmp	r0, #0
 8005dcc:	d03c      	beq.n	8005e48 <_svfiprintf_r+0x1d8>
 8005dce:	4b26      	ldr	r3, [pc, #152]	; (8005e68 <_svfiprintf_r+0x1f8>)
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d125      	bne.n	8005e20 <_svfiprintf_r+0x1b0>
 8005dd4:	2207      	movs	r2, #7
 8005dd6:	9b07      	ldr	r3, [sp, #28]
 8005dd8:	3307      	adds	r3, #7
 8005dda:	4393      	bics	r3, r2
 8005ddc:	3308      	adds	r3, #8
 8005dde:	9307      	str	r3, [sp, #28]
 8005de0:	6963      	ldr	r3, [r4, #20]
 8005de2:	9a04      	ldr	r2, [sp, #16]
 8005de4:	189b      	adds	r3, r3, r2
 8005de6:	6163      	str	r3, [r4, #20]
 8005de8:	e765      	b.n	8005cb6 <_svfiprintf_r+0x46>
 8005dea:	4343      	muls	r3, r0
 8005dec:	0035      	movs	r5, r6
 8005dee:	2101      	movs	r1, #1
 8005df0:	189b      	adds	r3, r3, r2
 8005df2:	e7a6      	b.n	8005d42 <_svfiprintf_r+0xd2>
 8005df4:	2301      	movs	r3, #1
 8005df6:	425b      	negs	r3, r3
 8005df8:	e7d0      	b.n	8005d9c <_svfiprintf_r+0x12c>
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	200a      	movs	r0, #10
 8005dfe:	001a      	movs	r2, r3
 8005e00:	3501      	adds	r5, #1
 8005e02:	6063      	str	r3, [r4, #4]
 8005e04:	7829      	ldrb	r1, [r5, #0]
 8005e06:	1c6e      	adds	r6, r5, #1
 8005e08:	3930      	subs	r1, #48	; 0x30
 8005e0a:	2909      	cmp	r1, #9
 8005e0c:	d903      	bls.n	8005e16 <_svfiprintf_r+0x1a6>
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d0c5      	beq.n	8005d9e <_svfiprintf_r+0x12e>
 8005e12:	9209      	str	r2, [sp, #36]	; 0x24
 8005e14:	e7c3      	b.n	8005d9e <_svfiprintf_r+0x12e>
 8005e16:	4342      	muls	r2, r0
 8005e18:	0035      	movs	r5, r6
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	1852      	adds	r2, r2, r1
 8005e1e:	e7f1      	b.n	8005e04 <_svfiprintf_r+0x194>
 8005e20:	ab07      	add	r3, sp, #28
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	003a      	movs	r2, r7
 8005e26:	0021      	movs	r1, r4
 8005e28:	4b10      	ldr	r3, [pc, #64]	; (8005e6c <_svfiprintf_r+0x1fc>)
 8005e2a:	9803      	ldr	r0, [sp, #12]
 8005e2c:	e000      	b.n	8005e30 <_svfiprintf_r+0x1c0>
 8005e2e:	bf00      	nop
 8005e30:	9004      	str	r0, [sp, #16]
 8005e32:	9b04      	ldr	r3, [sp, #16]
 8005e34:	3301      	adds	r3, #1
 8005e36:	d1d3      	bne.n	8005de0 <_svfiprintf_r+0x170>
 8005e38:	89bb      	ldrh	r3, [r7, #12]
 8005e3a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005e3c:	065b      	lsls	r3, r3, #25
 8005e3e:	d400      	bmi.n	8005e42 <_svfiprintf_r+0x1d2>
 8005e40:	e72d      	b.n	8005c9e <_svfiprintf_r+0x2e>
 8005e42:	2001      	movs	r0, #1
 8005e44:	4240      	negs	r0, r0
 8005e46:	e72a      	b.n	8005c9e <_svfiprintf_r+0x2e>
 8005e48:	ab07      	add	r3, sp, #28
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	003a      	movs	r2, r7
 8005e4e:	0021      	movs	r1, r4
 8005e50:	4b06      	ldr	r3, [pc, #24]	; (8005e6c <_svfiprintf_r+0x1fc>)
 8005e52:	9803      	ldr	r0, [sp, #12]
 8005e54:	f000 f87c 	bl	8005f50 <_printf_i>
 8005e58:	e7ea      	b.n	8005e30 <_svfiprintf_r+0x1c0>
 8005e5a:	46c0      	nop			; (mov r8, r8)
 8005e5c:	0800672c 	.word	0x0800672c
 8005e60:	08006732 	.word	0x08006732
 8005e64:	08006736 	.word	0x08006736
 8005e68:	00000000 	.word	0x00000000
 8005e6c:	08005bad 	.word	0x08005bad

08005e70 <_printf_common>:
 8005e70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e72:	0015      	movs	r5, r2
 8005e74:	9301      	str	r3, [sp, #4]
 8005e76:	688a      	ldr	r2, [r1, #8]
 8005e78:	690b      	ldr	r3, [r1, #16]
 8005e7a:	000c      	movs	r4, r1
 8005e7c:	9000      	str	r0, [sp, #0]
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	da00      	bge.n	8005e84 <_printf_common+0x14>
 8005e82:	0013      	movs	r3, r2
 8005e84:	0022      	movs	r2, r4
 8005e86:	602b      	str	r3, [r5, #0]
 8005e88:	3243      	adds	r2, #67	; 0x43
 8005e8a:	7812      	ldrb	r2, [r2, #0]
 8005e8c:	2a00      	cmp	r2, #0
 8005e8e:	d001      	beq.n	8005e94 <_printf_common+0x24>
 8005e90:	3301      	adds	r3, #1
 8005e92:	602b      	str	r3, [r5, #0]
 8005e94:	6823      	ldr	r3, [r4, #0]
 8005e96:	069b      	lsls	r3, r3, #26
 8005e98:	d502      	bpl.n	8005ea0 <_printf_common+0x30>
 8005e9a:	682b      	ldr	r3, [r5, #0]
 8005e9c:	3302      	adds	r3, #2
 8005e9e:	602b      	str	r3, [r5, #0]
 8005ea0:	6822      	ldr	r2, [r4, #0]
 8005ea2:	2306      	movs	r3, #6
 8005ea4:	0017      	movs	r7, r2
 8005ea6:	401f      	ands	r7, r3
 8005ea8:	421a      	tst	r2, r3
 8005eaa:	d027      	beq.n	8005efc <_printf_common+0x8c>
 8005eac:	0023      	movs	r3, r4
 8005eae:	3343      	adds	r3, #67	; 0x43
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	1e5a      	subs	r2, r3, #1
 8005eb4:	4193      	sbcs	r3, r2
 8005eb6:	6822      	ldr	r2, [r4, #0]
 8005eb8:	0692      	lsls	r2, r2, #26
 8005eba:	d430      	bmi.n	8005f1e <_printf_common+0xae>
 8005ebc:	0022      	movs	r2, r4
 8005ebe:	9901      	ldr	r1, [sp, #4]
 8005ec0:	9800      	ldr	r0, [sp, #0]
 8005ec2:	9e08      	ldr	r6, [sp, #32]
 8005ec4:	3243      	adds	r2, #67	; 0x43
 8005ec6:	47b0      	blx	r6
 8005ec8:	1c43      	adds	r3, r0, #1
 8005eca:	d025      	beq.n	8005f18 <_printf_common+0xa8>
 8005ecc:	2306      	movs	r3, #6
 8005ece:	6820      	ldr	r0, [r4, #0]
 8005ed0:	682a      	ldr	r2, [r5, #0]
 8005ed2:	68e1      	ldr	r1, [r4, #12]
 8005ed4:	2500      	movs	r5, #0
 8005ed6:	4003      	ands	r3, r0
 8005ed8:	2b04      	cmp	r3, #4
 8005eda:	d103      	bne.n	8005ee4 <_printf_common+0x74>
 8005edc:	1a8d      	subs	r5, r1, r2
 8005ede:	43eb      	mvns	r3, r5
 8005ee0:	17db      	asrs	r3, r3, #31
 8005ee2:	401d      	ands	r5, r3
 8005ee4:	68a3      	ldr	r3, [r4, #8]
 8005ee6:	6922      	ldr	r2, [r4, #16]
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	dd01      	ble.n	8005ef0 <_printf_common+0x80>
 8005eec:	1a9b      	subs	r3, r3, r2
 8005eee:	18ed      	adds	r5, r5, r3
 8005ef0:	2700      	movs	r7, #0
 8005ef2:	42bd      	cmp	r5, r7
 8005ef4:	d120      	bne.n	8005f38 <_printf_common+0xc8>
 8005ef6:	2000      	movs	r0, #0
 8005ef8:	e010      	b.n	8005f1c <_printf_common+0xac>
 8005efa:	3701      	adds	r7, #1
 8005efc:	68e3      	ldr	r3, [r4, #12]
 8005efe:	682a      	ldr	r2, [r5, #0]
 8005f00:	1a9b      	subs	r3, r3, r2
 8005f02:	42bb      	cmp	r3, r7
 8005f04:	ddd2      	ble.n	8005eac <_printf_common+0x3c>
 8005f06:	0022      	movs	r2, r4
 8005f08:	2301      	movs	r3, #1
 8005f0a:	9901      	ldr	r1, [sp, #4]
 8005f0c:	9800      	ldr	r0, [sp, #0]
 8005f0e:	9e08      	ldr	r6, [sp, #32]
 8005f10:	3219      	adds	r2, #25
 8005f12:	47b0      	blx	r6
 8005f14:	1c43      	adds	r3, r0, #1
 8005f16:	d1f0      	bne.n	8005efa <_printf_common+0x8a>
 8005f18:	2001      	movs	r0, #1
 8005f1a:	4240      	negs	r0, r0
 8005f1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f1e:	2030      	movs	r0, #48	; 0x30
 8005f20:	18e1      	adds	r1, r4, r3
 8005f22:	3143      	adds	r1, #67	; 0x43
 8005f24:	7008      	strb	r0, [r1, #0]
 8005f26:	0021      	movs	r1, r4
 8005f28:	1c5a      	adds	r2, r3, #1
 8005f2a:	3145      	adds	r1, #69	; 0x45
 8005f2c:	7809      	ldrb	r1, [r1, #0]
 8005f2e:	18a2      	adds	r2, r4, r2
 8005f30:	3243      	adds	r2, #67	; 0x43
 8005f32:	3302      	adds	r3, #2
 8005f34:	7011      	strb	r1, [r2, #0]
 8005f36:	e7c1      	b.n	8005ebc <_printf_common+0x4c>
 8005f38:	0022      	movs	r2, r4
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	9901      	ldr	r1, [sp, #4]
 8005f3e:	9800      	ldr	r0, [sp, #0]
 8005f40:	9e08      	ldr	r6, [sp, #32]
 8005f42:	321a      	adds	r2, #26
 8005f44:	47b0      	blx	r6
 8005f46:	1c43      	adds	r3, r0, #1
 8005f48:	d0e6      	beq.n	8005f18 <_printf_common+0xa8>
 8005f4a:	3701      	adds	r7, #1
 8005f4c:	e7d1      	b.n	8005ef2 <_printf_common+0x82>
	...

08005f50 <_printf_i>:
 8005f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f52:	b08b      	sub	sp, #44	; 0x2c
 8005f54:	9206      	str	r2, [sp, #24]
 8005f56:	000a      	movs	r2, r1
 8005f58:	3243      	adds	r2, #67	; 0x43
 8005f5a:	9307      	str	r3, [sp, #28]
 8005f5c:	9005      	str	r0, [sp, #20]
 8005f5e:	9204      	str	r2, [sp, #16]
 8005f60:	7e0a      	ldrb	r2, [r1, #24]
 8005f62:	000c      	movs	r4, r1
 8005f64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f66:	2a78      	cmp	r2, #120	; 0x78
 8005f68:	d807      	bhi.n	8005f7a <_printf_i+0x2a>
 8005f6a:	2a62      	cmp	r2, #98	; 0x62
 8005f6c:	d809      	bhi.n	8005f82 <_printf_i+0x32>
 8005f6e:	2a00      	cmp	r2, #0
 8005f70:	d100      	bne.n	8005f74 <_printf_i+0x24>
 8005f72:	e0c1      	b.n	80060f8 <_printf_i+0x1a8>
 8005f74:	2a58      	cmp	r2, #88	; 0x58
 8005f76:	d100      	bne.n	8005f7a <_printf_i+0x2a>
 8005f78:	e08c      	b.n	8006094 <_printf_i+0x144>
 8005f7a:	0026      	movs	r6, r4
 8005f7c:	3642      	adds	r6, #66	; 0x42
 8005f7e:	7032      	strb	r2, [r6, #0]
 8005f80:	e022      	b.n	8005fc8 <_printf_i+0x78>
 8005f82:	0010      	movs	r0, r2
 8005f84:	3863      	subs	r0, #99	; 0x63
 8005f86:	2815      	cmp	r0, #21
 8005f88:	d8f7      	bhi.n	8005f7a <_printf_i+0x2a>
 8005f8a:	f7fa f8d1 	bl	8000130 <__gnu_thumb1_case_shi>
 8005f8e:	0016      	.short	0x0016
 8005f90:	fff6001f 	.word	0xfff6001f
 8005f94:	fff6fff6 	.word	0xfff6fff6
 8005f98:	001ffff6 	.word	0x001ffff6
 8005f9c:	fff6fff6 	.word	0xfff6fff6
 8005fa0:	fff6fff6 	.word	0xfff6fff6
 8005fa4:	003600a8 	.word	0x003600a8
 8005fa8:	fff6009a 	.word	0xfff6009a
 8005fac:	00b9fff6 	.word	0x00b9fff6
 8005fb0:	0036fff6 	.word	0x0036fff6
 8005fb4:	fff6fff6 	.word	0xfff6fff6
 8005fb8:	009e      	.short	0x009e
 8005fba:	0026      	movs	r6, r4
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	3642      	adds	r6, #66	; 0x42
 8005fc0:	1d11      	adds	r1, r2, #4
 8005fc2:	6019      	str	r1, [r3, #0]
 8005fc4:	6813      	ldr	r3, [r2, #0]
 8005fc6:	7033      	strb	r3, [r6, #0]
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e0a7      	b.n	800611c <_printf_i+0x1cc>
 8005fcc:	6808      	ldr	r0, [r1, #0]
 8005fce:	6819      	ldr	r1, [r3, #0]
 8005fd0:	1d0a      	adds	r2, r1, #4
 8005fd2:	0605      	lsls	r5, r0, #24
 8005fd4:	d50b      	bpl.n	8005fee <_printf_i+0x9e>
 8005fd6:	680d      	ldr	r5, [r1, #0]
 8005fd8:	601a      	str	r2, [r3, #0]
 8005fda:	2d00      	cmp	r5, #0
 8005fdc:	da03      	bge.n	8005fe6 <_printf_i+0x96>
 8005fde:	232d      	movs	r3, #45	; 0x2d
 8005fe0:	9a04      	ldr	r2, [sp, #16]
 8005fe2:	426d      	negs	r5, r5
 8005fe4:	7013      	strb	r3, [r2, #0]
 8005fe6:	4b61      	ldr	r3, [pc, #388]	; (800616c <_printf_i+0x21c>)
 8005fe8:	270a      	movs	r7, #10
 8005fea:	9303      	str	r3, [sp, #12]
 8005fec:	e01b      	b.n	8006026 <_printf_i+0xd6>
 8005fee:	680d      	ldr	r5, [r1, #0]
 8005ff0:	601a      	str	r2, [r3, #0]
 8005ff2:	0641      	lsls	r1, r0, #25
 8005ff4:	d5f1      	bpl.n	8005fda <_printf_i+0x8a>
 8005ff6:	b22d      	sxth	r5, r5
 8005ff8:	e7ef      	b.n	8005fda <_printf_i+0x8a>
 8005ffa:	680d      	ldr	r5, [r1, #0]
 8005ffc:	6819      	ldr	r1, [r3, #0]
 8005ffe:	1d08      	adds	r0, r1, #4
 8006000:	6018      	str	r0, [r3, #0]
 8006002:	062e      	lsls	r6, r5, #24
 8006004:	d501      	bpl.n	800600a <_printf_i+0xba>
 8006006:	680d      	ldr	r5, [r1, #0]
 8006008:	e003      	b.n	8006012 <_printf_i+0xc2>
 800600a:	066d      	lsls	r5, r5, #25
 800600c:	d5fb      	bpl.n	8006006 <_printf_i+0xb6>
 800600e:	680d      	ldr	r5, [r1, #0]
 8006010:	b2ad      	uxth	r5, r5
 8006012:	4b56      	ldr	r3, [pc, #344]	; (800616c <_printf_i+0x21c>)
 8006014:	2708      	movs	r7, #8
 8006016:	9303      	str	r3, [sp, #12]
 8006018:	2a6f      	cmp	r2, #111	; 0x6f
 800601a:	d000      	beq.n	800601e <_printf_i+0xce>
 800601c:	3702      	adds	r7, #2
 800601e:	0023      	movs	r3, r4
 8006020:	2200      	movs	r2, #0
 8006022:	3343      	adds	r3, #67	; 0x43
 8006024:	701a      	strb	r2, [r3, #0]
 8006026:	6863      	ldr	r3, [r4, #4]
 8006028:	60a3      	str	r3, [r4, #8]
 800602a:	2b00      	cmp	r3, #0
 800602c:	db03      	blt.n	8006036 <_printf_i+0xe6>
 800602e:	2204      	movs	r2, #4
 8006030:	6821      	ldr	r1, [r4, #0]
 8006032:	4391      	bics	r1, r2
 8006034:	6021      	str	r1, [r4, #0]
 8006036:	2d00      	cmp	r5, #0
 8006038:	d102      	bne.n	8006040 <_printf_i+0xf0>
 800603a:	9e04      	ldr	r6, [sp, #16]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00c      	beq.n	800605a <_printf_i+0x10a>
 8006040:	9e04      	ldr	r6, [sp, #16]
 8006042:	0028      	movs	r0, r5
 8006044:	0039      	movs	r1, r7
 8006046:	f7fa f90d 	bl	8000264 <__aeabi_uidivmod>
 800604a:	9b03      	ldr	r3, [sp, #12]
 800604c:	3e01      	subs	r6, #1
 800604e:	5c5b      	ldrb	r3, [r3, r1]
 8006050:	7033      	strb	r3, [r6, #0]
 8006052:	002b      	movs	r3, r5
 8006054:	0005      	movs	r5, r0
 8006056:	429f      	cmp	r7, r3
 8006058:	d9f3      	bls.n	8006042 <_printf_i+0xf2>
 800605a:	2f08      	cmp	r7, #8
 800605c:	d109      	bne.n	8006072 <_printf_i+0x122>
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	07db      	lsls	r3, r3, #31
 8006062:	d506      	bpl.n	8006072 <_printf_i+0x122>
 8006064:	6863      	ldr	r3, [r4, #4]
 8006066:	6922      	ldr	r2, [r4, #16]
 8006068:	4293      	cmp	r3, r2
 800606a:	dc02      	bgt.n	8006072 <_printf_i+0x122>
 800606c:	2330      	movs	r3, #48	; 0x30
 800606e:	3e01      	subs	r6, #1
 8006070:	7033      	strb	r3, [r6, #0]
 8006072:	9b04      	ldr	r3, [sp, #16]
 8006074:	1b9b      	subs	r3, r3, r6
 8006076:	6123      	str	r3, [r4, #16]
 8006078:	9b07      	ldr	r3, [sp, #28]
 800607a:	0021      	movs	r1, r4
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	9805      	ldr	r0, [sp, #20]
 8006080:	9b06      	ldr	r3, [sp, #24]
 8006082:	aa09      	add	r2, sp, #36	; 0x24
 8006084:	f7ff fef4 	bl	8005e70 <_printf_common>
 8006088:	1c43      	adds	r3, r0, #1
 800608a:	d14c      	bne.n	8006126 <_printf_i+0x1d6>
 800608c:	2001      	movs	r0, #1
 800608e:	4240      	negs	r0, r0
 8006090:	b00b      	add	sp, #44	; 0x2c
 8006092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006094:	3145      	adds	r1, #69	; 0x45
 8006096:	700a      	strb	r2, [r1, #0]
 8006098:	4a34      	ldr	r2, [pc, #208]	; (800616c <_printf_i+0x21c>)
 800609a:	9203      	str	r2, [sp, #12]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	6821      	ldr	r1, [r4, #0]
 80060a0:	ca20      	ldmia	r2!, {r5}
 80060a2:	601a      	str	r2, [r3, #0]
 80060a4:	0608      	lsls	r0, r1, #24
 80060a6:	d516      	bpl.n	80060d6 <_printf_i+0x186>
 80060a8:	07cb      	lsls	r3, r1, #31
 80060aa:	d502      	bpl.n	80060b2 <_printf_i+0x162>
 80060ac:	2320      	movs	r3, #32
 80060ae:	4319      	orrs	r1, r3
 80060b0:	6021      	str	r1, [r4, #0]
 80060b2:	2710      	movs	r7, #16
 80060b4:	2d00      	cmp	r5, #0
 80060b6:	d1b2      	bne.n	800601e <_printf_i+0xce>
 80060b8:	2320      	movs	r3, #32
 80060ba:	6822      	ldr	r2, [r4, #0]
 80060bc:	439a      	bics	r2, r3
 80060be:	6022      	str	r2, [r4, #0]
 80060c0:	e7ad      	b.n	800601e <_printf_i+0xce>
 80060c2:	2220      	movs	r2, #32
 80060c4:	6809      	ldr	r1, [r1, #0]
 80060c6:	430a      	orrs	r2, r1
 80060c8:	6022      	str	r2, [r4, #0]
 80060ca:	0022      	movs	r2, r4
 80060cc:	2178      	movs	r1, #120	; 0x78
 80060ce:	3245      	adds	r2, #69	; 0x45
 80060d0:	7011      	strb	r1, [r2, #0]
 80060d2:	4a27      	ldr	r2, [pc, #156]	; (8006170 <_printf_i+0x220>)
 80060d4:	e7e1      	b.n	800609a <_printf_i+0x14a>
 80060d6:	0648      	lsls	r0, r1, #25
 80060d8:	d5e6      	bpl.n	80060a8 <_printf_i+0x158>
 80060da:	b2ad      	uxth	r5, r5
 80060dc:	e7e4      	b.n	80060a8 <_printf_i+0x158>
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	680d      	ldr	r5, [r1, #0]
 80060e2:	1d10      	adds	r0, r2, #4
 80060e4:	6949      	ldr	r1, [r1, #20]
 80060e6:	6018      	str	r0, [r3, #0]
 80060e8:	6813      	ldr	r3, [r2, #0]
 80060ea:	062e      	lsls	r6, r5, #24
 80060ec:	d501      	bpl.n	80060f2 <_printf_i+0x1a2>
 80060ee:	6019      	str	r1, [r3, #0]
 80060f0:	e002      	b.n	80060f8 <_printf_i+0x1a8>
 80060f2:	066d      	lsls	r5, r5, #25
 80060f4:	d5fb      	bpl.n	80060ee <_printf_i+0x19e>
 80060f6:	8019      	strh	r1, [r3, #0]
 80060f8:	2300      	movs	r3, #0
 80060fa:	9e04      	ldr	r6, [sp, #16]
 80060fc:	6123      	str	r3, [r4, #16]
 80060fe:	e7bb      	b.n	8006078 <_printf_i+0x128>
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	1d11      	adds	r1, r2, #4
 8006104:	6019      	str	r1, [r3, #0]
 8006106:	6816      	ldr	r6, [r2, #0]
 8006108:	2100      	movs	r1, #0
 800610a:	0030      	movs	r0, r6
 800610c:	6862      	ldr	r2, [r4, #4]
 800610e:	f000 f831 	bl	8006174 <memchr>
 8006112:	2800      	cmp	r0, #0
 8006114:	d001      	beq.n	800611a <_printf_i+0x1ca>
 8006116:	1b80      	subs	r0, r0, r6
 8006118:	6060      	str	r0, [r4, #4]
 800611a:	6863      	ldr	r3, [r4, #4]
 800611c:	6123      	str	r3, [r4, #16]
 800611e:	2300      	movs	r3, #0
 8006120:	9a04      	ldr	r2, [sp, #16]
 8006122:	7013      	strb	r3, [r2, #0]
 8006124:	e7a8      	b.n	8006078 <_printf_i+0x128>
 8006126:	6923      	ldr	r3, [r4, #16]
 8006128:	0032      	movs	r2, r6
 800612a:	9906      	ldr	r1, [sp, #24]
 800612c:	9805      	ldr	r0, [sp, #20]
 800612e:	9d07      	ldr	r5, [sp, #28]
 8006130:	47a8      	blx	r5
 8006132:	1c43      	adds	r3, r0, #1
 8006134:	d0aa      	beq.n	800608c <_printf_i+0x13c>
 8006136:	6823      	ldr	r3, [r4, #0]
 8006138:	079b      	lsls	r3, r3, #30
 800613a:	d415      	bmi.n	8006168 <_printf_i+0x218>
 800613c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800613e:	68e0      	ldr	r0, [r4, #12]
 8006140:	4298      	cmp	r0, r3
 8006142:	daa5      	bge.n	8006090 <_printf_i+0x140>
 8006144:	0018      	movs	r0, r3
 8006146:	e7a3      	b.n	8006090 <_printf_i+0x140>
 8006148:	0022      	movs	r2, r4
 800614a:	2301      	movs	r3, #1
 800614c:	9906      	ldr	r1, [sp, #24]
 800614e:	9805      	ldr	r0, [sp, #20]
 8006150:	9e07      	ldr	r6, [sp, #28]
 8006152:	3219      	adds	r2, #25
 8006154:	47b0      	blx	r6
 8006156:	1c43      	adds	r3, r0, #1
 8006158:	d098      	beq.n	800608c <_printf_i+0x13c>
 800615a:	3501      	adds	r5, #1
 800615c:	68e3      	ldr	r3, [r4, #12]
 800615e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006160:	1a9b      	subs	r3, r3, r2
 8006162:	42ab      	cmp	r3, r5
 8006164:	dcf0      	bgt.n	8006148 <_printf_i+0x1f8>
 8006166:	e7e9      	b.n	800613c <_printf_i+0x1ec>
 8006168:	2500      	movs	r5, #0
 800616a:	e7f7      	b.n	800615c <_printf_i+0x20c>
 800616c:	0800673d 	.word	0x0800673d
 8006170:	0800674e 	.word	0x0800674e

08006174 <memchr>:
 8006174:	b2c9      	uxtb	r1, r1
 8006176:	1882      	adds	r2, r0, r2
 8006178:	4290      	cmp	r0, r2
 800617a:	d101      	bne.n	8006180 <memchr+0xc>
 800617c:	2000      	movs	r0, #0
 800617e:	4770      	bx	lr
 8006180:	7803      	ldrb	r3, [r0, #0]
 8006182:	428b      	cmp	r3, r1
 8006184:	d0fb      	beq.n	800617e <memchr+0xa>
 8006186:	3001      	adds	r0, #1
 8006188:	e7f6      	b.n	8006178 <memchr+0x4>

0800618a <memmove>:
 800618a:	b510      	push	{r4, lr}
 800618c:	4288      	cmp	r0, r1
 800618e:	d902      	bls.n	8006196 <memmove+0xc>
 8006190:	188b      	adds	r3, r1, r2
 8006192:	4298      	cmp	r0, r3
 8006194:	d303      	bcc.n	800619e <memmove+0x14>
 8006196:	2300      	movs	r3, #0
 8006198:	e007      	b.n	80061aa <memmove+0x20>
 800619a:	5c8b      	ldrb	r3, [r1, r2]
 800619c:	5483      	strb	r3, [r0, r2]
 800619e:	3a01      	subs	r2, #1
 80061a0:	d2fb      	bcs.n	800619a <memmove+0x10>
 80061a2:	bd10      	pop	{r4, pc}
 80061a4:	5ccc      	ldrb	r4, [r1, r3]
 80061a6:	54c4      	strb	r4, [r0, r3]
 80061a8:	3301      	adds	r3, #1
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d1fa      	bne.n	80061a4 <memmove+0x1a>
 80061ae:	e7f8      	b.n	80061a2 <memmove+0x18>

080061b0 <_free_r>:
 80061b0:	b570      	push	{r4, r5, r6, lr}
 80061b2:	0005      	movs	r5, r0
 80061b4:	2900      	cmp	r1, #0
 80061b6:	d010      	beq.n	80061da <_free_r+0x2a>
 80061b8:	1f0c      	subs	r4, r1, #4
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	da00      	bge.n	80061c2 <_free_r+0x12>
 80061c0:	18e4      	adds	r4, r4, r3
 80061c2:	0028      	movs	r0, r5
 80061c4:	f000 f918 	bl	80063f8 <__malloc_lock>
 80061c8:	4a1d      	ldr	r2, [pc, #116]	; (8006240 <_free_r+0x90>)
 80061ca:	6813      	ldr	r3, [r2, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d105      	bne.n	80061dc <_free_r+0x2c>
 80061d0:	6063      	str	r3, [r4, #4]
 80061d2:	6014      	str	r4, [r2, #0]
 80061d4:	0028      	movs	r0, r5
 80061d6:	f000 f917 	bl	8006408 <__malloc_unlock>
 80061da:	bd70      	pop	{r4, r5, r6, pc}
 80061dc:	42a3      	cmp	r3, r4
 80061de:	d908      	bls.n	80061f2 <_free_r+0x42>
 80061e0:	6821      	ldr	r1, [r4, #0]
 80061e2:	1860      	adds	r0, r4, r1
 80061e4:	4283      	cmp	r3, r0
 80061e6:	d1f3      	bne.n	80061d0 <_free_r+0x20>
 80061e8:	6818      	ldr	r0, [r3, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	1841      	adds	r1, r0, r1
 80061ee:	6021      	str	r1, [r4, #0]
 80061f0:	e7ee      	b.n	80061d0 <_free_r+0x20>
 80061f2:	001a      	movs	r2, r3
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <_free_r+0x4e>
 80061fa:	42a3      	cmp	r3, r4
 80061fc:	d9f9      	bls.n	80061f2 <_free_r+0x42>
 80061fe:	6811      	ldr	r1, [r2, #0]
 8006200:	1850      	adds	r0, r2, r1
 8006202:	42a0      	cmp	r0, r4
 8006204:	d10b      	bne.n	800621e <_free_r+0x6e>
 8006206:	6820      	ldr	r0, [r4, #0]
 8006208:	1809      	adds	r1, r1, r0
 800620a:	1850      	adds	r0, r2, r1
 800620c:	6011      	str	r1, [r2, #0]
 800620e:	4283      	cmp	r3, r0
 8006210:	d1e0      	bne.n	80061d4 <_free_r+0x24>
 8006212:	6818      	ldr	r0, [r3, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	1841      	adds	r1, r0, r1
 8006218:	6011      	str	r1, [r2, #0]
 800621a:	6053      	str	r3, [r2, #4]
 800621c:	e7da      	b.n	80061d4 <_free_r+0x24>
 800621e:	42a0      	cmp	r0, r4
 8006220:	d902      	bls.n	8006228 <_free_r+0x78>
 8006222:	230c      	movs	r3, #12
 8006224:	602b      	str	r3, [r5, #0]
 8006226:	e7d5      	b.n	80061d4 <_free_r+0x24>
 8006228:	6821      	ldr	r1, [r4, #0]
 800622a:	1860      	adds	r0, r4, r1
 800622c:	4283      	cmp	r3, r0
 800622e:	d103      	bne.n	8006238 <_free_r+0x88>
 8006230:	6818      	ldr	r0, [r3, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	1841      	adds	r1, r0, r1
 8006236:	6021      	str	r1, [r4, #0]
 8006238:	6063      	str	r3, [r4, #4]
 800623a:	6054      	str	r4, [r2, #4]
 800623c:	e7ca      	b.n	80061d4 <_free_r+0x24>
 800623e:	46c0      	nop			; (mov r8, r8)
 8006240:	20000ab4 	.word	0x20000ab4

08006244 <sbrk_aligned>:
 8006244:	b570      	push	{r4, r5, r6, lr}
 8006246:	4e0f      	ldr	r6, [pc, #60]	; (8006284 <sbrk_aligned+0x40>)
 8006248:	000d      	movs	r5, r1
 800624a:	6831      	ldr	r1, [r6, #0]
 800624c:	0004      	movs	r4, r0
 800624e:	2900      	cmp	r1, #0
 8006250:	d102      	bne.n	8006258 <sbrk_aligned+0x14>
 8006252:	f000 f8bf 	bl	80063d4 <_sbrk_r>
 8006256:	6030      	str	r0, [r6, #0]
 8006258:	0029      	movs	r1, r5
 800625a:	0020      	movs	r0, r4
 800625c:	f000 f8ba 	bl	80063d4 <_sbrk_r>
 8006260:	1c43      	adds	r3, r0, #1
 8006262:	d00a      	beq.n	800627a <sbrk_aligned+0x36>
 8006264:	2303      	movs	r3, #3
 8006266:	1cc5      	adds	r5, r0, #3
 8006268:	439d      	bics	r5, r3
 800626a:	42a8      	cmp	r0, r5
 800626c:	d007      	beq.n	800627e <sbrk_aligned+0x3a>
 800626e:	1a29      	subs	r1, r5, r0
 8006270:	0020      	movs	r0, r4
 8006272:	f000 f8af 	bl	80063d4 <_sbrk_r>
 8006276:	1c43      	adds	r3, r0, #1
 8006278:	d101      	bne.n	800627e <sbrk_aligned+0x3a>
 800627a:	2501      	movs	r5, #1
 800627c:	426d      	negs	r5, r5
 800627e:	0028      	movs	r0, r5
 8006280:	bd70      	pop	{r4, r5, r6, pc}
 8006282:	46c0      	nop			; (mov r8, r8)
 8006284:	20000ab8 	.word	0x20000ab8

08006288 <_malloc_r>:
 8006288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800628a:	2203      	movs	r2, #3
 800628c:	1ccb      	adds	r3, r1, #3
 800628e:	4393      	bics	r3, r2
 8006290:	3308      	adds	r3, #8
 8006292:	0006      	movs	r6, r0
 8006294:	001f      	movs	r7, r3
 8006296:	2b0c      	cmp	r3, #12
 8006298:	d232      	bcs.n	8006300 <_malloc_r+0x78>
 800629a:	270c      	movs	r7, #12
 800629c:	42b9      	cmp	r1, r7
 800629e:	d831      	bhi.n	8006304 <_malloc_r+0x7c>
 80062a0:	0030      	movs	r0, r6
 80062a2:	f000 f8a9 	bl	80063f8 <__malloc_lock>
 80062a6:	4d32      	ldr	r5, [pc, #200]	; (8006370 <_malloc_r+0xe8>)
 80062a8:	682b      	ldr	r3, [r5, #0]
 80062aa:	001c      	movs	r4, r3
 80062ac:	2c00      	cmp	r4, #0
 80062ae:	d12e      	bne.n	800630e <_malloc_r+0x86>
 80062b0:	0039      	movs	r1, r7
 80062b2:	0030      	movs	r0, r6
 80062b4:	f7ff ffc6 	bl	8006244 <sbrk_aligned>
 80062b8:	0004      	movs	r4, r0
 80062ba:	1c43      	adds	r3, r0, #1
 80062bc:	d11e      	bne.n	80062fc <_malloc_r+0x74>
 80062be:	682c      	ldr	r4, [r5, #0]
 80062c0:	0025      	movs	r5, r4
 80062c2:	2d00      	cmp	r5, #0
 80062c4:	d14a      	bne.n	800635c <_malloc_r+0xd4>
 80062c6:	6823      	ldr	r3, [r4, #0]
 80062c8:	0029      	movs	r1, r5
 80062ca:	18e3      	adds	r3, r4, r3
 80062cc:	0030      	movs	r0, r6
 80062ce:	9301      	str	r3, [sp, #4]
 80062d0:	f000 f880 	bl	80063d4 <_sbrk_r>
 80062d4:	9b01      	ldr	r3, [sp, #4]
 80062d6:	4283      	cmp	r3, r0
 80062d8:	d143      	bne.n	8006362 <_malloc_r+0xda>
 80062da:	6823      	ldr	r3, [r4, #0]
 80062dc:	3703      	adds	r7, #3
 80062de:	1aff      	subs	r7, r7, r3
 80062e0:	2303      	movs	r3, #3
 80062e2:	439f      	bics	r7, r3
 80062e4:	3708      	adds	r7, #8
 80062e6:	2f0c      	cmp	r7, #12
 80062e8:	d200      	bcs.n	80062ec <_malloc_r+0x64>
 80062ea:	270c      	movs	r7, #12
 80062ec:	0039      	movs	r1, r7
 80062ee:	0030      	movs	r0, r6
 80062f0:	f7ff ffa8 	bl	8006244 <sbrk_aligned>
 80062f4:	1c43      	adds	r3, r0, #1
 80062f6:	d034      	beq.n	8006362 <_malloc_r+0xda>
 80062f8:	6823      	ldr	r3, [r4, #0]
 80062fa:	19df      	adds	r7, r3, r7
 80062fc:	6027      	str	r7, [r4, #0]
 80062fe:	e013      	b.n	8006328 <_malloc_r+0xa0>
 8006300:	2b00      	cmp	r3, #0
 8006302:	dacb      	bge.n	800629c <_malloc_r+0x14>
 8006304:	230c      	movs	r3, #12
 8006306:	2500      	movs	r5, #0
 8006308:	6033      	str	r3, [r6, #0]
 800630a:	0028      	movs	r0, r5
 800630c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800630e:	6822      	ldr	r2, [r4, #0]
 8006310:	1bd1      	subs	r1, r2, r7
 8006312:	d420      	bmi.n	8006356 <_malloc_r+0xce>
 8006314:	290b      	cmp	r1, #11
 8006316:	d917      	bls.n	8006348 <_malloc_r+0xc0>
 8006318:	19e2      	adds	r2, r4, r7
 800631a:	6027      	str	r7, [r4, #0]
 800631c:	42a3      	cmp	r3, r4
 800631e:	d111      	bne.n	8006344 <_malloc_r+0xbc>
 8006320:	602a      	str	r2, [r5, #0]
 8006322:	6863      	ldr	r3, [r4, #4]
 8006324:	6011      	str	r1, [r2, #0]
 8006326:	6053      	str	r3, [r2, #4]
 8006328:	0030      	movs	r0, r6
 800632a:	0025      	movs	r5, r4
 800632c:	f000 f86c 	bl	8006408 <__malloc_unlock>
 8006330:	2207      	movs	r2, #7
 8006332:	350b      	adds	r5, #11
 8006334:	1d23      	adds	r3, r4, #4
 8006336:	4395      	bics	r5, r2
 8006338:	1aea      	subs	r2, r5, r3
 800633a:	429d      	cmp	r5, r3
 800633c:	d0e5      	beq.n	800630a <_malloc_r+0x82>
 800633e:	1b5b      	subs	r3, r3, r5
 8006340:	50a3      	str	r3, [r4, r2]
 8006342:	e7e2      	b.n	800630a <_malloc_r+0x82>
 8006344:	605a      	str	r2, [r3, #4]
 8006346:	e7ec      	b.n	8006322 <_malloc_r+0x9a>
 8006348:	6862      	ldr	r2, [r4, #4]
 800634a:	42a3      	cmp	r3, r4
 800634c:	d101      	bne.n	8006352 <_malloc_r+0xca>
 800634e:	602a      	str	r2, [r5, #0]
 8006350:	e7ea      	b.n	8006328 <_malloc_r+0xa0>
 8006352:	605a      	str	r2, [r3, #4]
 8006354:	e7e8      	b.n	8006328 <_malloc_r+0xa0>
 8006356:	0023      	movs	r3, r4
 8006358:	6864      	ldr	r4, [r4, #4]
 800635a:	e7a7      	b.n	80062ac <_malloc_r+0x24>
 800635c:	002c      	movs	r4, r5
 800635e:	686d      	ldr	r5, [r5, #4]
 8006360:	e7af      	b.n	80062c2 <_malloc_r+0x3a>
 8006362:	230c      	movs	r3, #12
 8006364:	0030      	movs	r0, r6
 8006366:	6033      	str	r3, [r6, #0]
 8006368:	f000 f84e 	bl	8006408 <__malloc_unlock>
 800636c:	e7cd      	b.n	800630a <_malloc_r+0x82>
 800636e:	46c0      	nop			; (mov r8, r8)
 8006370:	20000ab4 	.word	0x20000ab4

08006374 <_realloc_r>:
 8006374:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006376:	0007      	movs	r7, r0
 8006378:	000e      	movs	r6, r1
 800637a:	0014      	movs	r4, r2
 800637c:	2900      	cmp	r1, #0
 800637e:	d105      	bne.n	800638c <_realloc_r+0x18>
 8006380:	0011      	movs	r1, r2
 8006382:	f7ff ff81 	bl	8006288 <_malloc_r>
 8006386:	0005      	movs	r5, r0
 8006388:	0028      	movs	r0, r5
 800638a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800638c:	2a00      	cmp	r2, #0
 800638e:	d103      	bne.n	8006398 <_realloc_r+0x24>
 8006390:	f7ff ff0e 	bl	80061b0 <_free_r>
 8006394:	0025      	movs	r5, r4
 8006396:	e7f7      	b.n	8006388 <_realloc_r+0x14>
 8006398:	f000 f83e 	bl	8006418 <_malloc_usable_size_r>
 800639c:	9001      	str	r0, [sp, #4]
 800639e:	4284      	cmp	r4, r0
 80063a0:	d803      	bhi.n	80063aa <_realloc_r+0x36>
 80063a2:	0035      	movs	r5, r6
 80063a4:	0843      	lsrs	r3, r0, #1
 80063a6:	42a3      	cmp	r3, r4
 80063a8:	d3ee      	bcc.n	8006388 <_realloc_r+0x14>
 80063aa:	0021      	movs	r1, r4
 80063ac:	0038      	movs	r0, r7
 80063ae:	f7ff ff6b 	bl	8006288 <_malloc_r>
 80063b2:	1e05      	subs	r5, r0, #0
 80063b4:	d0e8      	beq.n	8006388 <_realloc_r+0x14>
 80063b6:	9b01      	ldr	r3, [sp, #4]
 80063b8:	0022      	movs	r2, r4
 80063ba:	429c      	cmp	r4, r3
 80063bc:	d900      	bls.n	80063c0 <_realloc_r+0x4c>
 80063be:	001a      	movs	r2, r3
 80063c0:	0031      	movs	r1, r6
 80063c2:	0028      	movs	r0, r5
 80063c4:	f7ff fbc0 	bl	8005b48 <memcpy>
 80063c8:	0031      	movs	r1, r6
 80063ca:	0038      	movs	r0, r7
 80063cc:	f7ff fef0 	bl	80061b0 <_free_r>
 80063d0:	e7da      	b.n	8006388 <_realloc_r+0x14>
	...

080063d4 <_sbrk_r>:
 80063d4:	2300      	movs	r3, #0
 80063d6:	b570      	push	{r4, r5, r6, lr}
 80063d8:	4d06      	ldr	r5, [pc, #24]	; (80063f4 <_sbrk_r+0x20>)
 80063da:	0004      	movs	r4, r0
 80063dc:	0008      	movs	r0, r1
 80063de:	602b      	str	r3, [r5, #0]
 80063e0:	f7fb fe48 	bl	8002074 <_sbrk>
 80063e4:	1c43      	adds	r3, r0, #1
 80063e6:	d103      	bne.n	80063f0 <_sbrk_r+0x1c>
 80063e8:	682b      	ldr	r3, [r5, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d000      	beq.n	80063f0 <_sbrk_r+0x1c>
 80063ee:	6023      	str	r3, [r4, #0]
 80063f0:	bd70      	pop	{r4, r5, r6, pc}
 80063f2:	46c0      	nop			; (mov r8, r8)
 80063f4:	20000abc 	.word	0x20000abc

080063f8 <__malloc_lock>:
 80063f8:	b510      	push	{r4, lr}
 80063fa:	4802      	ldr	r0, [pc, #8]	; (8006404 <__malloc_lock+0xc>)
 80063fc:	f000 f814 	bl	8006428 <__retarget_lock_acquire_recursive>
 8006400:	bd10      	pop	{r4, pc}
 8006402:	46c0      	nop			; (mov r8, r8)
 8006404:	20000ac0 	.word	0x20000ac0

08006408 <__malloc_unlock>:
 8006408:	b510      	push	{r4, lr}
 800640a:	4802      	ldr	r0, [pc, #8]	; (8006414 <__malloc_unlock+0xc>)
 800640c:	f000 f80d 	bl	800642a <__retarget_lock_release_recursive>
 8006410:	bd10      	pop	{r4, pc}
 8006412:	46c0      	nop			; (mov r8, r8)
 8006414:	20000ac0 	.word	0x20000ac0

08006418 <_malloc_usable_size_r>:
 8006418:	1f0b      	subs	r3, r1, #4
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	1f18      	subs	r0, r3, #4
 800641e:	2b00      	cmp	r3, #0
 8006420:	da01      	bge.n	8006426 <_malloc_usable_size_r+0xe>
 8006422:	580b      	ldr	r3, [r1, r0]
 8006424:	18c0      	adds	r0, r0, r3
 8006426:	4770      	bx	lr

08006428 <__retarget_lock_acquire_recursive>:
 8006428:	4770      	bx	lr

0800642a <__retarget_lock_release_recursive>:
 800642a:	4770      	bx	lr

0800642c <_init>:
 800642c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642e:	46c0      	nop			; (mov r8, r8)
 8006430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006432:	bc08      	pop	{r3}
 8006434:	469e      	mov	lr, r3
 8006436:	4770      	bx	lr

08006438 <_fini>:
 8006438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643a:	46c0      	nop			; (mov r8, r8)
 800643c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800643e:	bc08      	pop	{r3}
 8006440:	469e      	mov	lr, r3
 8006442:	4770      	bx	lr
